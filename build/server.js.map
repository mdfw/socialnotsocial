{"version":3,"sources":["webpack:///webpack/bootstrap ce7cc4525739af1d4b07","webpack:///./src/server/server.jsx","webpack:///external \"http\"","webpack:///external \"http-proxy\"","webpack:///external \"express\"","webpack:///external \"helmet\"","webpack:///external \"morgan\"","webpack:///./src/config/environment.js","webpack:///external \"dotenv\""],"names":["apiServerPort","process","env","API_SERVER_PORT","apiProxy","createProxyServer","apiServer","ourPort","MAIN_SERVER_PORT","app","use","static","all","allapiTraffic","req","res","web","target","server","createServer","listen","on","reportOnListen","error","console","log","config","envVars","forEach","Error"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;ACrCA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AASA;;;;AAEA;AAhBA;AAiBA,KAAIA,gBAAgBC,QAAQC,GAAR,CAAYC,eAAhC;;AAVA;AACA;AACA;AACA;AACA;AACA;;AAMA,KAAI,CAACH,aAAL,EAAoB;AAClBA,mBAAgB,IAAhB;AACD;AACD,KAAMI,WAAW,oBAAUC,iBAAV,EAAjB;AACA,KAAMC,kCAAgCN,aAAtC;;AAEA,KAAIO,UAAUN,QAAQC,GAAR,CAAYM,gBAA1B;AACA,KAAI,CAACD,OAAL,EAAc;AACZA,aAAU,IAAV;AACD;;AAED,KAAME,MAAM,wBAAZ;;AAEA;AACA;AACAA,KAAIC,GAAJ,CAAQ,uBAAR;AACAD,KAAIC,GAAJ,CAAQ,sBAAO,UAAP,CAAR;AACAD,KAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,cAAf,CAAR;;AAEA;AACAF,KAAIG,GAAJ,CAAQ,QAAR,EAAkB,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACjDX,YAASY,GAAT,CAAaF,GAAb,EAAkBC,GAAlB,EAAuB,EAAEE,QAAQX,SAAV,EAAvB;AACD,EAFD;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,KAAMY,SAAS,eAAKC,YAAL,CAAkBV,GAAlB,CAAf;AACAS,QAAOE,MAAP,CAAcb,OAAd;AACAW,QAAOG,EAAP,CAAU,WAAV,EAAuB,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpD,OAAIA,KAAJ,EAAW;AACTC,aAAQC,GAAR,oCAA6CF,KAA7C;AACD,IAFD,MAEO;AACLC,aAAQC,GAAR,gDAAyDlB,OAAzD;AACD;AACF,EAND,E;;;;;;AC1EA,kC;;;;;;ACAA,wC;;;;;;ACAA,qC;;;;;;ACAA,oC;;;;;;ACAA,oC;;;;;;;;ACAA;;;;;;AAEA;;;AAGA,kBAAOmB,MAAP;;AAEA;AACA,KAAMC,UAAU,CACd,WADc,EAEd,aAFc,EAGd,UAHc,EAId,iBAJc,EAKd,kBALc,EAMd,kBANc,EAOd,gCAPc,EAQd,iBARc,CAAhB;;AAWA;AACAA,SAAQC,OAAR,CAAgB,UAAC1B,GAAD,EAAS;AACvB,OAAI,CAACD,QAAQC,GAAR,CAAYA,GAAZ,CAAL,EAAuB;AACrB,WAAM,IAAI2B,KAAJ,2BAAkC3B,GAAlC,eAAN;AACD;AACF,EAJD,E;;;;;;ACpBA,oC","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ce7cc4525739af1d4b07","/* Core imports */\nimport http from 'http';\nimport httpProxy from 'http-proxy';\nimport express from 'express';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\n\n// import React from 'react';\n// import { renderToString } from 'react-dom/server';\n// import { RoutingContext, match } from 'react-router';\n/* Routes */\n// import routes from '../shared/routes';\n/* Configurations */\n\nimport '../config/environment';\n\n/* Set up proxy routes to the api server */\nlet apiServerPort = process.env.API_SERVER_PORT;\nif (!apiServerPort) {\n  apiServerPort = 3006;\n}\nconst apiProxy = httpProxy.createProxyServer();\nconst apiServer = `http://localhost:${apiServerPort}`;\n\nlet ourPort = process.env.MAIN_SERVER_PORT;\nif (!ourPort) {\n  ourPort = 3001;\n}\n\nconst app = express();\n\n/* Configure middleware */\n/* Helmet - help secure Express/Connect apps with various HTTP headers */\napp.use(helmet());\napp.use(morgan('combined'));\napp.use(express.static('build/public'));\n\n/* Proxy all api calls through to the api server */\napp.all('/api/*', function allapiTraffic(req, res) {\n  apiProxy.web(req, res, { target: apiServer });\n});\n/*\napp.use((req, res) => {\n  match({ routes, location: req.url }, (err, redirectLocation, renderProps) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).end('Internal server error');\n    }\n    if (!renderProps) return res.status(404).end('Not found.');\n\n    const InitialComponent = (\n      <RoutingContext {...renderProps} />\n    );\n    const componentHTML = renderToString(InitialComponent);\n    const HTML = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Isomorphic Redux Demo</title>\n      </head>\n      <body>\n        <div id=\"react-view\">${componentHTML}</div>\n        <script type=\"application/javascript\" src=\"/bundle.js\"></script>\n      </body>\n  </html>\n`;\n    res.end(HTML);\n  });\n});\n*/\n\nconst server = http.createServer(app);\nserver.listen(ourPort);\nserver.on('listening', function reportOnListen(error) {\n  if (error) {\n    console.log(`Main Server ERROR on startup: ${error}`);\n  } else {\n    console.log(`Main Server listening on http://localhost:${ourPort}.`);\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/server.jsx","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"http-proxy\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http-proxy\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"helmet\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"helmet\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"morgan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 5\n// module chunks = 0","import dotenv from 'dotenv';\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n */\ndotenv.config();\n\n// Bring in Envvars from .env.\nconst envVars = [\n  'REDIS_URL',\n  'MONGODB_URI',\n  'NODE_ENV',\n  'API_SERVER_PORT',\n  'MAIN_SERVER_PORT',\n  'ACCOUNT_PEPPER_1',\n  'ACCOUNT_ENCRYPT_CURRENT_PEPPER',\n  'IDIER_WORKER_ID',\n];\n\n// Check that Envvars are set.\nenvVars.forEach((env) => {\n  if (!process.env[env]) {\n    throw new Error(`Environment variable ${env} not set.`);\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/environment.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}