{"version":3,"sources":["webpack:///server.js","webpack:///webpack/bootstrap 6a373124c9f9ac24942d","webpack:///./src/server/server.jsx","webpack:///external \"http\"","webpack:///external \"http-proxy\"","webpack:///external \"express\"","webpack:///external \"helmet\"","webpack:///external \"morgan\"","webpack:///external \"serve-favicon\"","webpack:///./src/config/environment.js","webpack:///external \"dotenv\"","webpack:///external \"require-environment-variables\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_http","_http2","_httpProxy","_httpProxy2","_express","_express2","_helmet","_helmet2","_morgan","_morgan2","_serveFavicon","_serveFavicon2","apiServerPort","process","env","API_SERVER_PORT","apiProxy","createProxyServer","apiServer","ourPort","MAIN_SERVER_PORT","app","use","NODE_ENV","get","req","res","next","url","set","static","all","web","target","server","createServer","port","PORT","listen","on","error","console","log","require","_dotenv","_dotenv2","_requireEnvironmentVariables","_requireEnvironmentVariables2","load"],"mappings":"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","file":"server.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _http = __webpack_require__(1);\n\t\n\tvar _http2 = _interopRequireDefault(_http);\n\t\n\tvar _httpProxy = __webpack_require__(2);\n\t\n\tvar _httpProxy2 = _interopRequireDefault(_httpProxy);\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tvar _helmet = __webpack_require__(4);\n\t\n\tvar _helmet2 = _interopRequireDefault(_helmet);\n\t\n\tvar _morgan = __webpack_require__(5);\n\t\n\tvar _morgan2 = _interopRequireDefault(_morgan);\n\t\n\tvar _serveFavicon = __webpack_require__(6);\n\t\n\tvar _serveFavicon2 = _interopRequireDefault(_serveFavicon);\n\t\n\t__webpack_require__(7);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Set up proxy routes to the api server */\n\tvar apiServerPort = process.env.API_SERVER_PORT;\n\t\n\t// import React from 'react';\n\t// import { renderToString } from 'react-dom/server';\n\t// import { RoutingContext, match } from 'react-router';\n\t/* Routes */\n\t// import routes from '../shared/routes';\n\t/* Configurations */\n\t\n\t/* Core imports */\n\t\n\tif (!apiServerPort) {\n\t  apiServerPort = 3006;\n\t}\n\tvar apiProxy = _httpProxy2.default.createProxyServer();\n\tvar apiServer = 'http://localhost:' + apiServerPort;\n\t\n\tvar ourPort = process.env.MAIN_SERVER_PORT;\n\tif (!ourPort) {\n\t  ourPort = 3001;\n\t}\n\t\n\tvar app = (0, _express2.default)();\n\t\n\tapp.use((0, _serveFavicon2.default)('build/public/assets/favicon.ico'));\n\t\n\t/* Configure middleware */\n\t/* Helmet - help secure Express/Connect apps with various HTTP headers */\n\tapp.use((0, _helmet2.default)());\n\tapp.use((0, _morgan2.default)('combined'));\n\t\n\tif (process.env.NODE_ENV && process.env.NODE_ENV === 'production') {\n\t  app.get('*.js', function (req, res, next) {\n\t    req.url = req.url + '.gz'; // eslint-disable-line no-param-reassign\n\t    res.set('Content-Encoding', 'gzip');\n\t    next();\n\t  });\n\t}\n\t\n\tapp.use(_express2.default.static('build/public'));\n\t\n\t/* Proxy all api calls through to the api server */\n\tapp.all('/api/*', function allapiTraffic(req, res) {\n\t  apiProxy.web(req, res, { target: apiServer });\n\t});\n\t/*\n\tapp.use((req, res) => {\n\t  match({ routes, location: req.url }, (err, redirectLocation, renderProps) => {\n\t    if (err) {\n\t      console.error(err);\n\t      return res.status(500).end('Internal server error');\n\t    }\n\t    if (!renderProps) return res.status(404).end('Not found.');\n\t\n\t    const InitialComponent = (\n\t      <RoutingContext {...renderProps} />\n\t    );\n\t    const componentHTML = renderToString(InitialComponent);\n\t    const HTML = `\n\t    <!DOCTYPE html>\n\t    <html>\n\t      <head>\n\t        <meta charset=\"utf-8\">\n\t        <title>Isomorphic Redux Demo</title>\n\t      </head>\n\t      <body>\n\t        <div id=\"react-view\">${componentHTML}</div>\n\t        <script type=\"application/javascript\" src=\"/bundle.js\"></script>\n\t      </body>\n\t  </html>\n\t`;\n\t    res.end(HTML);\n\t  });\n\t});\n\t*/\n\t\n\tvar server = _http2.default.createServer(app);\n\tvar port = process.env.PORT || ourPort;\n\tserver.listen(port);\n\tserver.on('listening', function reportOnListen(error) {\n\t  if (error) {\n\t    console.log('Main Server ERROR on startup: ' + error);\n\t  } else {\n\t    console.log('Main Server listening on http://localhost:' + port + '.');\n\t  }\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http-proxy\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"helmet\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"morgan\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"serve-favicon\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _dotenv = __webpack_require__(8);\n\t\n\tvar _dotenv2 = _interopRequireDefault(_dotenv);\n\t\n\tvar _requireEnvironmentVariables = __webpack_require__(9);\n\t\n\tvar _requireEnvironmentVariables2 = _interopRequireDefault(_requireEnvironmentVariables);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* 'As early as possible in your application, require and configure dotenv.'\n\t *   - https://www.npmjs.com/package/dotenv\n\t *\n\t * However, we aren't going to load these in production as it could lead to sloppy deploys.\n\t */\n\tif (process.env.NODE_ENV && process.env.NODE_ENV !== 'production') {\n\t  _dotenv2.default.load();\n\t} else {\n\t  _dotenv2.default.load();\n\t}\n\t\n\t/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n\t *   the process exits with code 400.\n\t * https://github.com/bjoshuanoah/require-environment-variables\n\t */\n\t(0, _requireEnvironmentVariables2.default)(['REDIS_URL', 'MONGODB_URI', 'API_SERVER_PORT', 'MAIN_SERVER_PORT', 'ACCOUNT_PEPPER_1', 'ACCOUNT_ENCRYPT_CURRENT_PEPPER', 'IDIER_WORKER_ID']);\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"dotenv\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"require-environment-variables\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// server.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6a373124c9f9ac24942d","/* Core imports */\nimport http from 'http';\nimport httpProxy from 'http-proxy';\nimport express from 'express';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport favicon from 'serve-favicon';\n\n// import React from 'react';\n// import { renderToString } from 'react-dom/server';\n// import { RoutingContext, match } from 'react-router';\n/* Routes */\n// import routes from '../shared/routes';\n/* Configurations */\n\nimport '../config/environment';\n\n/* Set up proxy routes to the api server */\nlet apiServerPort = process.env.API_SERVER_PORT;\nif (!apiServerPort) {\n  apiServerPort = 3006;\n}\nconst apiProxy = httpProxy.createProxyServer();\nconst apiServer = `http://localhost:${apiServerPort}`;\n\nlet ourPort = process.env.MAIN_SERVER_PORT;\nif (!ourPort) {\n  ourPort = 3001;\n}\n\nconst app = express();\n\napp.use(favicon('build/public/assets/favicon.ico'));\n\n/* Configure middleware */\n/* Helmet - help secure Express/Connect apps with various HTTP headers */\napp.use(helmet());\napp.use(morgan('combined'));\n\nif (process.env.NODE_ENV && process.env.NODE_ENV === 'production') {\n  app.get('*.js', (req, res, next) => {\n    req.url = `${req.url}.gz`; // eslint-disable-line no-param-reassign\n    res.set('Content-Encoding', 'gzip');\n    next();\n  });\n}\n\napp.use(express.static('build/public'));\n\n/* Proxy all api calls through to the api server */\napp.all('/api/*', function allapiTraffic(req, res) {\n  apiProxy.web(req, res, { target: apiServer });\n});\n/*\napp.use((req, res) => {\n  match({ routes, location: req.url }, (err, redirectLocation, renderProps) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).end('Internal server error');\n    }\n    if (!renderProps) return res.status(404).end('Not found.');\n\n    const InitialComponent = (\n      <RoutingContext {...renderProps} />\n    );\n    const componentHTML = renderToString(InitialComponent);\n    const HTML = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Isomorphic Redux Demo</title>\n      </head>\n      <body>\n        <div id=\"react-view\">${componentHTML}</div>\n        <script type=\"application/javascript\" src=\"/bundle.js\"></script>\n      </body>\n  </html>\n`;\n    res.end(HTML);\n  });\n});\n*/\n\nconst server = http.createServer(app);\nconst port = process.env.PORT || ourPort;\nserver.listen(port);\nserver.on('listening', function reportOnListen(error) {\n  if (error) {\n    console.log(`Main Server ERROR on startup: ${error}`);\n  } else {\n    console.log(`Main Server listening on http://localhost:${port}.`);\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/server.jsx","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"http-proxy\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http-proxy\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"helmet\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"helmet\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"morgan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"serve-favicon\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"serve-favicon\"\n// module id = 6\n// module chunks = 0","import dotenv from 'dotenv';\nimport requireEnv from 'require-environment-variables';\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n *\n * However, we aren't going to load these in production as it could lead to sloppy deploys.\n */\nif (process.env.NODE_ENV && process.env.NODE_ENV !== 'production') {\n  dotenv.load();\n} else {\n  dotenv.load();\n}\n\n/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n *   the process exits with code 400.\n * https://github.com/bjoshuanoah/require-environment-variables\n */\nrequireEnv([\n  'REDIS_URL',\n  'MONGODB_URI',\n  'API_SERVER_PORT',\n  'MAIN_SERVER_PORT',\n  'ACCOUNT_PEPPER_1',\n  'ACCOUNT_ENCRYPT_CURRENT_PEPPER',\n  'IDIER_WORKER_ID',\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/environment.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"require-environment-variables\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"require-environment-variables\"\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}