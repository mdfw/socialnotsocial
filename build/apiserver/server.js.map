{"version":3,"sources":["webpack:///server.js","webpack:///webpack/bootstrap 357a07b057e6edc11436","webpack:///./src/apiserver/apiserver.js","webpack:///external \"http\"","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"express-session\"","webpack:///external \"morgan\"","webpack:///external \"chalk\"","webpack:///./src/apiserver/modules/Authentication/warrant.js","webpack:///./src/apiserver/models/index.js","webpack:///external \"sequelize\"","webpack:///./src/apiserver/models/AlbumModel.js","webpack:///./src/shared/helpers/idier.js","webpack:///external \"base58\"","webpack:///external \"generate-password\"","webpack:///./src/apiserver/models/constants.js","webpack:///./src/apiserver/models/ApprisalModel.js","webpack:///./src/apiserver/models/MediaModel.js","webpack:///./src/apiserver/models/PostModel.js","webpack:///./src/apiserver/models/RecipientModel.js","webpack:///./src/shared/helpers/appraise.js","webpack:///external \"validator\"","webpack:///external \"owasp-password-strength-test\"","webpack:///./src/apiserver/models/passwordEncryption.js","webpack:///external \"bcrypt\"","webpack:///external \"crypto\"","webpack:///./src/apiserver/models/UserModel.js","webpack:///./src/apiserver/models/UserValidation.js","webpack:///./src/globalConstants.js","webpack:///./src/apiserver/modules/index.js","webpack:///./src/apiserver/modules/Apprisal/index.js","webpack:///./src/apiserver/modules/Apprisal/routes.js","webpack:///./src/apiserver/modules/Apprisal/controller.js","webpack:///./src/apiserver/modules/Authentication/index.js","webpack:///./src/apiserver/modules/Authentication/routes.js","webpack:///./src/apiserver/modules/Authentication/proxyUser.js","webpack:///./src/apiserver/modules/User/index.js","webpack:///./src/apiserver/modules/User/routes.js","webpack:///./src/apiserver/modules/User/controller.js","webpack:///./src/apiserver/modules/Recipient/index.js","webpack:///./src/apiserver/modules/Recipient/routes.js","webpack:///./src/apiserver/modules/Recipient/controller.js","webpack:///./src/apiserver/modules/Post/index.js","webpack:///./src/apiserver/modules/Post/routes.js","webpack:///./src/apiserver/modules/Post/controller.js","webpack:///./src/apiserver/modules/Media/index.js","webpack:///./src/apiserver/modules/Media/routes.js","webpack:///./src/apiserver/modules/Media/controller.js","webpack:///./src/config/environment.js","webpack:///external \"dotenv\"","webpack:///external \"require-environment-variables\"","webpack:///./src/config/redisConnect.js","webpack:///external \"redis\"","webpack:///external \"connect-redis\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_http","_bodyParser","_bodyParser2","_express","_express2","_expressSession","_expressSession2","_morgan","_morgan2","_chalk","_chalk2","_warrant","_globalConstants","_modules","_redisConnect","_redisConnect2","RedisStore","port","process","env","API_SERVER_PORT","app","use","err","req","res","next","headersSent","status","render","json","urlencoded","extended","name","secret","SESSION_SECRET","resave","saveUninitialized","store","client","validateUserSession","userRoutes","recipientRoutes","sessionsRoutes","postRoutes","mediaRoutes","apprisalRoutes","get","send","on","console","log","close","quit","server","Server","listen","error","red","bold","green","require","Object","defineProperty","value","requireLogin","authenticateUser","destroyUserSession","createUserSession","undefined","_models","User","models","user","cleanUser","displayName","email","userType","validated","session","locals","cookie","COOKIE_NAME_INDICATE_SESSION","httpOnly","destroy","clearCookie","findById","then","UserType","BANNED","body","password","Error","foundUser","find","where","theUser","comparePassword","passwordsMatched","statusMessage","end","RecipientStatus","RecipientType","MAX_POST_SEARCH_RETURN_LIMIT","PostStatus","MediaType","_sequelize","_sequelize2","_AlbumModel","_AlbumModel2","_ApprisalModel","_ApprisalModel2","_MediaModel","_MediaModel2","_PostModel","_PostModel2","_RecipientModel","_RecipientModel2","_UserModel","_UserModel2","_UserValidation","_UserValidation2","_constants","allConfigs","development","username","database","host","dialect","test","production","config","sequelize","DATABASE_URL","db","authenticate","albumModel","apprisalModel","mediaModel","postModel","recipientModel","userModel","userValidationModel","keys","forEach","modelName","associate","sync","Sequelize","_idier","DataTypes","Album","define","type","BIGINT","field","primaryKey","underscored","paranoid","timestamps","hooks","beforeValidate","album","idier","classMethods","belongsTo","foreignKey","allowNull","onDelete","belongsToMany","Media","through","Post","findAllForUser","userId","options","limit","offset","beforeId","includeTables","whereClause","user_id","Number","$lt","limiter","order","include","this","findAll","totalForUser","findAndCountAll","updateAlbum","updates","findOne","foundItem","foundAlbum","fieldsToUpdateKeys","key","save","deleteAlbum","thisAlbum","passGen","toNumericId","toHumanId","_base","_base2","_generatePassword","_generatePassword2","mySequence","globalSeq","global","idierSequence","workerId","IDIER_WORKER_ID","Math","floor","random","timeStamp","Date","now","randomnumber","snowflake","snowflakeInt","parseInt","idNumber","encoded","encode","idString","decoded","decode","length","arguments","numbers","exclude","generate","strict","NORMAL","ADMIN","CUSTSERVICE","DEMO","VIDEO","PHOTO","DRAFT","POSTED","REMOVED","EMAIL","TEXT","POST","FACEBOOK","VALIDATING","ACTIVE","BOUNCING","UNSUBSCRIBED","Apprisal","deliveredAt","DATE","firstOpenedAt","firstViewedAt","canRespond","BOOLEAN","defaultValue","apprisal","Recipient","userWhere","beforeIdWhere","limitClause","offsetClause","orderClause","queryJSON","query","JSON","parse","updateApprisal","foundApprisal","deleteApprisal","thisApprisal","url","STRING","validate","isUrl","ENUM","values","width","INTEGER","height","size","media","updateMedia","foundMedia","deleteMedia","thisMedia","message","edited","post","hasMany","updatePost","foundPost","deletePost","thisPost","_appraise","_passwordEncryption","isValidEmail","appraisalMessages","appraiseEmail","join","accessTokenEncrypted","accessTokenPepper","validatedAt","unsubscribedAt","unsubscribedReason","indexes","unique","fields","recipient","accessToken","token","setAccessToken","instanceMethods","self","encryptedValue","aesHash","TOKEN_ENCRYPT_CURRENT_PEPPER","encrypted","pepperId","getAccessToken","deAesHash","toJSON","assign","deletedAt","updateRecipient","foundRecipient","deleteRecipient","thisRecipient","appraisePostMessage","appraiseAccountId","appraisePasswordErrors","appraisePasswordExtra","appraisePassword","appraiseDisplayName","appraiseThese","_validator","_owaspPasswordStrengthTest","_owaspPasswordStrengthTest2","emailAddress","messages","isEmpty","push","isEmail","owaspResults","strong","concat","errors","minLength","maxLength","repeating","needLowercase","needUppercase","needNumber","needCharacter","accountId","what","appraised","success","tested","postMessage","passwordsMatch","bcryptHash","hashPassword","encryptPassword","_bcrypt","_crypto","_crypto2","hasher","createHash","update","hashed","digest","passwordhash","saltRounds","hash","toEncrypt","ACCOUNT_ENCRYPT_CURRENT_PEPPER","currentPepperId","pepper","algorithm","cipher","createCipher","crypted","final","rawPassword","Promise","resolve","toDecrypt","decipher","createDecipher","decrypted","candidatePassword","encryptedPasswordHash","candidateHashed","decryptedPass","compare","isValidDisplayName","notEmpty","encryptedPasswordPepperId","setPassword","passwordValue","catch","toProfile","candidate","canActOnBehalfOf","UserValidation","UserValidationDefinition","visitedAt","validation","COOKIE_NAME_SESSION","COOKIE_NAME_HAS_LOGGED_IN","SITE_NAME","SITE_BETA","SITE_PRIMARY1_COLOR","SITE_PRIMARY2_COLOR","SITE_PRIMARY3_COLOR","SITE_ACCENT1_COLOR","SITE_ACCENT2_COLOR","SITE_ACCENT3_COLOR","SITE_TEXT_COLOR","SITE_ALT_TEXT_COLOR","_Apprisal","enumerable","_User","_Recipient","_Authentication","_Post","_Media","_interopRequireWildcard","newObj","prototype","hasOwnProperty","ApprisalController","_routes","_routes2","_controller","routes","Router","getApprisalsEndpoint","addApprisalEndpoint","put","updateApprisalEndpoint","delete","removeApprisalEndpoint","proxyUserId","apprisals","cleanApprisals","map","_req$body","postId","recipients","Array","isArray","recipientInfo","create","post_id","recipient_id","recipientId","all","createdApprisals","dir","errorMessage","apprisalId","params","updatedApprisal","removedItem","_proxyUser","_proxyUser2","signinUser","route","currentUser","onBehalfOfId","UserController","addUserEndpoint","getUserInfoEndpoint","updateUserEndpoint","updatePasswordEndpoint","activeUsertId","newUser","build","createdUser","code","replace","stringify","item","cleanedItem","_req$body2","cleanedUser","_req$body3","newPassword","RecipientController","getRecipientsEndpoint","addRecipientEndpoint","updateRecipientEndpoint","removeRecipientEndpoint","cleanRecipients","newRecipient","createdRecipient","updatedRecipient","itemId","PostController","getPostsEndpoint","getAPostEndpoint","addPostEndpoint","updatePostEndpoint","removePostEndpoint","model","items","cleanedItems","mappedItem","posts","mediaIds","newPost","createdId","createdItem","setMedia","cleanedPost","updatedItem","MediaController","getMediaEndpoint","addMediumEndpoint","updateMediumEndpoint","removeMediumEndpoint","cleanMedia","medium","newItem","createdMedia","mediaId","_dotenv","_requireEnvironmentVariables","_requireEnvironmentVariables2","_redis","_redis2","REDIS_URL","redisClient","createClient"],"mappings":"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","file":"server.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _http = __webpack_require__(1);\n\t\n\tvar _bodyParser = __webpack_require__(2);\n\t\n\tvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tvar _expressSession = __webpack_require__(4);\n\t\n\tvar _expressSession2 = _interopRequireDefault(_expressSession);\n\t\n\tvar _morgan = __webpack_require__(5);\n\t\n\tvar _morgan2 = _interopRequireDefault(_morgan);\n\t\n\tvar _chalk = __webpack_require__(6);\n\t\n\tvar _chalk2 = _interopRequireDefault(_chalk);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _globalConstants = __webpack_require__(27);\n\t\n\tvar _modules = __webpack_require__(28);\n\t\n\t__webpack_require__(47);\n\t\n\tvar _redisConnect = __webpack_require__(50);\n\t\n\tvar _redisConnect2 = _interopRequireDefault(_redisConnect);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Configurations */\n\tvar RedisStore = __webpack_require__(52)(_expressSession2.default);\n\t\n\t/* Routes */\n\t/* Base imports */\n\t\n\t\n\tvar port = process.env.API_SERVER_PORT;\n\tif (!port) {\n\t  port = 3006;\n\t}\n\t\n\tvar app = (0, _express2.default)();\n\t\n\t/* Middleware setup */\n\tapp.use(function (err, req, res, next) {\n\t  if (res.headersSent) next(err);\n\t  res.status(err.status || port).render('500');\n\t});\n\tapp.use(_bodyParser2.default.json());\n\tapp.use(_bodyParser2.default.urlencoded({ extended: true }));\n\tapp.use((0, _expressSession2.default)({\n\t  name: _globalConstants.COOKIE_NAME_SESSION,\n\t  secret: process.env.SESSION_SECRET,\n\t  resave: true,\n\t  saveUninitialized: false,\n\t  store: new RedisStore({ client: _redisConnect2.default })\n\t}));\n\tapp.use(_warrant.validateUserSession);\n\tapp.use((0, _morgan2.default)('combined'));\n\t\n\t/* Routes */\n\t// app.use('/api/v1', [userRoutes, recipientRoutes, authenticationRoutes, postRoutes]);\n\tapp.use('/api/v1', [_modules.userRoutes, _modules.recipientRoutes, _modules.sessionsRoutes, _modules.postRoutes, _modules.mediaRoutes, _modules.apprisalRoutes]);\n\t\n\tapp.get('/', function baseReturn(req, res) {\n\t  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n\t});\n\t\n\tprocess.on('SIGTERM', function () {\n\t  console.log('Closing server.');\n\t  app.close();\n\t});\n\t\n\tapp.on('close', function () {\n\t  console.log('Closing redis.');\n\t  _redisConnect2.default.quit();\n\t});\n\t\n\t/* Start the API Server */\n\tvar server = (0, _http.Server)(app);\n\tserver.listen(port, function reportOnListen(error) {\n\t  if (error) {\n\t    console.log(_chalk2.default.red('API Server ERROR on startup: ' + error));\n\t  } else {\n\t    console.log(_chalk2.default.bold.green('API Server listening on http://localhost:' + port + '.'));\n\t  }\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"body-parser\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express-session\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"morgan\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"chalk\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.requireLogin = exports.authenticateUser = exports.destroyUserSession = exports.createUserSession = exports.validateUserSession = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _globalConstants = __webpack_require__(27);\n\t\n\tvar User = _models.models.User;\n\t\n\t// ideas from https://github.com/rdegges/svcc-auth\n\t\n\t/* eslint-disable no-param-reassign */\n\t\n\t/* Stores user data in the session and sets related cookies\n\t *  - Store the user object as a req.user\n\t *  - Set a session cookie with the user object\n\t *\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t *  @param {Object} user - A user object.\n\t */\n\tvar createUserSession = function createUserSession(req, res, user) {\n\t  var cleanUser = {\n\t    id: user.id,\n\t    displayName: user.displayName,\n\t    email: user.email,\n\t    userType: user.userType,\n\t    validated: user.validated\n\t  };\n\t\n\t  req.session.user = cleanUser;\n\t  req.user = cleanUser;\n\t  res.locals.user = cleanUser;\n\t  res.cookie(_globalConstants.COOKIE_NAME_INDICATE_SESSION, 'y', { httpOnly: false }); // Does the user have a session.\n\t};\n\t\n\t/* Destroy a user session\n\t * Removes the session and related cookies.\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t *  @param {Object} user - A user object.\n\t */\n\t/* eslint-disable no-unused-vars */\n\tvar destroyUserSession = function destroyUserSession(req, res, user) {\n\t  if (req.session) {\n\t    req.session.destroy();\n\t    res.clearCookie(_globalConstants.COOKIE_NAME_INDICATE_SESSION);\n\t  }\n\t};\n\t/* eslint-enable no-unused-vars */\n\t\n\t/**\n\t * A simple authentication middleware for Express.\n\t *\n\t * This middleware will load users from session data, and handle all user\n\t * proxying for convenience.\n\t * TODO: We're hitting the db every session. Store more data in session? Then, how to ban?\n\t */\n\tvar validateUserSession = function validateUserSession(req, res, next) {\n\t  if (req.session && req.session.user) {\n\t    User.findById(req.session.user.id).then(function (user) {\n\t      if (user) {\n\t        if (user.userType === _models.UserType.BANNED) {\n\t          destroyUserSession(req, res, user);\n\t          next();\n\t        }\n\t        createUserSession(req, res, user);\n\t      }\n\t      next();\n\t    });\n\t  } else {\n\t    next();\n\t  }\n\t};\n\t\n\t/* Authenticates a user with email and password.\n\t * Creates a session on valid authentication.\n\t */\n\tvar authenticateUser = function authenticateUser(req, res, body) {\n\t  var email = body.email;\n\t  var password = body.password;\n\t  if (!email || !password) {\n\t    var err = new Error('Email and password required.');\n\t    throw err;\n\t  }\n\t  var foundUser = null;\n\t  return User.find({ where: { email: email } }).then(function checkForUser(theUser) {\n\t    if (theUser) {\n\t      return theUser;\n\t    }\n\t    throw new Error('Could not verify account');\n\t  }).then(function comparePass(theUser) {\n\t    foundUser = theUser;\n\t    return theUser.comparePassword(password);\n\t  }).then(function returnAccount(passwordsMatched) {\n\t    if (!passwordsMatched) {\n\t      throw new Error('Could not verify account');\n\t    }\n\t    createUserSession(req, res, foundUser);\n\t    return foundUser;\n\t  });\n\t};\n\t\n\t/**\n\t * Ensure a user is logged in before allowing them to continue their request.\n\t *\n\t * If a user isn't logged in, they'll be sent a 403.\n\t */\n\tvar requireLogin = function requireLogin() {\n\t  return function areWeAuthenticated(req, res, next) {\n\t    if (req && !req.user) {\n\t      res.statusMessage = 'Requires login.'; // eslint-disable-line no-param-reassign\n\t      res.status(403).end();\n\t    } else {\n\t      next();\n\t    }\n\t  };\n\t};\n\t\n\t/* eslint-enable no-param-reassign */\n\texports.validateUserSession = validateUserSession;\n\texports.createUserSession = createUserSession;\n\texports.destroyUserSession = destroyUserSession;\n\texports.authenticateUser = authenticateUser;\n\texports.requireLogin = requireLogin;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.RecipientStatus = exports.RecipientType = exports.MAX_POST_SEARCH_RETURN_LIMIT = exports.PostStatus = exports.MediaType = exports.UserType = exports.models = undefined;\n\t\n\tvar _sequelize = __webpack_require__(9);\n\t\n\tvar _sequelize2 = _interopRequireDefault(_sequelize);\n\t\n\tvar _chalk = __webpack_require__(6);\n\t\n\tvar _chalk2 = _interopRequireDefault(_chalk);\n\t\n\tvar _AlbumModel = __webpack_require__(10);\n\t\n\tvar _AlbumModel2 = _interopRequireDefault(_AlbumModel);\n\t\n\tvar _ApprisalModel = __webpack_require__(15);\n\t\n\tvar _ApprisalModel2 = _interopRequireDefault(_ApprisalModel);\n\t\n\tvar _MediaModel = __webpack_require__(16);\n\t\n\tvar _MediaModel2 = _interopRequireDefault(_MediaModel);\n\t\n\tvar _PostModel = __webpack_require__(17);\n\t\n\tvar _PostModel2 = _interopRequireDefault(_PostModel);\n\t\n\tvar _RecipientModel = __webpack_require__(18);\n\t\n\tvar _RecipientModel2 = _interopRequireDefault(_RecipientModel);\n\t\n\tvar _UserModel = __webpack_require__(25);\n\t\n\tvar _UserModel2 = _interopRequireDefault(_UserModel);\n\t\n\tvar _UserValidation = __webpack_require__(26);\n\t\n\tvar _UserValidation2 = _interopRequireDefault(_UserValidation);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar allConfigs = {\n\t  development: {\n\t    username: 'mdw',\n\t    password: null,\n\t    database: 'socialnotsocial',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  },\n\t  test: {\n\t    username: 'root',\n\t    password: null,\n\t    database: 'database_test',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  },\n\t  production: {\n\t    username: 'root',\n\t    password: null,\n\t    database: 'database_production',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  }\n\t};\n\t\n\t/* Set up the general process */\n\tvar env = (\"production\") || 'development';\n\tvar config = allConfigs[env];\n\tvar sequelize = null;\n\tif (process.env.DATABASE_URL) {\n\t  sequelize = new _sequelize2.default(process.env.DATABASE_URL);\n\t} else {\n\t  sequelize = new _sequelize2.default(config.database, config.username, config.password, config);\n\t}\n\tvar db = {};\n\t\n\t/* Connect and log in to postgres */\n\tsequelize.authenticate().then(function () {\n\t  console.log('Success: Connection to Postgres established .');\n\t}, function trapError(err) {\n\t  console.log(_chalk2.default.red('FAILURE: Unable to connect to the Postgres database:'), err);\n\t});\n\t\n\t/* Create the models\n\t * TODO: This is a manual update nightmare.\n\t */\n\tvar albumModel = (0, _AlbumModel2.default)(sequelize, _sequelize2.default);\n\tdb[albumModel.name] = albumModel;\n\t\n\tvar apprisalModel = (0, _ApprisalModel2.default)(sequelize, _sequelize2.default);\n\tdb[apprisalModel.name] = apprisalModel;\n\t\n\tvar mediaModel = (0, _MediaModel2.default)(sequelize, _sequelize2.default);\n\tdb[mediaModel.name] = mediaModel;\n\t\n\tvar postModel = (0, _PostModel2.default)(sequelize, _sequelize2.default);\n\tdb[postModel.name] = postModel;\n\t\n\tvar recipientModel = (0, _RecipientModel2.default)(sequelize, _sequelize2.default);\n\tdb[recipientModel.name] = recipientModel;\n\t\n\tvar userModel = (0, _UserModel2.default)(sequelize, _sequelize2.default);\n\tdb[userModel.name] = userModel;\n\t\n\tvar userValidationModel = (0, _UserValidation2.default)(sequelize, _sequelize2.default);\n\tdb[userValidationModel.name] = userValidationModel;\n\t\n\t/* Do associations */\n\tObject.keys(db).forEach(function associateThem(modelName) {\n\t  if ('associate' in db[modelName]) {\n\t    db[modelName].associate(db);\n\t  }\n\t});\n\t\n\t/* Push the models to the database */\n\tsequelize.sync() //   .sync({ force: true }) <= removed as this drops the table\n\t.then(function () {\n\t  console.log('Success: Synced models to database.');\n\t}, function trapSyncError(err) {\n\t  console.log(_chalk2.default.red('FAILURE: An error occurred while creating the table:'), err);\n\t});\n\t\n\tdb.sequelize = sequelize;\n\tdb.Sequelize = _sequelize2.default;\n\t\n\tvar models = db;\n\texports.models = models;\n\texports.UserType = _constants.UserType;\n\texports.MediaType = _constants.MediaType;\n\texports.PostStatus = _constants.PostStatus;\n\texports.MAX_POST_SEARCH_RETURN_LIMIT = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\texports.RecipientType = _constants.RecipientType;\n\texports.RecipientStatus = _constants.RecipientStatus;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"sequelize\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Album = sequelize.define('Album', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(album) {\n\t        if (!album.id) {\n\t          album.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Album.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Album.belongsToMany(models.Media, { through: 'AlbumMedia' });\n\t        Album.belongsToMany(models.Post, { through: 'PostAlbum' });\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Find all albums for a userId\n\t   * @param {string} userId - the userId to search for\n\t   * @param {number} limit - the number to find.\n\t   * @param {number} offset - The number to skip.\n\t   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n\t   */\n\t  Album.findAllForUser = function findAllForUser(userId, options) {\n\t    var limit = 20;\n\t    if (options.limit) {\n\t      limit = options.limit;\n\t    }\n\t    var offset = 0;\n\t    if (options.limit) {\n\t      offset = options.offset;\n\t    }\n\t    var beforeId = null;\n\t    if (options.beforeId) {\n\t      beforeId = options.beforeId;\n\t    }\n\t    var includeTables = [];\n\t    if (options.includeTables) {\n\t      includeTables = options.includeTables;\n\t    }\n\t\n\t    if (!userId) {\n\t      throw new Error('No userId provided');\n\t    }\n\t    var whereClause = {};\n\t\n\t    whereClause.where = { user_id: Number(userId) };\n\t\n\t    if (beforeId && beforeId > 0) {\n\t      whereClause.id = { $lt: beforeId };\n\t    }\n\t\n\t    var limiter = limit;\n\t    if (limiter > _constants.MAX_POST_SEARCH_RETURN_LIMIT) {\n\t      limiter = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\t    }\n\t    whereClause.limit = limiter;\n\t\n\t    if (offset > 0) {\n\t      whereClause.offset = offset;\n\t    }\n\t    whereClause.order = 'id DESC';\n\t    if (includeTables) {\n\t      whereClause.include = includeTables;\n\t    }\n\t    return this.findAll(whereClause);\n\t  };\n\t\n\t  /* Determine total number of albums for account\n\t   * @param {number} - userId\n\t   */\n\t  Album.totalForUser = function countAlbums(userId) {\n\t    return Album.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update an album\n\t   * @param {number} - id: The id of the album\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated album or null if it couldn't be found\n\t   */\n\t  Album.updateAlbum = function updateAlbum(id, userId, updates) {\n\t    return Album.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundAlbum = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundAlbum[key] = updates[key];\n\t      });\n\t      return foundAlbum.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a album\n\t   * @param {number} - id: The id of the album\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted album or null if it couldn't be found\n\t   */\n\t  Album.deleteAlbum = function deleteAlbum(id, userId) {\n\t    return Album.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      // eslint-disable-line consistent-return\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundAlbum = foundItem;\n\t      return foundAlbum.save();\n\t    }).then(function (thisAlbum) {\n\t      // eslint-disable-line arrow-body-style\n\t      return thisAlbum.destroy();\n\t    });\n\t  };\n\t\n\t  return Album;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.passGen = exports.toNumericId = exports.toHumanId = exports.idier = undefined;\n\t\n\tvar _base = __webpack_require__(12);\n\t\n\tvar _base2 = _interopRequireDefault(_base);\n\t\n\tvar _generatePassword = __webpack_require__(13);\n\t\n\tvar _generatePassword2 = _interopRequireDefault(_generatePassword);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* idier: identifier generator. Inspired by twitter's snowflake system\n\t * https://blog.twitter.com/2010/announcing-snowflake\n\t * We use the timestamp converted to seconds + a worker id from the environment +\n\t *   a sequence number (see below) + a single random number just in case...\n\t */\n\tvar idier = function idier() {\n\t  /* The sequence is stored on the global object. The sequence should be between 1-999 to keep\n\t   *   our total id number in the right space to be converted.\n\t   *   Note: There's probably an opportunity to use Redis or similar for the sequence.\n\t   */\n\t  var mySequence = 1;\n\t  var globalSeq = global.idierSequence;\n\t  if (globalSeq && globalSeq < 1000 && globalSeq > 0) {\n\t    mySequence = globalSeq;\n\t    global.idierSequence += 1;\n\t  } else {\n\t    global.idierSequence = mySequence + 1;\n\t  }\n\t\n\t  var workerId = process.env.IDIER_WORKER_ID;\n\t  if (!workerId) {\n\t    workerId = Math.floor(Math.random() * 10);\n\t  }\n\t  var timeStamp = Math.floor(Date.now() / 1000);\n\t  var randomnumber = Math.floor(Math.random() * 10);\n\t  var snowflake = '' + timeStamp + workerId + mySequence + randomnumber;\n\t  var snowflakeInt = parseInt(snowflake, 10);\n\t  return snowflakeInt;\n\t};\n\t\n\t/* toHumanId - transform a number into a base58 encoded string for use in human visible tokens.\n\t   Uses https://www.npmjs.com/package/base58\n\t  */\n\tvar toHumanId = function toHumanId(idNumber) {\n\t  var encoded = _base2.default.encode(idNumber);\n\t  return encoded;\n\t};\n\t\n\t/* toNumbericId - transform a humanId (base32 encoded) string to a number to use by the computer.\n\t  */\n\tvar toNumericId = function toNumericId(idString) {\n\t  var decoded = _base2.default.decode(idString);\n\t  return decoded;\n\t};\n\t\n\t/* Password generator\n\t * Creates a 12 digit password with letters and numbers.\n\t * @param {number} length - lenght of password\n\t * @param {bool} numbers - inlcude numbers\n\t * @param {string} exclude - characters to exclude\n\t*/\n\tvar passGen = function passGen() {\n\t  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n\t  var numbers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t  var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\t\n\t  var password = _generatePassword2.default.generate({\n\t    length: length,\n\t    numbers: numbers,\n\t    exclude: exclude,\n\t    strict: true\n\t  });\n\t  return password;\n\t};\n\t\n\texports.idier = idier;\n\texports.toHumanId = toHumanId;\n\texports.toNumericId = toNumericId;\n\texports.passGen = passGen;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"base58\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"generate-password\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* A type of user */\n\tvar UserType = {\n\t  NORMAL: 'ut_normal',\n\t  ADMIN: 'ut_admin',\n\t  CUSTSERVICE: 'ut_custservice',\n\t  BANNED: 'ut_banned',\n\t  DEMO: 'ut_demo'\n\t};\n\t\n\t/* The type of media */\n\tvar MediaType = {\n\t  VIDEO: 'mt_video',\n\t  PHOTO: 'mt_photo'\n\t};\n\t\n\t/* Enum for the post.status field */\n\tvar PostStatus = {\n\t  DRAFT: 'ps_draft',\n\t  POSTED: 'ps_posted',\n\t  REMOVED: 'ps_removed'\n\t};\n\t\n\t/* The maximum we can return from a search */\n\tvar MAX_POST_SEARCH_RETURN_LIMIT = 100;\n\t\n\t/* Enum for the Recipient.type field */\n\tvar RecipientType = {\n\t  EMAIL: 'rt_email',\n\t  TEXT: 'rt_text',\n\t  POST: 'rt_post',\n\t  FACEBOOK: 'rt_facebook'\n\t};\n\t\n\t/* Enum for the Recipient.status field */\n\tvar RecipientStatus = {\n\t  VALIDATING: 'rs_validating',\n\t  ACTIVE: 'rs_active',\n\t  REMOVED: 'rs_removed',\n\t  BOUNCING: 'rs_bounding',\n\t  UNSUBSCRIBED: 'rs_unsubscribed'\n\t};\n\t\n\texports.UserType = UserType;\n\texports.MediaType = MediaType;\n\texports.PostStatus = PostStatus;\n\texports.MAX_POST_SEARCH_RETURN_LIMIT = MAX_POST_SEARCH_RETURN_LIMIT;\n\texports.RecipientType = RecipientType;\n\texports.RecipientStatus = RecipientStatus;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\t/* An apprisal is an actual notification sent to a user or system of a new post.\n\t * Has an association with the Post object and the recipient that it will be sent to.\n\t * This would be called a notification in another system, but we are reserving that for future use.\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Apprisal = sequelize.define('Apprisal', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    deliveredAt: { // The date the item was either sent or pushed to service\n\t      type: DataTypes.DATE,\n\t      field: 'delivered_at'\n\t    },\n\t    firstOpenedAt: { // This only applies to emails with trackers. When the email was viewed.\n\t      type: DataTypes.DATE,\n\t      field: 'first_opened_at'\n\t    },\n\t    firstViewedAt: { // When this item was viewed on site.\n\t      type: DataTypes.DATE,\n\t      field: 'first_viewed_at'\n\t    },\n\t    canRespond: { // Can the recipient of this apprisal respond? Overrides canRespond on recipient\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: true,\n\t      field: 'can_respond'\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(apprisal) {\n\t        if (!apprisal.id) {\n\t          apprisal.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Apprisal.belongsTo(models.Post, {\n\t          foreignKey: {\n\t            field: 'post_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Apprisal.belongsTo(models.Recipient, {\n\t          foreignKey: {\n\t            field: 'recipient_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Apprisal.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Find all apprisals for a userId\n\t  * @param {string} userId - the userId to search for\n\t  * @param {number} limit - the number to find.\n\t  * @param {number} offset - The number to skip.\n\t  * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n\t  */\n\t  Apprisal.findAllForUser = function findAllForUser(userId) {\n\t    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n\t    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t    var beforeId = arguments[3];\n\t\n\t    if (!userId) {\n\t      throw new Error('No userId provided');\n\t    }\n\t\n\t    var userWhere = '\"user_id\": \"' + userId + '\"';\n\t\n\t    var beforeIdWhere = '';\n\t    if (beforeId && beforeId > 0) {\n\t      beforeIdWhere = ', id : {$lt: ' + beforeId + '}';\n\t    }\n\t\n\t    var limiter = limit;\n\t    if (limiter > _constants.MAX_POST_SEARCH_RETURN_LIMIT) {\n\t      limiter = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\t    }\n\t    var limitClause = ', \"limit\": \"' + limiter + '\", ';\n\t    var offsetClause = '';\n\t    if (offset > 0) {\n\t      offsetClause = ', \"offset\": \"' + offset + '\", ';\n\t    }\n\t    var orderClause = '\"order\": \"id DESC\"';\n\t    var queryJSON = '{ \"where\": { ' + userWhere + beforeIdWhere + ' }' + limitClause + offsetClause + ' ' + orderClause + '}';\n\t    var query = JSON.parse(queryJSON);\n\t    return this.findAll(query);\n\t  };\n\t\n\t  /* Determine total number of apprisals for user\n\t   * @param {number} - userId\n\t   */\n\t  Apprisal.totalForUser = function countAll(userId) {\n\t    return Apprisal.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update an Apprisal\n\t   * @param {number} - id: The id of the item\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated apprisal or null if it couldn't be found\n\t   */\n\t  Apprisal.updateApprisal = function updateApprisal(id, userId, updates) {\n\t    return Apprisal.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundApprisal = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundApprisal[key] = updates[key];\n\t      });\n\t      return foundApprisal.save();\n\t    });\n\t  };\n\t\n\t  /* Delete an Apprisal\n\t   * @param {number} - id: The id of the item\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted apprisal or null if it couldn't be found\n\t   */\n\t  Apprisal.deleteApprisal = function deleteApprisal(id, userId) {\n\t    return Apprisal.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      // eslint-disable-line consistent-return\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundApprisal = foundItem;\n\t      return foundApprisal.save();\n\t    }).then(function (thisApprisal) {\n\t      // eslint-disable-line arrow-body-style\n\t      return thisApprisal.destroy();\n\t    });\n\t  };\n\t\n\t  return Apprisal;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\t/* A piece of media that is uploaded.\n\t * Currently supports MediaType.\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Media = sequelize.define('Media', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    url: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isUrl: true\n\t      }\n\t    },\n\t    type: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.MediaType.PHOTO, _constants.MediaType.VIDEO],\n\t      defaultValue: _constants.MediaType.PHOTO\n\t    },\n\t    width: {\n\t      type: DataTypes.INTEGER\n\t    },\n\t    height: {\n\t      type: DataTypes.INTEGER\n\t    },\n\t    size: {\n\t      type: DataTypes.INTEGER\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(media) {\n\t        if (!media.id) {\n\t          media.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Media.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Media.belongsToMany(models.Album, { through: 'AlbumMedia' });\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Determine total number of media for account\n\t  * @param {number} - userId\n\t  */\n\t  Media.totalForUser = function countAll(userId) {\n\t    return Media.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update a Media\n\t   * @param {number} - id: The id of the post\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated post or null if it couldn't be found\n\t   */\n\t  Media.updateMedia = function updateMedia(id, userId, updates) {\n\t    return Media.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundMedia = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundMedia[key] = updates[key];\n\t      });\n\t      return foundMedia.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a Media\n\t   * @param {number} - id: The id\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted media or null if it couldn't be found\n\t   */\n\t  Media.deleteMedia = function deleteMedia(id, userId) {\n\t    return Media.findOne({ where: { id: id, user_id: userId } }).then(function (thisMedia) {\n\t      // eslint-disable-line arrow-body-style\n\t      if (thisMedia) {\n\t        return thisMedia.destroy();\n\t      }\n\t      return null;\n\t    });\n\t  };\n\t  return Media;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\t/* A post is the atomic messages of the user\n\t * https://developers.facebook.com/docs/graph-api/reference/v2.8/post\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Post = sequelize.define('Post', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    status: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.PostStatus.DRAFT, _constants.PostStatus.POSTED, _constants.PostStatus.REMOVED],\n\t      defaultValue: _constants.PostStatus.POSTED\n\t    },\n\t    message: {\n\t      type: DataTypes.STRING(5000),\n\t      allowNull: false\n\t    },\n\t    edited: {\n\t      type: DataTypes.BOOLEAN\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(post) {\n\t        if (!post.id) {\n\t          post.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Post.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Post.belongsToMany(models.Album, { through: 'PostAlbum' });\n\t        Post.hasMany(models.Apprisal);\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Find all posts for a userId\n\t   * @param {string} userId - the userId to search for\n\t   * @param {number} limit - the number to find.\n\t   * @param {number} offset - The number to skip.\n\t   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n\t   */\n\t  Post.findAllForUser = function findAllForUser(userId, options) {\n\t    var limit = 20;\n\t    if (options.limit) {\n\t      limit = options.limit;\n\t    }\n\t    var offset = 0;\n\t    if (options.limit) {\n\t      offset = options.offset;\n\t    }\n\t    var beforeId = null;\n\t    if (options.beforeId) {\n\t      beforeId = options.beforeId;\n\t    }\n\t    var includeTables = [];\n\t    if (options.includeTables) {\n\t      includeTables = options.includeTables;\n\t    }\n\t\n\t    if (!userId) {\n\t      throw new Error('No userId provided');\n\t    }\n\t    var whereClause = {};\n\t\n\t    whereClause.where = { user_id: Number(userId) };\n\t\n\t    if (beforeId && beforeId > 0) {\n\t      whereClause.id = { $lt: beforeId };\n\t    }\n\t\n\t    var limiter = limit;\n\t    if (limiter > _constants.MAX_POST_SEARCH_RETURN_LIMIT) {\n\t      limiter = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\t    }\n\t    whereClause.limit = limiter;\n\t\n\t    if (offset > 0) {\n\t      whereClause.offset = offset;\n\t    }\n\t    whereClause.order = 'id DESC';\n\t    if (includeTables) {\n\t      whereClause.include = includeTables;\n\t    }\n\t    return this.findAll(whereClause);\n\t  };\n\t\n\t  /* Determine total number of posts for account\n\t   * @param {number} - userId\n\t   */\n\t  Post.totalForUser = function countPosts(userId) {\n\t    return Post.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update a post\n\t   * @param {number} - id: The id of the post\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated post or null if it couldn't be found\n\t   */\n\t  Post.updatePost = function updatePost(id, userId, updates) {\n\t    return Post.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundPost = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundPost[key] = updates[key];\n\t      });\n\t      return foundPost.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a post\n\t   * @param {number} - id: The id of the post\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted post or null if it couldn't be found\n\t   */\n\t  Post.deletePost = function deletePost(id, userId) {\n\t    return Post.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      // eslint-disable-line consistent-return\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundPost = foundItem;\n\t      foundPost.status = _constants.PostStatus.REMOVED;\n\t      return foundPost.save();\n\t    }).then(function (thisPost) {\n\t      // eslint-disable-line arrow-body-style\n\t      return thisPost.destroy();\n\t    });\n\t  };\n\t\n\t  return Post;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _appraise = __webpack_require__(19);\n\t\n\tvar _passwordEncryption = __webpack_require__(22);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\t/* A recipient is a person or system where posts will be sent.\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Recipient = sequelize.define('Recipient', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    type: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.RecipientType.EMAIL, _constants.RecipientType.TEXT, _constants.RecipientType.POST, _constants.RecipientType.FACEBOOK],\n\t      defaultValue: _constants.RecipientType.EMAIL\n\t    },\n\t    status: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.RecipientStatus.ACTIVE, _constants.RecipientStatus.VALIDATING, _constants.RecipientStatus.REMOVED, _constants.RecipientStatus.BOUNCING, _constants.RecipientStatus.UNSUBSCRIBED],\n\t      defaultValue: _constants.RecipientStatus.ACTIVE\n\t    },\n\t    displayName: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      field: 'display_name'\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidEmail: function validateEmail(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseEmail)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      }\n\t    },\n\t    // Each recipient gets an access token. Combined with Apprisal.id, makes for the link\n\t    // Advantage: if the token is stolen, can be recomputed and renders all apprisals with this\n\t    //   token invalid. Encrypted because if db hacked, could be used to see all data. (issue?)\n\t    accessTokenEncrypted: {\n\t      type: DataTypes.STRING,\n\t      field: 'access_token_hash',\n\t      allowNull: false\n\t    },\n\t    // Pepper for the AES string used in the accessToken Encryption.\n\t    accessTokenPepper: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      field: 'access_token_pepper'\n\t    },\n\t    // Can a user respond? This can be overridden by Apprisals\n\t    canRespond: {\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: true,\n\t      field: 'can_respond'\n\t    },\n\t    validatedAt: {\n\t      type: DataTypes.DATE,\n\t      field: 'validated_at'\n\t    },\n\t    validated: {\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: false\n\t    },\n\t    unsubscribedAt: {\n\t      type: DataTypes.DATE,\n\t      field: 'unsubscribed_at'\n\t    },\n\t    unsubscribedReason: {\n\t      type: DataTypes.STRING,\n\t      field: 'unsubscribed_reason'\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    indexes: [{\n\t      unique: true,\n\t      fields: ['user_id', 'email']\n\t    }],\n\t    hooks: {\n\t      beforeValidate: function addId(recipient) {\n\t        if (!recipient.id) {\n\t          recipient.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t        if (!recipient.accessToken) {\n\t          var token = (0, _idier.passGen)(15, true, '.');\n\t          console.log('Recipient token: ' + token);\n\t          recipient.setAccessToken(token); // eslint-disable-line no-param-reassign\n\t        }\n\t        if (recipient.type === _constants.RecipientType.FACEBOOK) {\n\t          recipient.canRespond = false; // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    instanceMethods: {\n\t      setAccessToken: function setAccessToken(token) {\n\t        var self = this;\n\t        if (!token || token.length < 15) {\n\t          throw new Error('Invalid token passed to recipient. This is an internal error.');\n\t        }\n\t        var encryptedValue = (0, _passwordEncryption.aesHash)(token, process.env.TOKEN_ENCRYPT_CURRENT_PEPPER);\n\t        self.accessTokenEncrypted = encryptedValue.encrypted;\n\t        self.accessTokenPepper = encryptedValue.pepperId;\n\t      },\n\t      getAccessToken: function getAccessToken() {\n\t        var self = this;\n\t        return (0, _passwordEncryption.deAesHash)(self.accessTokenEncrypted, self.accessTokenPepper);\n\t      },\n\t      toJSON: function stripValues() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.accessTokenEncrypted;\n\t        delete values.accessTokenPepper;\n\t        delete values.deletedAt;\n\t        return values;\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Recipient.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Recipient.hasMany(models.Apprisal);\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Find all recipients for a userId\n\t   * @param {string} userId - the userId to search for\n\t   * @param {number} limit - the number to find.\n\t   * @param {number} offset - The number to skip.\n\t   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n\t   */\n\t  Recipient.findAllForUser = function findAllForUser(userId) {\n\t    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n\t    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t    var beforeId = arguments[3];\n\t\n\t    if (!userId) {\n\t      throw new Error('No userId provided');\n\t    }\n\t\n\t    var userWhere = '\"user_id\": \"' + userId + '\"';\n\t\n\t    var beforeIdWhere = '';\n\t    if (beforeId && beforeId > 0) {\n\t      beforeIdWhere = ', id : {$lt: ' + beforeId + '}';\n\t    }\n\t\n\t    var limiter = limit;\n\t    if (limiter > _constants.MAX_POST_SEARCH_RETURN_LIMIT) {\n\t      limiter = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\t    }\n\t    var limitClause = ', \"limit\": \"' + limiter + '\", ';\n\t    var offsetClause = '';\n\t    if (offset > 0) {\n\t      offsetClause = ', \"offset\": \"' + offset + '\", ';\n\t    }\n\t    var orderClause = '\"order\": \"id DESC\"';\n\t    var queryJSON = '{ \"where\": { ' + userWhere + beforeIdWhere + ' }' + limitClause + offsetClause + ' ' + orderClause + '}';\n\t    var query = JSON.parse(queryJSON);\n\t    return this.findAll(query);\n\t  };\n\t\n\t  /* Determine total number of recipients for user\n\t   * @param {number} - userId\n\t   */\n\t  Recipient.totalForUser = function countAll(userId) {\n\t    return Recipient.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update a Recipient\n\t   * @param {number} - id: The id of the item\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated recipient or null if it couldn't be found\n\t   */\n\t  Recipient.updateRecipient = function updateRecipient(id, userId, updates) {\n\t    return Recipient.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundRecipient = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundRecipient[key] = updates[key];\n\t      });\n\t      return foundRecipient.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a Recipient\n\t   * @param {number} - id: The id of the item\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted recipient or null if it couldn't be found\n\t   */\n\t  Recipient.deleteRecipient = function deleteRecipient(id, userId) {\n\t    return Recipient.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      // eslint-disable-line consistent-return\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundRecipient = foundItem;\n\t      foundRecipient.status = _constants.RecipientStatus.REMOVED;\n\t      return foundRecipient.save();\n\t    }).then(function (thisRecipient) {\n\t      // eslint-disable-line arrow-body-style\n\t      return thisRecipient.destroy();\n\t    });\n\t  };\n\t\n\t  return Recipient;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.appraisePostMessage = exports.appraiseAccountId = exports.appraisePasswordErrors = exports.appraisePasswordExtra = exports.appraisePassword = exports.appraiseDisplayName = exports.appraiseEmail = exports.appraiseThese = undefined;\n\t\n\tvar _validator = __webpack_require__(20);\n\t\n\tvar _owaspPasswordStrengthTest = __webpack_require__(21);\n\t\n\tvar _owaspPasswordStrengthTest2 = _interopRequireDefault(_owaspPasswordStrengthTest);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Is the email valid? Uses the validator library to test.\n\t */\n\tvar appraiseEmail = function appraiseEmail(emailAddress) {\n\t  var messages = [];\n\t  if (!emailAddress || (0, _validator.isEmpty)(emailAddress)) {\n\t    messages.push('Email address is required.');\n\t  }\n\t  if (emailAddress && !(0, _validator.isEmpty)(emailAddress) && !(0, _validator.isEmail)(emailAddress)) {\n\t    messages.push('Email address does not appear to be valid.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Test for the validity of the displayName.\n\t *  Currently only checks if it's empty.\n\t */\n\tvar appraiseDisplayName = function appraiseDisplayName(displayName) {\n\t  var messages = [];\n\t  if (!displayName || (0, _validator.isEmpty)(displayName)) {\n\t    messages.push('Display name is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Tests a password.\n\t * Must be valid and pass the owasp validation tests.\n\t */\n\tvar appraisePassword = function appraisePassword(password) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(password)) {\n\t    messages.push('Password is required.');\n\t  } else {\n\t    var owaspResults = _owaspPasswordStrengthTest2.default.test(password);\n\t    if (!owaspResults.strong) {\n\t      messages = messages.concat(owaspResults.errors);\n\t    }\n\t  }\n\t  return messages;\n\t};\n\t\n\tvar appraisePasswordErrors = {\n\t  minLength: 0,\n\t  maxLength: 1,\n\t  repeating: 2,\n\t  needLowercase: 3,\n\t  needUppercase: 4,\n\t  needNumber: 5,\n\t  needCharacter: 6\n\t};\n\t\n\t/* A wrapper for awasp tests that returns this\n\t * {\n\t *   errors              : [],\n\t *   failedTests         : [],\n\t *   requiredTestErrors  : [],\n\t *   optionalTestErrors  : [],\n\t *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n\t *   isPassphrase        : false,\n\t *   strong              : true,\n\t *   optionalTestsPassed : 4\n\t * }\n\t */\n\tvar appraisePasswordExtra = function appraisePasswordExtra(password) {\n\t  return _owaspPasswordStrengthTest2.default.test(password);\n\t};\n\t\n\t/* Tests for the presense of an accountID.\n\t *  Only checks if it's empty.\n\t *  TODO: Check if the account actually exists.\n\t */\n\tvar appraiseAccountId = function appraiseAccountId(accountId) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(accountId)) {\n\t    messages.push('AccountId is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Validates multiple options. Pass in an object with one of the following:\n\t * email: {string} validates an email (or empty}\n\t * displayName; {string} checks for empty\n\t * password: {string} validates a password\n\t * accountId: {string} validates the accountId\n\t * @returns: an object (see validator object below)\n\t */\n\tvar appraiseThese = function appraiseThese(what) {\n\t  var appraised = {\n\t    success: true, // Did all tests pass\n\t    tested: [], // Which tests where done? Check this to make sure things were passed in correctly.\n\t    errors: {} };\n\t  if ('email' in what) {\n\t    appraised.tested.push('email');\n\t    var messages = appraiseEmail(what.email);\n\t    if (messages && messages.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.email = messages;\n\t    }\n\t  }\n\t  if ('password' in what) {\n\t    appraised.tested.push('password');\n\t    var _messages = appraisePassword(what.password);\n\t    if (_messages && _messages.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.password = _messages;\n\t    }\n\t  }\n\t  if ('displayName' in what) {\n\t    appraised.tested.push('displayName');\n\t    var _messages2 = appraiseDisplayName(what.displayName);\n\t    if (_messages2 && _messages2.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.displayName = _messages2;\n\t    }\n\t  }\n\t  if ('accountId' in what) {\n\t    appraised.tested.push('accountId');\n\t    var _messages3 = appraiseAccountId(what.accountId);\n\t    if (_messages3 && _messages3.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.accountId = _messages3;\n\t    }\n\t  }\n\t  return appraised;\n\t};\n\t\n\t/* Tests for the presense of a post message.\n\t *  Only checks if it's empty.\n\t *  Here for future functionality.\n\t */\n\tvar appraisePostMessage = function appraisePostMessage(postMessage) {\n\t  var messages = [];\n\t  if (!postMessage || (0, _validator.isEmpty)(postMessage)) {\n\t    messages.push('A message is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\texports.appraiseThese = appraiseThese;\n\texports.appraiseEmail = appraiseEmail;\n\texports.appraiseDisplayName = appraiseDisplayName;\n\texports.appraisePassword = appraisePassword;\n\texports.appraisePasswordExtra = appraisePasswordExtra;\n\texports.appraisePasswordErrors = appraisePasswordErrors;\n\texports.appraiseAccountId = appraiseAccountId;\n\texports.appraisePostMessage = appraisePostMessage;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"validator\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"owasp-password-strength-test\");\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.passwordsMatch = exports.aesHash = exports.bcryptHash = exports.hashPassword = exports.deAesHash = exports.encryptPassword = undefined;\n\t\n\tvar _bcrypt = __webpack_require__(23);\n\t\n\tvar _crypto = __webpack_require__(24);\n\t\n\tvar _crypto2 = _interopRequireDefault(_crypto);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Hashes the password into a SHA512 hex hash */\n\tvar hashPassword = function hashPassword(password) {\n\t  var hasher = _crypto2.default.createHash('sha512');\n\t  hasher.update(password);\n\t  var hashed = hasher.digest('hex');\n\t  return hashed;\n\t};\n\t\n\t/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n\t * Salt is returned as part of the hash and thus saved.\n\t * Note that this version of bcrypt only takes the first 72 characters.\n\t  */\n\tvar bcryptHash = function bcryptHash(passwordhash) {\n\t  var saltRounds = 10;\n\t  return (0, _bcrypt.hash)(passwordhash, saltRounds);\n\t};\n\t\n\t/* Encrypts the input using aes256 using a pepper stored\n\t *   in the environment. This is what should be finally saved.\n\t */\n\tvar aesHash = function aesHash(toEncrypt) {\n\t  var pepperId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER;\n\t\n\t  var currentPepperId = pepperId;\n\t  if (!currentPepperId) {\n\t    throw new Error('Could not encrypt item - no pepper information available');\n\t  }\n\t  var pepper = process.env[currentPepperId];\n\t  if (!pepper) {\n\t    throw new Error('Could not encrypt item - no pepper available');\n\t  }\n\t  var algorithm = 'aes-256-ctr';\n\t  var cipher = _crypto2.default.createCipher(algorithm, pepper);\n\t  var crypted = cipher.update(toEncrypt, 'utf8', 'hex');\n\t  crypted += cipher.final('hex');\n\t  return { encrypted: crypted, pepperId: currentPepperId };\n\t};\n\t\n\t/* Encrypting a password.\n\t   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n\t   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n\t*/\n\tvar encryptPassword = function encryptPassword(rawPassword) {\n\t  return Promise.resolve(rawPassword).then(hashPassword).then(bcryptHash).then(aesHash);\n\t};\n\t\n\t/* Decrypts an encrypted value using aes256 using a pepper stored\n\t *   in the environment.\n\t */\n\tvar deAesHash = function deAesHash(toDecrypt, pepperId) {\n\t  var pepper = process.env[pepperId];\n\t  if (!pepper) {\n\t    return new Error('Pepper not found.');\n\t  }\n\t  var algorithm = 'aes-256-ctr';\n\t  var decipher = _crypto2.default.createDecipher(algorithm, pepper);\n\t  var decrypted = decipher.update(toDecrypt, 'hex', 'utf8');\n\t  decrypted += decipher.final('utf8');\n\t  return decrypted;\n\t};\n\t\n\t/* Compare passwords.\n\t * Because we are using hashing and encrypting, we have to do that before we compare.\n\t */\n\tvar passwordsMatch = function passwordsMatch(candidatePassword, encryptedPasswordHash, pepperId) {\n\t  // compare the submitted password to encrypted password in database.\n\t  var candidateHashed = hashPassword(candidatePassword);\n\t  var decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n\t  return (0, _bcrypt.compare)(candidateHashed, decryptedPass);\n\t};\n\t\n\texports.encryptPassword = encryptPassword;\n\texports.deAesHash = deAesHash;\n\texports.hashPassword = hashPassword;\n\texports.bcryptHash = bcryptHash;\n\texports.aesHash = aesHash;\n\texports.passwordsMatch = passwordsMatch;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"bcrypt\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"crypto\");\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _passwordEncryption = __webpack_require__(22);\n\t\n\tvar _appraise = __webpack_require__(19);\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(14);\n\t\n\t/* A user is the core part of the system */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var User = sequelize.define('User', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    userType: {\n\t      field: 'user_type',\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.UserType.NORMAL, _constants.UserType.ADMIN, _constants.UserType.CUSTSERVICE, _constants.UserType.BANNED, _constants.UserType.DEMO],\n\t      defaultValue: _constants.UserType.NORMAL,\n\t      allowNull: false\n\t    },\n\t    displayName: {\n\t      field: 'display_name',\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidDisplayName: function validateDisplayName(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseDisplayName)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      }\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidEmail: function validateEmail(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseEmail)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      },\n\t      unique: true\n\t    },\n\t    encryptedPasswordHash: {\n\t      field: 'encrypted_password_hash',\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        notEmpty: true\n\t      }\n\t    },\n\t    encryptedPasswordPepperId: {\n\t      field: 'encrypted_password_pepperId',\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        notEmpty: true\n\t      }\n\t    },\n\t    validatedAt: {\n\t      type: DataTypes.DATE,\n\t      field: 'validated_at'\n\t    },\n\t    validated: {\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: false\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    hooks: {\n\t      beforeValidate: function addId(user) {\n\t        if (!user.id) {\n\t          user.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    instanceMethods: {\n\t      setPassword: function setPassword(password) {\n\t        var self = this;\n\t        return Promise.resolve((0, _appraise.appraisePassword)(password)).then(function checkAppraisal(appraisalMessages) {\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(', '));\n\t          }\n\t          return password;\n\t        }).then(function runHashing(passwordValue) {\n\t          return (0, _passwordEncryption.encryptPassword)(passwordValue);\n\t        }).then(function (encryptedValue) {\n\t          self.encryptedPasswordHash = encryptedValue.encrypted;\n\t          self.encryptedPasswordPepperId = encryptedValue.pepperId;\n\t        }).catch(function (err) {\n\t          throw err;\n\t        });\n\t      },\n\t      toJSON: function stripValues() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.encryptedPasswordHash;\n\t        delete values.encryptedPasswordPepperId;\n\t        delete values.deletedAt;\n\t        return values;\n\t      },\n\t      // TODO: We really need a profile table but this works for now.\n\t      toProfile: function stripForProfile() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.encryptedPasswordHash;\n\t        delete values.encryptedPasswordPepperId;\n\t        delete values.email;\n\t        delete values.deletedAt;\n\t        return values;\n\t      },\n\t      comparePassword: function comparePass(candidate) {\n\t        return (0, _passwordEncryption.passwordsMatch)(candidate, this.encryptedPasswordHash, this.encryptedPasswordPepperId);\n\t      },\n\t      canActOnBehalfOf: function behalfOf(accountId) {\n\t        // eslint-disable-line no-unused-vars\n\t        if (this.userType === _constants.UserType.ADMIN || this.userType === _constants.UserType.CUSTSERVICE) {\n\t          return true;\n\t        }\n\t        return false;\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        User.hasMany(models.Post);\n\t        User.hasMany(models.Recipient);\n\t        User.hasMany(models.Media);\n\t        User.hasMany(models.Apprisal);\n\t        User.hasMany(models.UserValidation);\n\t      }\n\t    }\n\t  });\n\t  return User;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\t// eslint-disable-line no-unused-vars\n\t\n\t/* A validation is a sent notification sent to a user or system of a new post.\n\t * Has an association with the Post object and the recipient that it will be sent to.\n\t * This would be called a notification in another system, but we are reserving that for future use.\n\t */\n\tvar UserValidationDefinition = function UserValidationDefinition(sequelize, DataTypes) {\n\t  var UserValidation = sequelize.define('UserValidation', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false\n\t    },\n\t    deliveredAt: { // The date the item was either sent or pushed to service\n\t      type: DataTypes.DATE,\n\t      field: 'delivered_at'\n\t    },\n\t    visitedAt: { // The date the item was visited for the first time\n\t      type: DataTypes.DATE,\n\t      field: 'visited_at'\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(validation) {\n\t        if (!validation.id) {\n\t          validation.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        UserValidation.belongsTo(models.User);\n\t      }\n\t    }\n\t  });\n\t  return UserValidation;\n\t};\n\t\n\texports.default = UserValidationDefinition;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar COOKIE_NAME_SESSION = exports.COOKIE_NAME_SESSION = 'snss';\n\tvar COOKIE_NAME_INDICATE_SESSION = exports.COOKIE_NAME_INDICATE_SESSION = 'snssl';\n\tvar COOKIE_NAME_HAS_LOGGED_IN = exports.COOKIE_NAME_HAS_LOGGED_IN = 'snsslih';\n\tvar SITE_NAME = exports.SITE_NAME = 'Social, not Social';\n\tvar SITE_BETA = exports.SITE_BETA = 'Beta';\n\tvar SITE_PRIMARY1_COLOR = exports.SITE_PRIMARY1_COLOR = '#459691';\n\tvar SITE_PRIMARY2_COLOR = exports.SITE_PRIMARY2_COLOR = '#47ad8a';\n\tvar SITE_PRIMARY3_COLOR = exports.SITE_PRIMARY3_COLOR = '#grey400';\n\tvar SITE_ACCENT1_COLOR = exports.SITE_ACCENT1_COLOR = '#c94f49';\n\tvar SITE_ACCENT2_COLOR = exports.SITE_ACCENT2_COLOR = 'grey100';\n\tvar SITE_ACCENT3_COLOR = exports.SITE_ACCENT3_COLOR = 'grey500';\n\tvar SITE_TEXT_COLOR = exports.SITE_TEXT_COLOR = 'darkBlack';\n\tvar SITE_ALT_TEXT_COLOR = exports.SITE_ALT_TEXT_COLOR = 'darkBlack';\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Apprisal = __webpack_require__(29);\n\t\n\tObject.keys(_Apprisal).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Apprisal[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _User = __webpack_require__(35);\n\t\n\tObject.keys(_User).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _User[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Recipient = __webpack_require__(38);\n\t\n\tObject.keys(_Recipient).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Recipient[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Authentication = __webpack_require__(32);\n\t\n\tObject.keys(_Authentication).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Authentication[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Post = __webpack_require__(41);\n\t\n\tObject.keys(_Post).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Post[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Media = __webpack_require__(44);\n\t\n\tObject.keys(_Media).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Media[key];\n\t    }\n\t  });\n\t});\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ApprisalController = exports.apprisalRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(30);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(31);\n\t\n\tvar ApprisalController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.apprisalRoutes = _routes2.default;\n\texports.ApprisalController = ApprisalController;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(31);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/apprisals', (0, _warrant.requireLogin)(), _controller.getApprisalsEndpoint);\n\troutes.post('/apprisals', (0, _warrant.requireLogin)(), _controller.addApprisalEndpoint);\n\troutes.put('/apprisals/:recipientId', (0, _warrant.requireLogin)(), _controller.updateApprisalEndpoint);\n\troutes.delete('/apprisals/:recipientId', (0, _warrant.requireLogin)(), _controller.removeApprisalEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removeApprisalEndpoint = exports.updateApprisalEndpoint = exports.addApprisalEndpoint = exports.getApprisalsEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(32);\n\t\n\tvar Apprisal = _models.models.Apprisal;\n\t\n\t/* Get all of the apprisals for the userId.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the search parameters.\n\t */\n\tvar getApprisalsEndpoint = function getApprisalsEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Apprisal.findAllForUser(userId).then(function (apprisals) {\n\t    var cleanApprisals = apprisals.map(function jsonify(apprisal) {\n\t      return apprisal.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      apprisals: cleanApprisals\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* -------------------------------------------------------\n\t * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t * WARNING\n\t * TODO: This is pretty insecure.\n\t * 1. There is no test to make sure the apprised items (recipient, post) are owned by\n\t *     the userId adding the apprisal. There's probably a DB test/constraint that could be added.\n\t * 2. There's no abuse, speed prevention here. Probably should be. While we should allow someone to\n\t *    send multiple apprisals to recipients, there should be \"some\" time differential between them.\n\t *    Also, prevent DDOS through this. Since this triggers the email, this is the place to look.\n\t *\n\t * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t * -------------------------------------------------------\n\t*/\n\t\n\t/* Adds a set of apprisals to the Apprisals database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} postId - the post to apprise\n\t *   @param {array} recipients - array of objects {recipientId, canRespond}\n\t *   @param {string} recipientId - the identifier for the recipient.\n\t *   @param {bool} canRespond - Overrides the default for the recipient\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar addApprisalEndpoint = function addApprisalEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var _req$body = req.body,\n\t      postId = _req$body.postId,\n\t      recipients = _req$body.recipients;\n\t\n\t  if (!(recipients && Array.isArray(recipients) && recipients.length > 0)) {\n\t    res.statusMessage = 'Could not process body.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var apprisals = [];\n\t  recipients.forEach(function newApprisal(recipientInfo) {\n\t    var canRespond = true;\n\t    if (typeof recipientInfo.canRespond !== 'undefined') {\n\t      canRespond = recipientInfo.canRespond;\n\t    }\n\t    apprisals.push(new Promise(function (resolve) {\n\t      Apprisal.create({\n\t        post_id: postId,\n\t        recipient_id: recipientInfo.recipientId,\n\t        canRespond: canRespond,\n\t        user_id: userId\n\t      }).then(function (apprisal) {\n\t        return resolve(apprisal);\n\t      });\n\t    }));\n\t  });\n\t  Promise.all(apprisals).then(function (createdApprisals) {\n\t    var cleanApprisals = createdApprisals.map(function jsonify(apprisal) {\n\t      return apprisal.toJSON();\n\t    });\n\t    console.log('What we created. Length: ' + createdApprisals.length);\n\t    console.dir(createdApprisals);\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created apprisal',\n\t      apprisal: cleanApprisals\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Apprisal creation error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Apprisal could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates an apprisal - can only update the canRespond value\n\t * Params needed in req.body:\n\t *   @param {bool=} canRespond - Overrides the default for the recipient\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) apprisalId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} userId - Will be pulled from req.user.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar updateApprisalEndpoint = function updateApprisalEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var apprisalId = req.params.apprisalId;\n\t  if (req.body.apprisalId) {\n\t    apprisalId = req.body.apprisalId;\n\t  }\n\t  if (!apprisalId) {\n\t    res.statusMessage = 'No apprisalId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var updates = {};\n\t  if (typeof req.body.canRespond !== 'undefined') {\n\t    updates.canRespond = req.body.canRespond;\n\t  }\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Apprisal.updateApprisal(apprisalId, userId, updates).then(function (updatedApprisal) {\n\t    if (!updatedApprisal) {\n\t      res.statusMessage = 'Apprisal was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      message: 'Successfully updated apprisal',\n\t      apprisal: updatedApprisal.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Apprisal update error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Apprisal could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes an apprisal (marks the status to 'removed')\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) apprisalId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t *  @returns status 204 on success and 422 on error or 404 if Apprisal to update is not found.\n\t */\n\tvar removeApprisalEndpoint = function removeApprisalEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var apprisalId = req.params.apprisalId;\n\t  if (req.body.apprisalId) {\n\t    apprisalId = req.body.apprisalId;\n\t  }\n\t  if (!apprisalId) {\n\t    res.statusMessage = 'No apprisalId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Apprisal.deleteApprisal(apprisalId, userId).then(function (removedItem) {\n\t    if (!removedItem) {\n\t      res.statusMessage = 'Apprisal was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Apprisal could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getApprisalsEndpoint = getApprisalsEndpoint;\n\texports.addApprisalEndpoint = addApprisalEndpoint;\n\texports.updateApprisalEndpoint = updateApprisalEndpoint;\n\texports.removeApprisalEndpoint = removeApprisalEndpoint;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.proxyUserId = exports.requireLogin = exports.authenticateUser = exports.destroyUserSession = exports.createUserSession = exports.validateUserSession = exports.sessionsRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(33);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _proxyUser = __webpack_require__(34);\n\t\n\tvar _proxyUser2 = _interopRequireDefault(_proxyUser);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.sessionsRoutes = _routes2.default;\n\texports.validateUserSession = _warrant.validateUserSession;\n\texports.createUserSession = _warrant.createUserSession;\n\texports.destroyUserSession = _warrant.destroyUserSession;\n\texports.authenticateUser = _warrant.authenticateUser;\n\texports.requireLogin = _warrant.requireLogin;\n\texports.proxyUserId = _proxyUser2.default;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\t/* Sessions endpoint creates sessions\n\t *  These would be equivalent to login/logout\n\t */\n\tvar routes = new _express.Router();\n\t\n\t/* Calls authenticateUser to log in a user */\n\tfunction signinUser(req, res) {\n\t  var body = req.body;\n\t  (0, _warrant.authenticateUser)(req, res, body).then(function (user) {\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Logged in',\n\t      user: user\n\t    });\n\t  }).catch(function (err) {\n\t    console.log(err);\n\t    res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t}\n\t\n\troutes.route('/sessions').post(signinUser);\n\t\n\t/* Clears the session info, effectively logging out a user */\n\troutes.route('/sessions').delete(function logThemOut(req, res) {\n\t  (0, _warrant.destroyUserSession)(req, res);\n\t  res.status(204).end();\n\t});\n\t\n\t/* Checks if a user is currently authenticated.\n\t */\n\troutes.route('/sessions').get(function isAuthenticated(req, res) {\n\t  if (req.user) {\n\t    res.status(204).end();\n\t    return;\n\t  }\n\t  res.status(403).end();\n\t});\n\t\n\texports.default = routes;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* Returns either the current user's id or, if onBehalfOfId is passed in\n\t *  to the body, it will verify if the current user can act on behalf of the passed\n\t *  in id and return that.\n\t *  @param {object} req - the request object that has a user account attached\n\t *  @returns {string} userId - the id to use in actions.\n\t */\n\tvar proxyUserId = function getAccount(req) {\n\t  var currentUser = req.user;\n\t  var onBehalfOfId = req.body.onBehalfOfId;\n\t  if (onBehalfOfId && onBehalfOfId.length > 0) {\n\t    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n\t      return onBehalfOfId;\n\t    }\n\t  }\n\t  if (req.user && req.user.id) {\n\t    return req.user.id;\n\t  }\n\t  return null;\n\t};\n\t\n\texports.default = proxyUserId;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.UserController = exports.userRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(36);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(37);\n\t\n\tvar UserController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.userRoutes = _routes2.default;\n\texports.UserController = UserController;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(37);\n\t\n\tvar routes = new _express.Router();\n\t\n\troutes.route('/users').post(_controller.addUserEndpoint);\n\t\n\troutes.get('/users', (0, _warrant.requireLogin)(), _controller.getUserInfoEndpoint);\n\troutes.put('/users', (0, _warrant.requireLogin)(), _controller.updateUserEndpoint);\n\troutes.put('/passwords', (0, _warrant.requireLogin)(), _controller.updatePasswordEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.updatePasswordEndpoint = exports.updateUserEndpoint = exports.getUserInfoEndpoint = exports.addUserEndpoint = undefined;\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar User = _models.models.User;\n\t\n\t/* Returns either the current user's id or, if onBehalfOfId is passed in\n\t *  to the body, it will verify if the current user can act on behalf of the passed\n\t *  in id and return that.\n\t *  @param {object} req - the request object that has a user attached\n\t *  @returns {string} id - a user id to use in searches.\n\t *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n\t */\n\tvar activeUsertId = function getUser(req) {\n\t  var currentUser = req.user;\n\t  var onBehalfOfId = req.body.onBehalfOfId;\n\t  if (onBehalfOfId && onBehalfOfId.length > 0) {\n\t    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n\t      return onBehalfOfId;\n\t    }\n\t  }\n\t  if (req.user && req.user.id) {\n\t    return req.user.id;\n\t  }\n\t  return null;\n\t};\n\t\n\t/* Adds an user to the Users database based on the fields passed in.\n\t * Params needed in body:\n\t *   @param {string} email - the email address\n\t *   @param {string} password - the user's password. Must pass owasp tests.\n\t *   @param {string} displayName - the name to display on the user's page.\n\t */\n\tvar addUserEndpoint = function addUserEndpoint(req, res) {\n\t  console.log('user');\n\t  console.dir(_models.models);\n\t\n\t  var _req$body = req.body,\n\t      email = _req$body.email,\n\t      password = _req$body.password,\n\t      displayName = _req$body.displayName;\n\t\n\t  var newUser = User.build({\n\t    email: email,\n\t    displayName: displayName\n\t  });\n\t  newUser.setPassword(password).then(function () {\n\t    // eslint-disable-line arrow-body-style\n\t    return newUser.save();\n\t  }).then(function (createdUser) {\n\t    console.log('Created User');\n\t    (0, _warrant.createUserSession)(req, res, createdUser);\n\t    console.log('Finished login');\n\t    var cleanUser = createdUser.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully Registered',\n\t      user: cleanUser\n\t    });\n\t  }).catch(function (err) {\n\t    (0, _warrant.destroyUserSession)(req, res);\n\t    console.log(err);\n\t    console.dir(err);\n\t    // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n\t    if (err.code === 11000) {\n\t      res.statusMessage = 'User with that email already exists'; // eslint-disable-line no-param-reassign\n\t      res.status(409).end();\n\t      return;\n\t    }\n\t    var errorMessage = 'User could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    // TODO: Return errors better. The err object has an errors array that could be parsed.\n\t    res.status(422).send(JSON.stringify({ errors: err.message }));\n\t  });\n\t};\n\t\n\t/* Get user info for id.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The user's id to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  @param {number} id of user - Will be pulled from req.user.\n\t *  Uses activeUsertId() to get the search parameters.\n\t */\n\tvar getUserInfoEndpoint = function getUserInfoEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = activeUsertId(req);\n\t  if (!userId) {\n\t    return res.status(422).json({ success: false, message: 'Not logged in.' });\n\t  }\n\t  User.findById(userId).then(function (item) {\n\t    var cleanedItem = item.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      user: cleanedItem\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Update user info\n\t * Requires values in the body of the req.\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t * Possible options (not all have to be passed):\n\t *     @param {String} email - the new email address\n\t *      TODO: validate the new email\n\t *     @param {String} displayName - the new displayName\n\t */\n\tvar updateUserEndpoint = function updateUserEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = activeUsertId(req);\n\t  if (!userId) {\n\t    return res.status(422).json({ success: false, message: 'Not logged in.' });\n\t  }\n\t  var _req$body2 = req.body,\n\t      email = _req$body2.email,\n\t      displayName = _req$body2.displayName;\n\t\n\t  User.findById(userId).then(function (item) {\n\t    var foundUser = item;\n\t    if (email && email.length > 0) {\n\t      foundUser.email = email;\n\t    }\n\t    if (displayName && displayName.length > 0) {\n\t      foundUser.displayName = displayName;\n\t    }\n\t    return foundUser.save();\n\t  }).then(function (user) {\n\t    var cleanedUser = user.toJSON();\n\t    res.status(200).json({\n\t      success: true,\n\t      user: cleanedUser\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Update password endpoint\n\t * Requires old and new password.\n\t * First validates current password then updates to the new password.\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t *  Required in req object:\n\t *     @param {String} password - the current password\n\t *     @param {String} newPassword - the new password\n\t */\n\tvar updatePasswordEndpoint = function updatePasswordEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = activeUsertId(req);\n\t  if (!userId) {\n\t    return res.status(422).json({ success: false, message: 'Not logged in.' });\n\t  }\n\t  var _req$body3 = req.body,\n\t      password = _req$body3.password,\n\t      newPassword = _req$body3.newPassword;\n\t\n\t  var foundUser = null;\n\t  User.findById(userId).then(function comparePass(theUser) {\n\t    foundUser = theUser;\n\t    return theUser.comparePassword(password);\n\t  }).then(function wasPasswordValid(passwordsMatched) {\n\t    if (!passwordsMatched) {\n\t      throw new Error('Could not verify user');\n\t    }\n\t    return foundUser;\n\t  }).then(function updatePass() {\n\t    return foundUser.setPassword(newPassword);\n\t  }).then(function saveUser() {\n\t    return foundUser.save();\n\t  }).then(function returnCompleted() {\n\t    res.status(200).end();\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.addUserEndpoint = addUserEndpoint;\n\texports.getUserInfoEndpoint = getUserInfoEndpoint;\n\texports.updateUserEndpoint = updateUserEndpoint;\n\texports.updatePasswordEndpoint = updatePasswordEndpoint;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.RecipientController = exports.recipientRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(39);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(40);\n\t\n\tvar RecipientController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.recipientRoutes = _routes2.default;\n\texports.RecipientController = RecipientController;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(40);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/recipients', (0, _warrant.requireLogin)(), _controller.getRecipientsEndpoint);\n\troutes.post('/recipients', (0, _warrant.requireLogin)(), _controller.addRecipientEndpoint);\n\troutes.put('/recipients/:recipientId', (0, _warrant.requireLogin)(), _controller.updateRecipientEndpoint);\n\troutes.delete('/recipients/:recipientId', (0, _warrant.requireLogin)(), _controller.removeRecipientEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removeRecipientEndpoint = exports.updateRecipientEndpoint = exports.addRecipientEndpoint = exports.getRecipientsEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(32);\n\t\n\tvar Recipient = _models.models.Recipient;\n\t\n\t/* Get all of the recipients for the userId.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the search parameters.\n\t */\n\tvar getRecipientsEndpoint = function getRecipientsEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Recipient.findAllForUser(userId).then(function (recipients) {\n\t    var cleanRecipients = recipients.map(function jsonify(recipient) {\n\t      return recipient.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      recipients: cleanRecipients\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Adds an recipient to the Recipients database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} email - the email address\n\t *   @param {string} displayName - the displayName for the recipient.\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar addRecipientEndpoint = function addRecipientEndpoint(req, res) {\n\t  var _req$body = req.body,\n\t      email = _req$body.email,\n\t      displayName = _req$body.displayName,\n\t      canRespond = _req$body.canRespond,\n\t      type = _req$body.type;\n\t\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  var newRecipient = Recipient.build({\n\t    email: email,\n\t    displayName: displayName,\n\t    canRespond: canRespond,\n\t    type: type,\n\t    user_id: userId\n\t  });\n\t  newRecipient.save().then(function (createdRecipient) {\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created recipient',\n\t      recipient: createdRecipient.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Recipient creation error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Recipient could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a recipient\n\t * Params needed in req.body:\n\t *   @param {string=} email (optional) - the email address to update.\n\t *   @param {string=} displayName (optional) - the displayName to update.\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} userId - Will be pulled from req.user.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar updateRecipientEndpoint = function updateRecipientEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var recipientId = req.params.recipientId;\n\t  if (req.body.recipientId) {\n\t    recipientId = req.body.recipientId;\n\t  }\n\t  if (!recipientId) {\n\t    res.statusMessage = 'No recipientId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var _req$body2 = req.body,\n\t      email = _req$body2.email,\n\t      displayName = _req$body2.displayName,\n\t      status = _req$body2.status,\n\t      canRespond = _req$body2.canRespond,\n\t      type = _req$body2.type;\n\t\n\t  var updates = {};\n\t  if (email && email.length > 0) updates.email = email;\n\t  if (displayName && displayName.length > 0) updates.displayName = displayName;\n\t  if (status && status.length > 0) updates.status = status;\n\t  if (type && type.length > 0) updates.type = type;\n\t  if (typeof canRespond !== 'undefined') {\n\t    updates.canRespond = canRespond;\n\t  }\n\t\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Recipient.updateRecipient(recipientId, userId, updates).then(function (updatedRecipient) {\n\t    if (!updatedRecipient) {\n\t      res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      message: 'Successfully updated recipient',\n\t      recipient: updatedRecipient.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Recipient update error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Recipient could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a recipient (marks the status to 'removed')\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t *  @returns status 204 on success and 422 on error or 404 if Recipient to update is not found.\n\t */\n\tvar removeRecipientEndpoint = function removeRecipientEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.recipientId;\n\t  if (req.body.recipientId) {\n\t    itemId = req.body.recipientId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No recipientId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Recipient.deleteRecipient(itemId, userId).then(function (removedItem) {\n\t    if (!removedItem) {\n\t      res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Recipient could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getRecipientsEndpoint = getRecipientsEndpoint;\n\texports.addRecipientEndpoint = addRecipientEndpoint;\n\texports.updateRecipientEndpoint = updateRecipientEndpoint;\n\texports.removeRecipientEndpoint = removeRecipientEndpoint;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.PostController = exports.postRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(42);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(43);\n\t\n\tvar PostController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.postRoutes = _routes2.default;\n\texports.PostController = PostController;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _controller = __webpack_require__(43);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/posts', (0, _warrant.requireLogin)(), _controller.getPostsEndpoint);\n\troutes.get('/posts/:postId', (0, _warrant.requireLogin)(), _controller.getAPostEndpoint);\n\troutes.post('/posts', (0, _warrant.requireLogin)(), _controller.addPostEndpoint);\n\troutes.put('/posts/:postId', (0, _warrant.requireLogin)(), _controller.updatePostEndpoint);\n\troutes.delete('/posts/:postId', (0, _warrant.requireLogin)(), _controller.removePostEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removePostEndpoint = exports.updatePostEndpoint = exports.addPostEndpoint = exports.getAPostEndpoint = exports.getPostsEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(32);\n\t\n\tvar Post = _models.models.Post;\n\tvar Apprisal = _models.models.Apprisal;\n\t\n\t/* Get all of the posts for the userId.\n\t * Params needed in req.body:\n\t *   @param {number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search user.\n\t */\n\tvar getPostsEndpoint = function getPostsEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.findAllForUser(userId, {\n\t    includeTables: [{\n\t      model: Apprisal\n\t    }]\n\t  }).then(function (items) {\n\t    var cleanedItems = items.map(function jsonify(mappedItem) {\n\t      return mappedItem.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      posts: cleanedItems\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Get a specific post for userId.\n\t * Params needed in req.body:\n\t *   @param {number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search user.\n\t *  @param {string} postId - the post to search for can be in body or params\n\t */\n\tvar getAPostEndpoint = function getAPostEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var postId = req.params.postId;\n\t  if (req.body.postId) {\n\t    postId = req.body.postId;\n\t  }\n\t  if (!postId) {\n\t    res.statusMessage = 'No post id provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.findOne({ where: { id: postId, user_id: userId } }).then(function (item) {\n\t    if (!item) {\n\t      res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      post: item.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Adds a post to the Post database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} message - the main message body\n\t *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n\t *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to post under.\n\t */\n\tvar addPostEndpoint = function addPostEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var _req$body = req.body,\n\t      message = _req$body.message,\n\t      status = _req$body.status,\n\t      mediaIds = _req$body.mediaIds;\n\t\n\t  var newPost = Post.build({\n\t    message: message,\n\t    status: status,\n\t    user_id: userId\n\t  });\n\t  var createdId = null;\n\t  newPost.save().then(function (createdItem) {\n\t    createdId = createdItem.id;\n\t    console.log('created item');\n\t    console.dir(createdItem);\n\t    if (mediaIds && mediaIds.length > 0) {\n\t      return createdItem.setMedia(mediaIds);\n\t    }\n\t    console.log('Got here, but maybe should not have');\n\t    return createdItem;\n\t  }).then(function () {\n\t    console.log('We set media, now for find and associate');\n\t    return Post.find({\n\t      where: { id: createdId }\n\t    });\n\t  }).then(function (createdItem) {\n\t    console.log('created item');\n\t    console.dir(JSON.stringify(createdItem));\n\t    var cleanedPost = createdItem.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created post',\n\t      post: cleanedPost\n\t    });\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be created.';\n\t    if (err.code === 11000) {\n\t      errorMessage = 'Post already exists';\n\t    } else if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a post\n\t *   @param {string} message - the main message body\n\t *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n\t *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to map.\n\t */\n\tvar updatePostEndpoint = function updatePostEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.postId;\n\t  if (req.body.postId) {\n\t    itemId = req.body.postId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No post id provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var _req$body2 = req.body,\n\t      message = _req$body2.message,\n\t      mediaIds = _req$body2.mediaIds,\n\t      status = _req$body2.status;\n\t\n\t  var updates = {};\n\t  if (message && message.length > 0) updates.message = message;\n\t  if (status && status.length > 0) updates.status = status;\n\t  if (mediaIds && mediaIds.length > 0) updates.mediaIds = mediaIds;\n\t\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.updatePost(itemId, userId, updates).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      message: 'Successfully updated post',\n\t      post: updatedItem.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.dir(err);\n\t    var errorMessage = 'Post could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a post (marks the status to 'removed')\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar removePostEndpoint = function removePostEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.postId;\n\t  if (req.body.postId) {\n\t    itemId = req.body.postId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.deletePost(itemId, userId).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getPostsEndpoint = getPostsEndpoint;\n\texports.getAPostEndpoint = getAPostEndpoint;\n\texports.addPostEndpoint = addPostEndpoint;\n\texports.updatePostEndpoint = updatePostEndpoint;\n\texports.removePostEndpoint = removePostEndpoint;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.MediaController = exports.mediaRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(45);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(46);\n\t\n\tvar MediaController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.mediaRoutes = _routes2.default;\n\texports.MediaController = MediaController;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(46);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/media', (0, _warrant.requireLogin)(), _controller.getMediaEndpoint);\n\troutes.post('/media', (0, _warrant.requireLogin)(), _controller.addMediumEndpoint);\n\troutes.put('/media/:mediaId', (0, _warrant.requireLogin)(), _controller.updateMediumEndpoint);\n\troutes.delete('/media/:mediaId', (0, _warrant.requireLogin)(), _controller.removeMediumEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removeMediumEndpoint = exports.updateMediumEndpoint = exports.addMediumEndpoint = exports.getMediaEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(32);\n\t\n\tvar Media = _models.models.Media;\n\t\n\t/* Get all of the media for the user.id.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the search parameters.\n\t */\n\tvar getMediaEndpoint = function getMediaEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Media.findAllForUser(userId).then(function (media) {\n\t    var cleanMedia = media.map(function jsonify(medium) {\n\t      return medium.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      media: cleanMedia\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Adds an media item to the Media database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} url - the email address\n\t *   @param {string} type - the type of media.\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar addMediumEndpoint = function addMediumEndpoint(req, res) {\n\t  var _req$body = req.body,\n\t      url = _req$body.url,\n\t      type = _req$body.type;\n\t\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  var newItem = Media.build({\n\t    url: url,\n\t    type: type,\n\t    user_id: userId\n\t  });\n\t  newItem.save().then(function (createdMedia) {\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created media item',\n\t      media: createdMedia.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Media item creation error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Media item could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a media item\n\t * Params needed in req.body:\n\t *   @param {string} url - the email address\n\t *   @param {string} type - the type of media.\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) mediaId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t *  Uses activeAccountId() to get the accountId to search for.\n\t */\n\tvar updateMediumEndpoint = function updateMediumEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var mediaId = req.params.mediaId;\n\t  if (req.body.mediaId) {\n\t    mediaId = req.body.mediaId;\n\t  }\n\t  var _req$body2 = req.body,\n\t      url = _req$body2.url,\n\t      type = _req$body2.type;\n\t\n\t  if (!mediaId) {\n\t    res.statusMessage = 'No mediaId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t\n\t  var updates = {};\n\t  if (url && url.length > 0) updates.url = url;\n\t  if (type && type.length > 0) updates.type = type;\n\t\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Media.updateMedia(mediaId, userId, updates).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      message: 'Successfully updated media',\n\t      media: updatedItem.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Media update error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Media could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a media\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar removeMediumEndpoint = function removeMediumEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.mediaId;\n\t  if (req.body.mediaId) {\n\t    itemId = req.body.mediaId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No mediaId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Media.deleteMedia(itemId, userId).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Media could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getMediaEndpoint = getMediaEndpoint;\n\texports.addMediumEndpoint = addMediumEndpoint;\n\texports.updateMediumEndpoint = updateMediumEndpoint;\n\texports.removeMediumEndpoint = removeMediumEndpoint;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _dotenv = __webpack_require__(48);\n\t\n\tvar _dotenv2 = _interopRequireDefault(_dotenv);\n\t\n\tvar _requireEnvironmentVariables = __webpack_require__(49);\n\t\n\tvar _requireEnvironmentVariables2 = _interopRequireDefault(_requireEnvironmentVariables);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* 'As early as possible in your application, require and configure dotenv.'\n\t *   - https://www.npmjs.com/package/dotenv\n\t *\n\t * However, we aren't going to load these in production as it could lead to sloppy deploys.\n\t */\n\tif (false) {\n\t  console.log('Environment: ' + process.env.NODE_ENV + ' - loading DEV environment vars.');\n\t  _dotenv2.default.load();\n\t} else if (false) {\n\t  console.log('Environment: loading TEST environment vars.');\n\t  _dotenv2.default.load({ path: './envTest' });\n\t} else {\n\t  console.log('Environment: did NOT load environment variables from .env for ' + (\"production\") + '. This is not a problem if you define your environment variables outside of the file system as you should.');\n\t}\n\t\n\t/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n\t *   the process exits with code 400.\n\t * https://github.com/bjoshuanoah/require-environment-variables\n\t */\n\t(0, _requireEnvironmentVariables2.default)(['REDIS_URL', 'DATABASE_URL', 'MAIN_SERVER_PORT', 'ACCOUNT_PEPPER_1', 'ACCOUNT_ENCRYPT_CURRENT_PEPPER', 'IDIER_WORKER_ID', 'TOKEN_PEPPER_1', 'TOKEN_ENCRYPT_CURRENT_PEPPER', 'SESSION_SECRET']);\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"dotenv\");\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"require-environment-variables\");\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _redis = __webpack_require__(51);\n\t\n\tvar _redis2 = _interopRequireDefault(_redis);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar REDIS_URL = process.env.REDIS_URL;\n\t\n\t/* Connect to redis */\n\tvar redisClient = _redis2.default.createClient(REDIS_URL);\n\t\n\tredisClient.on('error', function redisErrorReport(err) {\n\t  console.log('Redis connection error ' + err);\n\t});\n\t\n\texports.default = redisClient;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"redis\");\n\n/***/ },\n/* 52 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"connect-redis\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// server.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 357a07b057e6edc11436","/* Base imports */\nimport { Server } from 'http';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport chalk from 'chalk';\nimport { validateUserSession } from './modules/Authentication/warrant';\nimport { COOKIE_NAME_SESSION } from '../globalConstants';\n\n/* Routes */\nimport {\n  userRoutes,\n  recipientRoutes,\n  sessionsRoutes,\n  postRoutes,\n  mediaRoutes,\n  apprisalRoutes,\n} from './modules';\n\n/* Configurations */\nimport '../config/environment';\nimport redisClient from '../config/redisConnect';\n\nconst RedisStore = require('connect-redis')(session);\n\nlet port = process.env.API_SERVER_PORT;\nif (!port) {\n  port = 3006;\n}\n\nconst app = express();\n\n\n/* Middleware setup */\napp.use((err, req, res, next) => {\n  if (res.headersSent) next(err);\n  res.status(err.status || port).render('500');\n});\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(session({\n  name: COOKIE_NAME_SESSION,\n  secret: process.env.SESSION_SECRET,\n  resave: true,\n  saveUninitialized: false,\n  store: new RedisStore({ client: redisClient }),\n}));\napp.use(validateUserSession);\napp.use(morgan('combined'));\n\n/* Routes */\n// app.use('/api/v1', [userRoutes, recipientRoutes, authenticationRoutes, postRoutes]);\napp.use('/api/v1', [\n  userRoutes,\n  recipientRoutes,\n  sessionsRoutes,\n  postRoutes,\n  mediaRoutes,\n  apprisalRoutes,\n]);\n\napp.get('/', function baseReturn(req, res) {\n  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('Closing server.');\n  app.close();\n});\n\napp.on('close', () => {\n  console.log('Closing redis.');\n  redisClient.quit();\n});\n\n/* Start the API Server */\nconst server = Server(app);\nserver.listen(port, function reportOnListen(error) {\n  if (error) {\n    console.log(chalk.red(`API Server ERROR on startup: ${error}`));\n  } else {\n    console.log(chalk.bold.green(`API Server listening on http://localhost:${port}.`));\n  }\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/apiserver.js","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"express-session\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"morgan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"chalk\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"chalk\"\n// module id = 6\n// module chunks = 0","import { models, UserType } from '../../models';\nimport { COOKIE_NAME_INDICATE_SESSION } from '../../../globalConstants';\n\nconst User = models.User;\n\n// ideas from https://github.com/rdegges/svcc-auth\n\n/* eslint-disable no-param-reassign */\n\n/* Stores user data in the session and sets related cookies\n *  - Store the user object as a req.user\n *  - Set a session cookie with the user object\n *\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n *  @param {Object} user - A user object.\n */\nconst createUserSession = function createUserSession(req, res, user) {\n  const cleanUser = {\n    id: user.id,\n    displayName: user.displayName,\n    email: user.email,\n    userType: user.userType,\n    validated: user.validated,\n  };\n\n  req.session.user = cleanUser;\n  req.user = cleanUser;\n  res.locals.user = cleanUser;\n  res.cookie(COOKIE_NAME_INDICATE_SESSION, 'y', { httpOnly: false }); // Does the user have a session.\n};\n\n\n/* Destroy a user session\n * Removes the session and related cookies.\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n *  @param {Object} user - A user object.\n */\n /* eslint-disable no-unused-vars */\nconst destroyUserSession = function destroyUserSession(req, res, user) {\n  if (req.session) {\n    req.session.destroy();\n    res.clearCookie(COOKIE_NAME_INDICATE_SESSION);\n  }\n};\n/* eslint-enable no-unused-vars */\n\n/**\n * A simple authentication middleware for Express.\n *\n * This middleware will load users from session data, and handle all user\n * proxying for convenience.\n * TODO: We're hitting the db every session. Store more data in session? Then, how to ban?\n */\nconst validateUserSession = function validateUserSession(req, res, next) {\n  if (req.session && req.session.user) {\n    User.findById(req.session.user.id).then((user) => {\n      if (user) {\n        if (user.userType === UserType.BANNED) {\n          destroyUserSession(req, res, user);\n          next();\n        }\n        createUserSession(req, res, user);\n      }\n      next();\n    });\n  } else {\n    next();\n  }\n};\n\n/* Authenticates a user with email and password.\n * Creates a session on valid authentication.\n */\nconst authenticateUser = function authenticateUser(req, res, body) {\n  const email = body.email;\n  const password = body.password;\n  if (!email || !password) {\n    const err = new Error('Email and password required.');\n    throw err;\n  }\n  let foundUser = null;\n  return User.find({ where: { email: email } })\n    .then(function checkForUser(theUser) {\n      if (theUser) {\n        return theUser;\n      }\n      throw new Error('Could not verify account');\n    })\n    .then(function comparePass(theUser) {\n      foundUser = theUser;\n      return theUser.comparePassword(password);\n    })\n    .then(function returnAccount(passwordsMatched) {\n      if (!passwordsMatched) {\n        throw new Error('Could not verify account');\n      }\n      createUserSession(req, res, foundUser);\n      return foundUser;\n    });\n};\n\n/**\n * Ensure a user is logged in before allowing them to continue their request.\n *\n * If a user isn't logged in, they'll be sent a 403.\n */\nconst requireLogin = function requireLogin() {\n  return function areWeAuthenticated(req, res, next) {\n    if (req && !req.user) {\n      res.statusMessage = 'Requires login.'; // eslint-disable-line no-param-reassign\n      res.status(403).end();\n    } else {\n      next();\n    }\n  };\n};\n\n/* eslint-enable no-param-reassign */\nexport {\n  validateUserSession,\n  createUserSession,\n  destroyUserSession,\n  authenticateUser,\n  requireLogin,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/warrant.js","import Sequelize from 'sequelize';\nimport chalk from 'chalk';\nimport Album from './AlbumModel';\nimport Apprisal from './ApprisalModel';\nimport Media from './MediaModel';\nimport Post from './PostModel';\nimport Recipient from './RecipientModel';\nimport User from './UserModel';\nimport UserValidation from './UserValidation';\nimport {\n  UserType,\n  MediaType,\n  PostStatus,\n  MAX_POST_SEARCH_RETURN_LIMIT,\n  RecipientType,\n  RecipientStatus,\n} from './constants';\n\nconst allConfigs = {\n  development: {\n    username: 'mdw',\n    password: null,\n    database: 'socialnotsocial',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n  test: {\n    username: 'root',\n    password: null,\n    database: 'database_test',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n  production: {\n    username: 'root',\n    password: null,\n    database: 'database_production',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n};\n\n/* Set up the general process */\nconst env = process.env.NODE_ENV || 'development';\nconst config = allConfigs[env];\nlet sequelize = null;\nif (process.env.DATABASE_URL) {\n  sequelize = new Sequelize(process.env.DATABASE_URL);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\nconst db = {};\n\n/* Connect and log in to postgres */\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log('Success: Connection to Postgres established .');\n  }, function trapError(err) {\n    console.log(chalk.red('FAILURE: Unable to connect to the Postgres database:'), err);\n  });\n\n\n/* Create the models\n * TODO: This is a manual update nightmare.\n */\nconst albumModel = Album(sequelize, Sequelize);\ndb[albumModel.name] = albumModel;\n\nconst apprisalModel = Apprisal(sequelize, Sequelize);\ndb[apprisalModel.name] = apprisalModel;\n\nconst mediaModel = Media(sequelize, Sequelize);\ndb[mediaModel.name] = mediaModel;\n\nconst postModel = Post(sequelize, Sequelize);\ndb[postModel.name] = postModel;\n\nconst recipientModel = Recipient(sequelize, Sequelize);\ndb[recipientModel.name] = recipientModel;\n\nconst userModel = User(sequelize, Sequelize);\ndb[userModel.name] = userModel;\n\nconst userValidationModel = UserValidation(sequelize, Sequelize);\ndb[userValidationModel.name] = userValidationModel;\n\n/* Do associations */\nObject.keys(db).forEach(function associateThem(modelName) {\n  if ('associate' in db[modelName]) {\n    db[modelName].associate(db);\n  }\n});\n\n/* Push the models to the database */\nsequelize\n  .sync() //   .sync({ force: true }) <= removed as this drops the table\n  .then(() => {\n    console.log('Success: Synced models to database.');\n  }, function trapSyncError(err) {\n    console.log(chalk.red('FAILURE: An error occurred while creating the table:'), err);\n  });\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nconst models = db;\nexport {\n  models,\n  UserType,\n  MediaType,\n  PostStatus,\n  MAX_POST_SEARCH_RETURN_LIMIT,\n  RecipientType,\n  RecipientStatus,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/index.js","module.exports = require(\"sequelize\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sequelize\"\n// module id = 9\n// module chunks = 0","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { MAX_POST_SEARCH_RETURN_LIMIT } from './constants';\n\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Album = sequelize.define(\n    'Album', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(album) {\n          if (!album.id) {\n            album.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Album.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Album.belongsToMany(models.Media, { through: 'AlbumMedia' });\n          Album.belongsToMany(models.Post, { through: 'PostAlbum' });\n        },\n      },\n    },\n  );\n\n  /* Find all albums for a userId\n   * @param {string} userId - the userId to search for\n   * @param {number} limit - the number to find.\n   * @param {number} offset - The number to skip.\n   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n   */\n  Album.findAllForUser = function findAllForUser(userId, options) {\n    let limit = 20;\n    if (options.limit) {\n      limit = options.limit;\n    }\n    let offset = 0;\n    if (options.limit) {\n      offset = options.offset;\n    }\n    let beforeId = null;\n    if (options.beforeId) {\n      beforeId = options.beforeId;\n    }\n    let includeTables = [];\n    if (options.includeTables) {\n      includeTables = options.includeTables;\n    }\n\n    if (!userId) {\n      throw new Error('No userId provided');\n    }\n    const whereClause = {};\n\n    whereClause.where = { user_id: Number(userId) };\n\n    if (beforeId && beforeId > 0) {\n      whereClause.id = { $lt: beforeId };\n    }\n\n    let limiter = limit;\n    if (limiter > MAX_POST_SEARCH_RETURN_LIMIT) {\n      limiter = MAX_POST_SEARCH_RETURN_LIMIT;\n    }\n    whereClause.limit = limiter;\n\n    if (offset > 0) {\n      whereClause.offset = offset;\n    }\n    whereClause.order = 'id DESC';\n    if (includeTables) {\n      whereClause.include = includeTables;\n    }\n    return this.findAll(whereClause);\n  };\n\n  /* Determine total number of albums for account\n   * @param {number} - userId\n   */\n  Album.totalForUser = function countAlbums(userId) {\n    return Album.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update an album\n   * @param {number} - id: The id of the album\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated album or null if it couldn't be found\n   */\n  Album.updateAlbum = function updateAlbum(id, userId, updates) {\n    return Album.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundAlbum = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundAlbum[key] = updates[key];\n      });\n      return foundAlbum.save();\n    });\n  };\n\n  /* Delete a album\n   * @param {number} - id: The id of the album\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted album or null if it couldn't be found\n   */\n  Album.deleteAlbum = function deleteAlbum(id, userId) {\n    return Album.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => { // eslint-disable-line consistent-return\n      if (!foundItem) {\n        return null;\n      }\n      const foundAlbum = foundItem;\n      return foundAlbum.save();\n    })\n    .then((thisAlbum) => { // eslint-disable-line arrow-body-style\n      return thisAlbum.destroy();\n    });\n  };\n\n  return Album;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/AlbumModel.js","import Base58 from 'base58';\nimport generator from 'generate-password';\n\n/* idier: identifier generator. Inspired by twitter's snowflake system\n * https://blog.twitter.com/2010/announcing-snowflake\n * We use the timestamp converted to seconds + a worker id from the environment +\n *   a sequence number (see below) + a single random number just in case...\n */\nconst idier = function idier() {\n  /* The sequence is stored on the global object. The sequence should be between 1-999 to keep\n   *   our total id number in the right space to be converted.\n   *   Note: There's probably an opportunity to use Redis or similar for the sequence.\n   */\n  let mySequence = 1;\n  const globalSeq = global.idierSequence;\n  if (globalSeq && globalSeq < 1000 && globalSeq > 0) {\n    mySequence = globalSeq;\n    global.idierSequence += 1;\n  } else {\n    global.idierSequence = mySequence + 1;\n  }\n\n  let workerId = process.env.IDIER_WORKER_ID;\n  if (!workerId) {\n    workerId = Math.floor(Math.random() * 10);\n  }\n  const timeStamp = Math.floor(Date.now() / 1000);\n  const randomnumber = Math.floor(Math.random() * 10);\n  const snowflake = `${timeStamp}${workerId}${mySequence}${randomnumber}`;\n  const snowflakeInt = parseInt(snowflake, 10);\n  return snowflakeInt;\n};\n\n/* toHumanId - transform a number into a base58 encoded string for use in human visible tokens.\n   Uses https://www.npmjs.com/package/base58\n  */\nconst toHumanId = function toHumanId(idNumber) {\n  const encoded = Base58.encode(idNumber);\n  return encoded;\n};\n\n/* toNumbericId - transform a humanId (base32 encoded) string to a number to use by the computer.\n  */\nconst toNumericId = function toNumericId(idString) {\n  const decoded = Base58.decode(idString);\n  return decoded;\n};\n\n\n/* Password generator\n * Creates a 12 digit password with letters and numbers.\n * @param {number} length - lenght of password\n * @param {bool} numbers - inlcude numbers\n * @param {string} exclude - characters to exclude\n*/\nconst passGen = function passGen(length = 12, numbers = true, exclude = '') {\n  const password = generator.generate({\n    length: length,\n    numbers: numbers,\n    exclude: exclude,\n    strict: true,\n  });\n  return password;\n};\n\nexport { idier, toHumanId, toNumericId, passGen };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/idier.js","module.exports = require(\"base58\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base58\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"generate-password\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"generate-password\"\n// module id = 13\n// module chunks = 0","/* A type of user */\nconst UserType = {\n  NORMAL: 'ut_normal',\n  ADMIN: 'ut_admin',\n  CUSTSERVICE: 'ut_custservice',\n  BANNED: 'ut_banned',\n  DEMO: 'ut_demo',\n};\n\n/* The type of media */\nconst MediaType = {\n  VIDEO: 'mt_video',\n  PHOTO: 'mt_photo',\n};\n\n/* Enum for the post.status field */\nconst PostStatus = {\n  DRAFT: 'ps_draft',\n  POSTED: 'ps_posted',\n  REMOVED: 'ps_removed',\n};\n\n/* The maximum we can return from a search */\nconst MAX_POST_SEARCH_RETURN_LIMIT = 100;\n\n/* Enum for the Recipient.type field */\nconst RecipientType = {\n  EMAIL: 'rt_email',\n  TEXT: 'rt_text',\n  POST: 'rt_post',\n  FACEBOOK: 'rt_facebook',\n};\n\n/* Enum for the Recipient.status field */\nconst RecipientStatus = {\n  VALIDATING: 'rs_validating',\n  ACTIVE: 'rs_active',\n  REMOVED: 'rs_removed',\n  BOUNCING: 'rs_bounding',\n  UNSUBSCRIBED: 'rs_unsubscribed',\n};\n\nexport {\n  UserType,\n  MediaType,\n  PostStatus,\n  MAX_POST_SEARCH_RETURN_LIMIT,\n  RecipientType,\n  RecipientStatus,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/constants.js","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { MAX_POST_SEARCH_RETURN_LIMIT } from './constants';\n\n/* An apprisal is an actual notification sent to a user or system of a new post.\n * Has an association with the Post object and the recipient that it will be sent to.\n * This would be called a notification in another system, but we are reserving that for future use.\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Apprisal = sequelize.define(\n    'Apprisal', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      deliveredAt: {  // The date the item was either sent or pushed to service\n        type: DataTypes.DATE,\n        field: 'delivered_at',\n      },\n      firstOpenedAt: {  // This only applies to emails with trackers. When the email was viewed.\n        type: DataTypes.DATE,\n        field: 'first_opened_at',\n      },\n      firstViewedAt: {  // When this item was viewed on site.\n        type: DataTypes.DATE,\n        field: 'first_viewed_at',\n      },\n      canRespond: { // Can the recipient of this apprisal respond? Overrides canRespond on recipient\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n        field: 'can_respond',\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(apprisal) {\n          if (!apprisal.id) {\n            apprisal.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Apprisal.belongsTo(models.Post, {\n            foreignKey: {\n              field: 'post_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Apprisal.belongsTo(models.Recipient, {\n            foreignKey: {\n              field: 'recipient_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Apprisal.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n        },\n      },\n    },\n  );\n\n    /* Find all apprisals for a userId\n   * @param {string} userId - the userId to search for\n   * @param {number} limit - the number to find.\n   * @param {number} offset - The number to skip.\n   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n   */\n  Apprisal.findAllForUser = function findAllForUser(userId, limit = 20, offset = 0, beforeId) {\n    if (!userId) {\n      throw new Error('No userId provided');\n    }\n\n    const userWhere = `\"user_id\": \"${userId}\"`;\n\n    let beforeIdWhere = '';\n    if (beforeId && beforeId > 0) {\n      beforeIdWhere = `, id : {$lt: ${beforeId}}`;\n    }\n\n    let limiter = limit;\n    if (limiter > MAX_POST_SEARCH_RETURN_LIMIT) {\n      limiter = MAX_POST_SEARCH_RETURN_LIMIT;\n    }\n    const limitClause = `, \"limit\": \"${limiter}\", `;\n    let offsetClause = '';\n    if (offset > 0) {\n      offsetClause = `, \"offset\": \"${offset}\", `;\n    }\n    const orderClause = '\"order\": \"id DESC\"';\n    const queryJSON = `{ \"where\": { ${userWhere}${beforeIdWhere} }${limitClause}${offsetClause} ${orderClause}}`;\n    const query = JSON.parse(queryJSON);\n    return this.findAll(query);\n  };\n\n  /* Determine total number of apprisals for user\n   * @param {number} - userId\n   */\n  Apprisal.totalForUser = function countAll(userId) {\n    return Apprisal.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update an Apprisal\n   * @param {number} - id: The id of the item\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated apprisal or null if it couldn't be found\n   */\n  Apprisal.updateApprisal = function updateApprisal(id, userId, updates) {\n    return Apprisal.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundApprisal = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundApprisal[key] = updates[key];\n      });\n      return foundApprisal.save();\n    });\n  };\n\n  /* Delete an Apprisal\n   * @param {number} - id: The id of the item\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted apprisal or null if it couldn't be found\n   */\n  Apprisal.deleteApprisal = function deleteApprisal(id, userId) {\n    return Apprisal.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => { // eslint-disable-line consistent-return\n      if (!foundItem) {\n        return null;\n      }\n      const foundApprisal = foundItem;\n      return foundApprisal.save();\n    })\n    .then((thisApprisal) => { // eslint-disable-line arrow-body-style\n      return thisApprisal.destroy();\n    });\n  };\n\n  return Apprisal;\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/ApprisalModel.js","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { MediaType } from './constants';\n\n\n/* A piece of media that is uploaded.\n * Currently supports MediaType.\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Media = sequelize.define(\n    'Media', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      url: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isUrl: true,\n        },\n      },\n      type: {\n        type: DataTypes.ENUM,\n        values: [MediaType.PHOTO, MediaType.VIDEO],\n        defaultValue: MediaType.PHOTO,\n      },\n      width: {\n        type: DataTypes.INTEGER,\n      },\n      height: {\n        type: DataTypes.INTEGER,\n      },\n      size: {\n        type: DataTypes.INTEGER,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(media) {\n          if (!media.id) {\n            media.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Media.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Media.belongsToMany(models.Album, { through: 'AlbumMedia' });\n        },\n      },\n    },\n  );\n\n   /* Determine total number of media for account\n   * @param {number} - userId\n   */\n  Media.totalForUser = function countAll(userId) {\n    return Media.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update a Media\n   * @param {number} - id: The id of the post\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated post or null if it couldn't be found\n   */\n  Media.updateMedia = function updateMedia(id, userId, updates) {\n    return Media.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundMedia = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundMedia[key] = updates[key];\n      });\n      return foundMedia.save();\n    });\n  };\n\n  /* Delete a Media\n   * @param {number} - id: The id\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted media or null if it couldn't be found\n   */\n  Media.deleteMedia = function deleteMedia(id, userId) {\n    return Media.findOne({ where: { id: id, user_id: userId } })\n    .then((thisMedia) => { // eslint-disable-line arrow-body-style\n      if (thisMedia) {\n        return thisMedia.destroy();\n      }\n      return null;\n    });\n  };\n  return Media;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/MediaModel.js","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { PostStatus, MAX_POST_SEARCH_RETURN_LIMIT } from './constants';\n\n/* A post is the atomic messages of the user\n * https://developers.facebook.com/docs/graph-api/reference/v2.8/post\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Post = sequelize.define(\n    'Post', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      status: {\n        type: DataTypes.ENUM,\n        values: [PostStatus.DRAFT, PostStatus.POSTED, PostStatus.REMOVED],\n        defaultValue: PostStatus.POSTED,\n      },\n      message: {\n        type: DataTypes.STRING(5000),\n        allowNull: false,\n      },\n      edited: {\n        type: DataTypes.BOOLEAN,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(post) {\n          if (!post.id) {\n            post.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Post.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Post.belongsToMany(models.Album, { through: 'PostAlbum' });\n          Post.hasMany(models.Apprisal);\n        },\n      },\n    },\n  );\n\n  /* Find all posts for a userId\n   * @param {string} userId - the userId to search for\n   * @param {number} limit - the number to find.\n   * @param {number} offset - The number to skip.\n   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n   */\n  Post.findAllForUser = function findAllForUser(userId, options) {\n    let limit = 20;\n    if (options.limit) {\n      limit = options.limit;\n    }\n    let offset = 0;\n    if (options.limit) {\n      offset = options.offset;\n    }\n    let beforeId = null;\n    if (options.beforeId) {\n      beforeId = options.beforeId;\n    }\n    let includeTables = [];\n    if (options.includeTables) {\n      includeTables = options.includeTables;\n    }\n\n    if (!userId) {\n      throw new Error('No userId provided');\n    }\n    const whereClause = {};\n\n    whereClause.where = { user_id: Number(userId) };\n\n    if (beforeId && beforeId > 0) {\n      whereClause.id = { $lt: beforeId };\n    }\n\n    let limiter = limit;\n    if (limiter > MAX_POST_SEARCH_RETURN_LIMIT) {\n      limiter = MAX_POST_SEARCH_RETURN_LIMIT;\n    }\n    whereClause.limit = limiter;\n\n    if (offset > 0) {\n      whereClause.offset = offset;\n    }\n    whereClause.order = 'id DESC';\n    if (includeTables) {\n      whereClause.include = includeTables;\n    }\n    return this.findAll(whereClause);\n  };\n\n  /* Determine total number of posts for account\n   * @param {number} - userId\n   */\n  Post.totalForUser = function countPosts(userId) {\n    return Post.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update a post\n   * @param {number} - id: The id of the post\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated post or null if it couldn't be found\n   */\n  Post.updatePost = function updatePost(id, userId, updates) {\n    return Post.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundPost = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundPost[key] = updates[key];\n      });\n      return foundPost.save();\n    });\n  };\n\n  /* Delete a post\n   * @param {number} - id: The id of the post\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted post or null if it couldn't be found\n   */\n  Post.deletePost = function deletePost(id, userId) {\n    return Post.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => { // eslint-disable-line consistent-return\n      if (!foundItem) {\n        return null;\n      }\n      const foundPost = foundItem;\n      foundPost.status = PostStatus.REMOVED;\n      return foundPost.save();\n    })\n    .then((thisPost) => { // eslint-disable-line arrow-body-style\n      return thisPost.destroy();\n    });\n  };\n\n  return Post;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/PostModel.js","import { idier, passGen } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { appraiseEmail } from '../../shared/helpers/appraise';\nimport { deAesHash, aesHash } from './passwordEncryption';\nimport { RecipientType, RecipientStatus, MAX_POST_SEARCH_RETURN_LIMIT } from './constants';\n\n/* A recipient is a person or system where posts will be sent.\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Recipient = sequelize.define(\n    'Recipient', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      type: {\n        type: DataTypes.ENUM,\n        values: [RecipientType.EMAIL,\n          RecipientType.TEXT,\n          RecipientType.POST,\n          RecipientType.FACEBOOK,\n        ],\n        defaultValue: RecipientType.EMAIL,\n      },\n      status: {\n        type: DataTypes.ENUM,\n        values: [RecipientStatus.ACTIVE,\n          RecipientStatus.VALIDATING,\n          RecipientStatus.REMOVED,\n          RecipientStatus.BOUNCING,\n          RecipientStatus.UNSUBSCRIBED,\n        ],\n        defaultValue: RecipientStatus.ACTIVE,\n      },\n      displayName: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        field: 'display_name',\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidEmail: function validateEmail(value) {\n            const appraisalMessages = appraiseEmail(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n      },\n      // Each recipient gets an access token. Combined with Apprisal.id, makes for the link\n      // Advantage: if the token is stolen, can be recomputed and renders all apprisals with this\n      //   token invalid. Encrypted because if db hacked, could be used to see all data. (issue?)\n      accessTokenEncrypted: {\n        type: DataTypes.STRING,\n        field: 'access_token_hash',\n        allowNull: false,\n      },\n      // Pepper for the AES string used in the accessToken Encryption.\n      accessTokenPepper: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        field: 'access_token_pepper',\n      },\n      // Can a user respond? This can be overridden by Apprisals\n      canRespond: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n        field: 'can_respond',\n      },\n      validatedAt: {\n        type: DataTypes.DATE,\n        field: 'validated_at',\n      },\n      validated: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      unsubscribedAt: {\n        type: DataTypes.DATE,\n        field: 'unsubscribed_at',\n      },\n      unsubscribedReason: {\n        type: DataTypes.STRING,\n        field: 'unsubscribed_reason',\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      indexes: [\n        {\n          unique: true,\n          fields: ['user_id', 'email'],\n        },\n      ],\n      hooks: {\n        beforeValidate: function addId(recipient) {\n          if (!recipient.id) {\n            recipient.id = idier(); // eslint-disable-line no-param-reassign\n          }\n          if (!recipient.accessToken) {\n            const token = passGen(15, true, '.');\n            console.log(`Recipient token: ${token}`);\n            recipient.setAccessToken(token); // eslint-disable-line no-param-reassign\n          }\n          if (recipient.type === RecipientType.FACEBOOK) {\n            recipient.canRespond = false; // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      instanceMethods: {\n        setAccessToken: function setAccessToken(token) {\n          const self = this;\n          if (!token || token.length < 15) {\n            throw new Error('Invalid token passed to recipient. This is an internal error.');\n          }\n          const encryptedValue = aesHash(token, process.env.TOKEN_ENCRYPT_CURRENT_PEPPER);\n          self.accessTokenEncrypted = encryptedValue.encrypted;\n          self.accessTokenPepper = encryptedValue.pepperId;\n        },\n        getAccessToken: function getAccessToken() {\n          const self = this;\n          return deAesHash(\n            self.accessTokenEncrypted,\n            self.accessTokenPepper,\n          );\n        },\n        toJSON: function stripValues() {\n          const values = Object.assign({}, this.get());\n          delete values.accessTokenEncrypted;\n          delete values.accessTokenPepper;\n          delete values.deletedAt;\n          return values;\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Recipient.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Recipient.hasMany(models.Apprisal);\n        },\n      },\n    },\n  );\n\n  /* Find all recipients for a userId\n   * @param {string} userId - the userId to search for\n   * @param {number} limit - the number to find.\n   * @param {number} offset - The number to skip.\n   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n   */\n  Recipient.findAllForUser = function findAllForUser(userId, limit = 20, offset = 0, beforeId) {\n    if (!userId) {\n      throw new Error('No userId provided');\n    }\n\n    const userWhere = `\"user_id\": \"${userId}\"`;\n\n    let beforeIdWhere = '';\n    if (beforeId && beforeId > 0) {\n      beforeIdWhere = `, id : {$lt: ${beforeId}}`;\n    }\n\n    let limiter = limit;\n    if (limiter > MAX_POST_SEARCH_RETURN_LIMIT) {\n      limiter = MAX_POST_SEARCH_RETURN_LIMIT;\n    }\n    const limitClause = `, \"limit\": \"${limiter}\", `;\n    let offsetClause = '';\n    if (offset > 0) {\n      offsetClause = `, \"offset\": \"${offset}\", `;\n    }\n    const orderClause = '\"order\": \"id DESC\"';\n    const queryJSON = `{ \"where\": { ${userWhere}${beforeIdWhere} }${limitClause}${offsetClause} ${orderClause}}`;\n    const query = JSON.parse(queryJSON);\n    return this.findAll(query);\n  };\n\n  /* Determine total number of recipients for user\n   * @param {number} - userId\n   */\n  Recipient.totalForUser = function countAll(userId) {\n    return Recipient.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update a Recipient\n   * @param {number} - id: The id of the item\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated recipient or null if it couldn't be found\n   */\n  Recipient.updateRecipient = function updateRecipient(id, userId, updates) {\n    return Recipient.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundRecipient = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundRecipient[key] = updates[key];\n      });\n      return foundRecipient.save();\n    });\n  };\n\n  /* Delete a Recipient\n   * @param {number} - id: The id of the item\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted recipient or null if it couldn't be found\n   */\n  Recipient.deleteRecipient = function deleteRecipient(id, userId) {\n    return Recipient.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => { // eslint-disable-line consistent-return\n      if (!foundItem) {\n        return null;\n      }\n      const foundRecipient = foundItem;\n      foundRecipient.status = RecipientStatus.REMOVED;\n      return foundRecipient.save();\n    })\n    .then((thisRecipient) => { // eslint-disable-line arrow-body-style\n      return thisRecipient.destroy();\n    });\n  };\n\n  return Recipient;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/RecipientModel.js","import { isEmail, isEmpty } from 'validator';\nimport owasp from 'owasp-password-strength-test';\n\n/* Is the email valid? Uses the validator library to test.\n */\nconst appraiseEmail = function appraiseEmail(emailAddress) {\n  const messages = [];\n  if (!emailAddress || isEmpty(emailAddress)) {\n    messages.push('Email address is required.');\n  }\n  if (emailAddress && !isEmpty(emailAddress) && !isEmail(emailAddress)) {\n    messages.push('Email address does not appear to be valid.');\n  }\n  return messages;\n};\n\n/* Test for the validity of the displayName.\n *  Currently only checks if it's empty.\n */\nconst appraiseDisplayName = function appraiseDisplayName(displayName) {\n  const messages = [];\n  if (!displayName || isEmpty(displayName)) {\n    messages.push('Display name is required.');\n  }\n  return messages;\n};\n\n/* Tests a password.\n * Must be valid and pass the owasp validation tests.\n */\nconst appraisePassword = function appraisePassword(password) {\n  let messages = [];\n  if (isEmpty(password)) {\n    messages.push('Password is required.');\n  } else {\n    const owaspResults = owasp.test(password);\n    if (!owaspResults.strong) {\n      messages = messages.concat(owaspResults.errors);\n    }\n  }\n  return messages;\n};\n\nconst appraisePasswordErrors = {\n  minLength: 0,\n  maxLength: 1,\n  repeating: 2,\n  needLowercase: 3,\n  needUppercase: 4,\n  needNumber: 5,\n  needCharacter: 6,\n};\n\n/* A wrapper for awasp tests that returns this\n * {\n *   errors              : [],\n *   failedTests         : [],\n *   requiredTestErrors  : [],\n *   optionalTestErrors  : [],\n *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n *   isPassphrase        : false,\n *   strong              : true,\n *   optionalTestsPassed : 4\n * }\n */\nconst appraisePasswordExtra = function appraisePasswordExtra(password) {\n  return owasp.test(password);\n};\n\n/* Tests for the presense of an accountID.\n *  Only checks if it's empty.\n *  TODO: Check if the account actually exists.\n */\nconst appraiseAccountId = function appraiseAccountId(accountId) {\n  const messages = [];\n  if (isEmpty(accountId)) {\n    messages.push('AccountId is required.');\n  }\n  return messages;\n};\n\n/* Validates multiple options. Pass in an object with one of the following:\n * email: {string} validates an email (or empty}\n * displayName; {string} checks for empty\n * password: {string} validates a password\n * accountId: {string} validates the accountId\n * @returns: an object (see validator object below)\n */\nconst appraiseThese = function appraiseThese(what) {\n  const appraised = {\n    success: true,  // Did all tests pass\n    tested: [],  // Which tests where done? Check this to make sure things were passed in correctly.\n    errors: {},  // Error output from the sub-testers as objects.\n  };\n  if ('email' in what) {\n    appraised.tested.push('email');\n    const messages = appraiseEmail(what.email);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.email = messages;\n    }\n  }\n  if ('password' in what) {\n    appraised.tested.push('password');\n    const messages = appraisePassword(what.password);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.password = messages;\n    }\n  }\n  if ('displayName' in what) {\n    appraised.tested.push('displayName');\n    const messages = appraiseDisplayName(what.displayName);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.displayName = messages;\n    }\n  }\n  if ('accountId' in what) {\n    appraised.tested.push('accountId');\n    const messages = appraiseAccountId(what.accountId);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.accountId = messages;\n    }\n  }\n  return appraised;\n};\n\n/* Tests for the presense of a post message.\n *  Only checks if it's empty.\n *  Here for future functionality.\n */\nconst appraisePostMessage = function appraisePostMessage(postMessage) {\n  const messages = [];\n  if (!postMessage || isEmpty(postMessage)) {\n    messages.push('A message is required.');\n  }\n  return messages;\n};\n\n\nexport {\n  appraiseThese,\n  appraiseEmail,\n  appraiseDisplayName,\n  appraisePassword,\n  appraisePasswordExtra,\n  appraisePasswordErrors,\n  appraiseAccountId,\n  appraisePostMessage,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/appraise.js","module.exports = require(\"validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 20\n// module chunks = 0","module.exports = require(\"owasp-password-strength-test\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"owasp-password-strength-test\"\n// module id = 21\n// module chunks = 0","import { compare, hash } from 'bcrypt';\nimport crypto from 'crypto';\n\n/* Hashes the password into a SHA512 hex hash */\nconst hashPassword = function hashPassword(password) {\n  const hasher = crypto.createHash('sha512');\n  hasher.update(password);\n  const hashed = hasher.digest('hex');\n  return hashed;\n};\n\n/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n * Salt is returned as part of the hash and thus saved.\n * Note that this version of bcrypt only takes the first 72 characters.\n  */\nconst bcryptHash = function bcryptHash(passwordhash) {\n  const saltRounds = 10;\n  return hash(passwordhash, saltRounds);\n};\n\n/* Encrypts the input using aes256 using a pepper stored\n *   in the environment. This is what should be finally saved.\n */\nconst aesHash = function aesHash(toEncrypt, pepperId = process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER) {\n  const currentPepperId = pepperId;\n  if (!currentPepperId) {\n    throw new Error('Could not encrypt item - no pepper information available');\n  }\n  const pepper = process.env[currentPepperId];\n  if (!pepper) {\n    throw new Error('Could not encrypt item - no pepper available');\n  }\n  const algorithm = 'aes-256-ctr';\n  const cipher = crypto.createCipher(algorithm, pepper);\n  let crypted = cipher.update(toEncrypt, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return { encrypted: crypted, pepperId: currentPepperId };\n};\n\n/* Encrypting a password.\n   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n*/\nconst encryptPassword = function encryptPassword(rawPassword) {\n  return Promise.resolve(rawPassword)\n  .then(hashPassword)\n  .then(bcryptHash)\n  .then(aesHash);\n};\n\n/* Decrypts an encrypted value using aes256 using a pepper stored\n *   in the environment.\n */\nconst deAesHash = function deAesHash(toDecrypt, pepperId) {\n  const pepper = process.env[pepperId];\n  if (!pepper) {\n    return new Error('Pepper not found.');\n  }\n  const algorithm = 'aes-256-ctr';\n  const decipher = crypto.createDecipher(algorithm, pepper);\n  let decrypted = decipher.update(toDecrypt, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n};\n\n\n/* Compare passwords.\n * Because we are using hashing and encrypting, we have to do that before we compare.\n */\nconst passwordsMatch = function passwordsMatch(\n  candidatePassword,\n  encryptedPasswordHash,\n  pepperId,\n  ) {\n  // compare the submitted password to encrypted password in database.\n  const candidateHashed = hashPassword(candidatePassword);\n  const decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n  return compare(candidateHashed, decryptedPass);\n};\n\nexport { encryptPassword, deAesHash, hashPassword, bcryptHash, aesHash, passwordsMatch };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/passwordEncryption.js","module.exports = require(\"bcrypt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bcrypt\"\n// module id = 23\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 24\n// module chunks = 0","import { encryptPassword, passwordsMatch } from './passwordEncryption';\nimport { appraisePassword, appraiseEmail, appraiseDisplayName } from '../../shared/helpers/appraise';\nimport { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { UserType } from './constants';\n\n/* A user is the core part of the system */\nmodule.exports = (sequelize, DataTypes) => {\n  const User = sequelize.define(\n    'User', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      userType: {\n        field: 'user_type',\n        type: DataTypes.ENUM,\n        values: [\n          UserType.NORMAL,\n          UserType.ADMIN,\n          UserType.CUSTSERVICE,\n          UserType.BANNED,\n          UserType.DEMO,\n        ],\n        defaultValue: UserType.NORMAL,\n        allowNull: false,\n      },\n      displayName: {\n        field: 'display_name',\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidDisplayName: function validateDisplayName(value) {\n            const appraisalMessages = appraiseDisplayName(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidEmail: function validateEmail(value) {\n            const appraisalMessages = appraiseEmail(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n        unique: true,\n      },\n      encryptedPasswordHash: {\n        field: 'encrypted_password_hash',\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n      encryptedPasswordPepperId: {\n        field: 'encrypted_password_pepperId',\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n      validatedAt: {\n        type: DataTypes.DATE,\n        field: 'validated_at',\n      },\n      validated: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      hooks: {\n        beforeValidate: function addId(user) {\n          if (!user.id) {\n            user.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      instanceMethods: {\n        setPassword: function setPassword(password) {\n          const self = this;\n          return Promise.resolve(appraisePassword(password))\n            .then(function checkAppraisal(appraisalMessages) {\n              if (appraisalMessages.length > 0) {\n                throw new Error(appraisalMessages.join(', '));\n              }\n              return password;\n            })\n            .then(function runHashing(passwordValue) {\n              return encryptPassword(passwordValue);\n            })\n            .then((encryptedValue) => {\n              self.encryptedPasswordHash = encryptedValue.encrypted;\n              self.encryptedPasswordPepperId = encryptedValue.pepperId;\n            })\n            .catch((err) => {\n              throw err;\n            });\n        },\n        toJSON: function stripValues() {\n          const values = Object.assign({}, this.get());\n          delete values.encryptedPasswordHash;\n          delete values.encryptedPasswordPepperId;\n          delete values.deletedAt;\n          return values;\n        },\n        // TODO: We really need a profile table but this works for now.\n        toProfile: function stripForProfile() {\n          const values = Object.assign({}, this.get());\n          delete values.encryptedPasswordHash;\n          delete values.encryptedPasswordPepperId;\n          delete values.email;\n          delete values.deletedAt;\n          return values;\n        },\n        comparePassword: function comparePass(candidate) {\n          return passwordsMatch(\n            candidate,\n            this.encryptedPasswordHash,\n            this.encryptedPasswordPepperId,\n          );\n        },\n        canActOnBehalfOf: function behalfOf(accountId) { // eslint-disable-line no-unused-vars\n          if (this.userType === UserType.ADMIN\n            || this.userType === UserType.CUSTSERVICE) {\n            return true;\n          }\n          return false;\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          User.hasMany(models.Post);\n          User.hasMany(models.Recipient);\n          User.hasMany(models.Media);\n          User.hasMany(models.Apprisal);\n          User.hasMany(models.UserValidation);\n        },\n      },\n    },\n  );\n  return User;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/UserModel.js","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\n\n/* A validation is a sent notification sent to a user or system of a new post.\n * Has an association with the Post object and the recipient that it will be sent to.\n * This would be called a notification in another system, but we are reserving that for future use.\n */\nconst UserValidationDefinition = (sequelize, DataTypes) => {\n  const UserValidation = sequelize.define(\n    'UserValidation', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      deliveredAt: {  // The date the item was either sent or pushed to service\n        type: DataTypes.DATE,\n        field: 'delivered_at',\n      },\n      visitedAt: { // The date the item was visited for the first time\n        type: DataTypes.DATE,\n        field: 'visited_at',\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(validation) {\n          if (!validation.id) {\n            validation.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          UserValidation.belongsTo(models.User);\n        },\n      },\n    },\n  );\n  return UserValidation;\n};\n\nexport default UserValidationDefinition;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/UserValidation.js","export const COOKIE_NAME_SESSION = 'snss';\nexport const COOKIE_NAME_INDICATE_SESSION = 'snssl';\nexport const COOKIE_NAME_HAS_LOGGED_IN = 'snsslih';\nexport const SITE_NAME = 'Social, not Social';\nexport const SITE_BETA = 'Beta';\nexport const SITE_PRIMARY1_COLOR = '#459691';\nexport const SITE_PRIMARY2_COLOR = '#47ad8a';\nexport const SITE_PRIMARY3_COLOR = '#grey400';\nexport const SITE_ACCENT1_COLOR = '#c94f49';\nexport const SITE_ACCENT2_COLOR = 'grey100';\nexport const SITE_ACCENT3_COLOR = 'grey500';\nexport const SITE_TEXT_COLOR = 'darkBlack';\nexport const SITE_ALT_TEXT_COLOR = 'darkBlack';\n\n\n\n// WEBPACK FOOTER //\n// ./src/globalConstants.js","export * from './Apprisal';\nexport * from './User';\nexport * from './Recipient';\nexport * from './Authentication';\nexport * from './Post';\nexport * from './Media';\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/index.js","import apprisalRoutes from './routes';\nimport * as ApprisalController from './controller';\n\nexport { apprisalRoutes, ApprisalController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Apprisal/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  getApprisalsEndpoint,\n  addApprisalEndpoint,\n  updateApprisalEndpoint,\n  removeApprisalEndpoint,\n} from './controller';\n\nconst routes = new Router();\nroutes.get('/apprisals', requireLogin(), getApprisalsEndpoint);\nroutes.post('/apprisals', requireLogin(), addApprisalEndpoint);\nroutes.put('/apprisals/:recipientId', requireLogin(), updateApprisalEndpoint);\nroutes.delete('/apprisals/:recipientId', requireLogin(), removeApprisalEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Apprisal/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Apprisal = models.Apprisal;\n\n/* Get all of the apprisals for the userId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the search parameters.\n */\nconst getApprisalsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Apprisal.findAllForUser(userId)\n    .then((apprisals) => {\n      const cleanApprisals = apprisals.map(function jsonify(apprisal) {\n        return apprisal.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        apprisals: cleanApprisals,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* -------------------------------------------------------\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * WARNING\n * TODO: This is pretty insecure.\n * 1. There is no test to make sure the apprised items (recipient, post) are owned by\n *     the userId adding the apprisal. There's probably a DB test/constraint that could be added.\n * 2. There's no abuse, speed prevention here. Probably should be. While we should allow someone to\n *    send multiple apprisals to recipients, there should be \"some\" time differential between them.\n *    Also, prevent DDOS through this. Since this triggers the email, this is the place to look.\n *\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * -------------------------------------------------------\n*/\n\n/* Adds a set of apprisals to the Apprisals database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} postId - the post to apprise\n *   @param {array} recipients - array of objects {recipientId, canRespond}\n *   @param {string} recipientId - the identifier for the recipient.\n *   @param {bool} canRespond - Overrides the default for the recipient\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst addApprisalEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { postId, recipients } = req.body;\n  if (!(recipients && Array.isArray(recipients) && recipients.length > 0)) {\n    res.statusMessage = 'Could not process body.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const apprisals = [];\n  recipients.forEach(function newApprisal(recipientInfo) {\n    let canRespond = true;\n    if (typeof recipientInfo.canRespond !== 'undefined') {\n      canRespond = recipientInfo.canRespond;\n    }\n    apprisals.push(\n      new Promise((resolve) => {\n        Apprisal.create({\n          post_id: postId,\n          recipient_id: recipientInfo.recipientId,\n          canRespond: canRespond,\n          user_id: userId,\n        }).then(apprisal => resolve(apprisal));\n      }),\n    );\n  });\n  Promise.all(apprisals)\n    .then((createdApprisals) => {\n      const cleanApprisals = createdApprisals.map(function jsonify(apprisal) {\n        return apprisal.toJSON();\n      });\n      console.log(`What we created. Length: ${createdApprisals.length}`);\n      console.dir(createdApprisals);\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created apprisal',\n        apprisal: cleanApprisals,\n      });\n    })\n    .catch((err) => {\n      console.log('Apprisal creation error: ');\n      console.dir(err);\n      let errorMessage = 'Apprisal could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates an apprisal - can only update the canRespond value\n * Params needed in req.body:\n *   @param {bool=} canRespond - Overrides the default for the recipient\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) apprisalId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} userId - Will be pulled from req.user.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst updateApprisalEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let apprisalId = req.params.apprisalId;\n  if (req.body.apprisalId) {\n    apprisalId = req.body.apprisalId;\n  }\n  if (!apprisalId) {\n    res.statusMessage = 'No apprisalId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const updates = {};\n  if (typeof req.body.canRespond !== 'undefined') {\n    updates.canRespond = req.body.canRespond;\n  }\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Apprisal.updateApprisal(apprisalId, userId, updates)\n    .then((updatedApprisal) => {\n      if (!updatedApprisal) {\n        res.statusMessage = 'Apprisal was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(200).json({\n        success: true,\n        message: 'Successfully updated apprisal',\n        apprisal: updatedApprisal.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Apprisal update error: ');\n      console.dir(err);\n      let errorMessage = 'Apprisal could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes an apprisal (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) apprisalId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n *  @returns status 204 on success and 422 on error or 404 if Apprisal to update is not found.\n */\nconst removeApprisalEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let apprisalId = req.params.apprisalId;\n  if (req.body.apprisalId) {\n    apprisalId = req.body.apprisalId;\n  }\n  if (!apprisalId) {\n    res.statusMessage = 'No apprisalId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Apprisal.deleteApprisal(apprisalId, userId)\n    .then((removedItem) => {\n      if (!removedItem) {\n        res.statusMessage = 'Apprisal was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Apprisal could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getApprisalsEndpoint,\n  addApprisalEndpoint,\n  updateApprisalEndpoint,\n  removeApprisalEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Apprisal/controller.js","import sessionsRoutes from './routes';\nimport proxyUserId from './proxyUser';\nimport {\n  validateUserSession,\n  createUserSession,\n  destroyUserSession,\n  authenticateUser,\n  requireLogin,\n} from './warrant';\n\nexport {\n  sessionsRoutes,\n  validateUserSession,\n  createUserSession,\n  destroyUserSession,\n  authenticateUser,\n  requireLogin,\n  proxyUserId,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/index.js","/* Sessions endpoint creates sessions\n *  These would be equivalent to login/logout\n */\nimport { Router } from 'express';\nimport { authenticateUser, destroyUserSession } from './warrant';\n\nconst routes = new Router();\n\n/* Calls authenticateUser to log in a user */\nfunction signinUser(req, res) {\n  const body = req.body;\n  authenticateUser(req, res, body)\n  .then((user) => {\n    res.status(201).json({\n      success: true,\n      message: 'Logged in',\n      user: user,\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n    res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n}\n\nroutes.route('/sessions')\n  .post(signinUser);\n\n\n/* Clears the session info, effectively logging out a user */\nroutes.route('/sessions')\n  .delete(function logThemOut(req, res) {\n    destroyUserSession(req, res);\n    res.status(204).end();\n  });\n\n/* Checks if a user is currently authenticated.\n */\nroutes.route('/sessions')\n  .get(function isAuthenticated(req, res) {\n    if (req.user) {\n      res.status(204).end();\n      return;\n    }\n    res.status(403).end();\n  });\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/routes.js","/* Returns either the current user's id or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current user can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} userId - the id to use in actions.\n */\nconst proxyUserId = function getAccount(req) {\n  const currentUser = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.id) {\n    return req.user.id;\n  }\n  return null;\n};\n\nexport default proxyUserId;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/proxyUser.js","import userRoutes from './routes';\nimport * as UserController from './controller';\n\nexport { userRoutes, UserController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/User/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  addUserEndpoint,\n  getUserInfoEndpoint,\n  updateUserEndpoint,\n  updatePasswordEndpoint,\n} from './controller';\n\nconst routes = new Router();\n\nroutes.route('/users')\n  .post(addUserEndpoint);\n\nroutes.get('/users', requireLogin(), getUserInfoEndpoint);\nroutes.put('/users', requireLogin(), updateUserEndpoint);\nroutes.put('/passwords', requireLogin(), updatePasswordEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/User/routes.js","import { createUserSession, destroyUserSession } from '../Authentication/warrant';\n\nimport { models } from '../../models';\n\nconst User = models.User;\n\n/* Returns either the current user's id or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current user can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user attached\n *  @returns {string} id - a user id to use in searches.\n *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n */\nconst activeUsertId = function getUser(req) {\n  const currentUser = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.id) {\n    return req.user.id;\n  }\n  return null;\n};\n\n/* Adds an user to the Users database based on the fields passed in.\n * Params needed in body:\n *   @param {string} email - the email address\n *   @param {string} password - the user's password. Must pass owasp tests.\n *   @param {string} displayName - the name to display on the user's page.\n */\nconst addUserEndpoint = (req, res) => {\n  console.log('user');\n  console.dir(models);\n\n  const { email, password, displayName } = req.body;\n  const newUser = User.build({\n    email: email,\n    displayName: displayName,\n  });\n  newUser.setPassword(password)\n    .then(() => { // eslint-disable-line arrow-body-style\n      return newUser.save();\n    })\n    .then((createdUser) => {\n      console.log('Created User');\n      createUserSession(req, res, createdUser);\n      console.log('Finished login');\n      const cleanUser = createdUser.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully Registered',\n        user: cleanUser,\n      });\n    })\n    .catch((err) => {\n      destroyUserSession(req, res);\n      console.log(err);\n      console.dir(err);\n      // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n      if (err.code === 11000) {\n        res.statusMessage = 'User with that email already exists'; // eslint-disable-line no-param-reassign\n        res.status(409).end();\n        return;\n      }\n      let errorMessage = 'User could not be created.';\n      if (err.message) {\n        errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      // TODO: Return errors better. The err object has an errors array that could be parsed.\n      res.status(422).send(JSON.stringify({ errors: err.message }));\n    });\n};\n\n/* Get user info for id.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The user's id to act on behalf of if current user\n *      can act on behalf of it.\n *  @param {number} id of user - Will be pulled from req.user.\n *  Uses activeUsertId() to get the search parameters.\n */\nconst getUserInfoEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = activeUsertId(req);\n  if (!userId) {\n    return res.status(422).json({ success: false, message: 'Not logged in.' });\n  }\n  User.findById(userId)\n    .then((item) => {\n      const cleanedItem = item.toJSON();\n      res.status(201).json({\n        success: true,\n        user: cleanedItem,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Update user info\n * Requires values in the body of the req.\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n * Possible options (not all have to be passed):\n *     @param {String} email - the new email address\n *      TODO: validate the new email\n *     @param {String} displayName - the new displayName\n */\nconst updateUserEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = activeUsertId(req);\n  if (!userId) {\n    return res.status(422).json({ success: false, message: 'Not logged in.' });\n  }\n  const { email, displayName } = req.body;\n  User.findById(userId)\n    .then((item) => {\n      const foundUser = item;\n      if (email && email.length > 0) {\n        foundUser.email = email;\n      }\n      if (displayName && displayName.length > 0) {\n        foundUser.displayName = displayName;\n      }\n      return foundUser.save();\n    })\n    .then((user) => {\n      const cleanedUser = user.toJSON();\n      res.status(200).json({\n        success: true,\n        user: cleanedUser,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Update password endpoint\n * Requires old and new password.\n * First validates current password then updates to the new password.\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n *  Required in req object:\n *     @param {String} password - the current password\n *     @param {String} newPassword - the new password\n */\nconst updatePasswordEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = activeUsertId(req);\n  if (!userId) {\n    return res.status(422).json({ success: false, message: 'Not logged in.' });\n  }\n  const { password, newPassword } = req.body;\n  let foundUser = null;\n  User.findById(userId)\n    .then(function comparePass(theUser) {\n      foundUser = theUser;\n      return theUser.comparePassword(password);\n    })\n    .then(function wasPasswordValid(passwordsMatched) {\n      if (!passwordsMatched) {\n        throw new Error('Could not verify user');\n      }\n      return foundUser;\n    })\n    .then(function updatePass() {\n      return foundUser.setPassword(newPassword);\n    })\n    .then(function saveUser() {\n      return foundUser.save();\n    })\n    .then(function returnCompleted() {\n      res.status(200).end();\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\nexport {\n  addUserEndpoint,\n  getUserInfoEndpoint,\n  updateUserEndpoint,\n  updatePasswordEndpoint,\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/User/controller.js","import recipientRoutes from './routes';\nimport * as RecipientController from './controller';\n\nexport { recipientRoutes, RecipientController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  getRecipientsEndpoint,\n  addRecipientEndpoint,\n  updateRecipientEndpoint,\n  removeRecipientEndpoint,\n} from './controller';\n\nconst routes = new Router();\nroutes.get('/recipients', requireLogin(), getRecipientsEndpoint);\nroutes.post('/recipients', requireLogin(), addRecipientEndpoint);\nroutes.put('/recipients/:recipientId', requireLogin(), updateRecipientEndpoint);\nroutes.delete('/recipients/:recipientId', requireLogin(), removeRecipientEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Recipient = models.Recipient;\n\n/* Get all of the recipients for the userId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the search parameters.\n */\nconst getRecipientsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Recipient.findAllForUser(userId)\n    .then((recipients) => {\n      const cleanRecipients = recipients.map(function jsonify(recipient) {\n        return recipient.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        recipients: cleanRecipients,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds an recipient to the Recipients database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} email - the email address\n *   @param {string} displayName - the displayName for the recipient.\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst addRecipientEndpoint = (req, res) => {\n  const { email, displayName, canRespond, type } = req.body;\n  const userId = proxyUserId(req);\n  const newRecipient = Recipient.build({\n    email: email,\n    displayName: displayName,\n    canRespond: canRespond,\n    type: type,\n    user_id: userId,\n  });\n  newRecipient.save()\n    .then((createdRecipient) => {\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created recipient',\n        recipient: createdRecipient.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient creation error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a recipient\n * Params needed in req.body:\n *   @param {string=} email (optional) - the email address to update.\n *   @param {string=} displayName (optional) - the displayName to update.\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} userId - Will be pulled from req.user.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst updateRecipientEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let recipientId = req.params.recipientId;\n  if (req.body.recipientId) {\n    recipientId = req.body.recipientId;\n  }\n  if (!recipientId) {\n    res.statusMessage = 'No recipientId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { email, displayName, status, canRespond, type } = req.body;\n  const updates = {};\n  if (email && email.length > 0) updates.email = email;\n  if (displayName && displayName.length > 0) updates.displayName = displayName;\n  if (status && status.length > 0) updates.status = status;\n  if (type && type.length > 0) updates.type = type;\n  if (typeof canRespond !== 'undefined') {\n    updates.canRespond = canRespond;\n  }\n\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Recipient.updateRecipient(recipientId, userId, updates)\n    .then((updatedRecipient) => {\n      if (!updatedRecipient) {\n        res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(200).json({\n        success: true,\n        message: 'Successfully updated recipient',\n        recipient: updatedRecipient.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient update error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a recipient (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n *  @returns status 204 on success and 422 on error or 404 if Recipient to update is not found.\n */\nconst removeRecipientEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.recipientId;\n  if (req.body.recipientId) {\n    itemId = req.body.recipientId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No recipientId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Recipient.deleteRecipient(itemId, userId)\n    .then((removedItem) => {\n      if (!removedItem) {\n        res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Recipient could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getRecipientsEndpoint,\n  addRecipientEndpoint,\n  updateRecipientEndpoint,\n  removeRecipientEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/controller.js","import postRoutes from './routes';\nimport * as PostController from './controller';\n\nexport { postRoutes, PostController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/index.js","import { Router } from 'express';\nimport {\n  getPostsEndpoint,\n  getAPostEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n} from './controller';\nimport { requireLogin } from '../Authentication/warrant';\n\nconst routes = new Router();\nroutes.get('/posts', requireLogin(), getPostsEndpoint);\nroutes.get('/posts/:postId', requireLogin(), getAPostEndpoint);\nroutes.post('/posts', requireLogin(), addPostEndpoint);\nroutes.put('/posts/:postId', requireLogin(), updatePostEndpoint);\nroutes.delete('/posts/:postId', requireLogin(), removePostEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Post = models.Post;\nconst Apprisal = models.Apprisal;\n\n\n/* Get all of the posts for the userId.\n * Params needed in req.body:\n *   @param {number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search user.\n */\nconst getPostsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.findAllForUser(\n    userId,\n    {\n      includeTables:\n      [{\n        model: Apprisal,\n      }],\n    })\n    .then((items) => {\n      const cleanedItems = items.map(function jsonify(mappedItem) {\n        return mappedItem.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        posts: cleanedItems,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Get a specific post for userId.\n * Params needed in req.body:\n *   @param {number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search user.\n *  @param {string} postId - the post to search for can be in body or params\n */\nconst getAPostEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let postId = req.params.postId;\n  if (req.body.postId) {\n    postId = req.body.postId;\n  }\n  if (!postId) {\n    res.statusMessage = 'No post id provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.findOne({ where: { id: postId, user_id: userId } })\n    .then((item) => {\n      if (!item) {\n        res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(200).json({\n        success: true,\n        post: item.toJSON(),\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds a post to the Post database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} message - the main message body\n *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to post under.\n */\nconst addPostEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { message, status, mediaIds } = req.body;\n  const newPost = Post.build({\n    message: message,\n    status: status,\n    user_id: userId,\n  });\n  let createdId = null;\n  newPost.save()\n    .then((createdItem) => {\n      createdId = createdItem.id;\n      console.log('created item');\n      console.dir(createdItem);\n      if (mediaIds && mediaIds.length > 0) {\n        return createdItem.setMedia(mediaIds);\n      }\n      console.log('Got here, but maybe should not have');\n      return createdItem;\n    })\n    .then(() => {\n      console.log('We set media, now for find and associate');\n      return Post.find({\n        where: { id: createdId },\n      });\n    })\n    .then((createdItem) => {\n      console.log('created item');\n      console.dir(JSON.stringify(createdItem));\n      const cleanedPost = createdItem.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created post',\n        post: cleanedPost,\n      });\n    })\n    .catch((err) => {\n      let errorMessage = 'Post could not be created.';\n      if (err.code === 11000) {\n        errorMessage = 'Post already exists';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a post\n *   @param {string} message - the main message body\n *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to map.\n */\nconst updatePostEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No post id provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { message, mediaIds, status } = req.body;\n  const updates = {};\n  if (message && message.length > 0) updates.message = message;\n  if (status && status.length > 0) updates.status = status;\n  if (mediaIds && mediaIds.length > 0) updates.mediaIds = mediaIds;\n\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.updatePost(itemId, userId, updates)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(200).json({\n        success: true,\n        message: 'Successfully updated post',\n        post: updatedItem.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.dir(err);\n      let errorMessage = 'Post could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a post (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst removePostEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.deletePost(itemId, userId)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Post could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getPostsEndpoint,\n  getAPostEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/controller.js","import mediaRoutes from './routes';\nimport * as MediaController from './controller';\n\nexport { mediaRoutes, MediaController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Media/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  getMediaEndpoint,\n  addMediumEndpoint,\n  updateMediumEndpoint,\n  removeMediumEndpoint,\n} from './controller';\n\nconst routes = new Router();\nroutes.get('/media', requireLogin(), getMediaEndpoint);\nroutes.post('/media', requireLogin(), addMediumEndpoint);\nroutes.put('/media/:mediaId', requireLogin(), updateMediumEndpoint);\nroutes.delete('/media/:mediaId', requireLogin(), removeMediumEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Media/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Media = models.Media;\n\n/* Get all of the media for the user.id.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the search parameters.\n */\nconst getMediaEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Media.findAllForUser(userId)\n    .then((media) => {\n      const cleanMedia = media.map(function jsonify(medium) {\n        return medium.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        media: cleanMedia,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds an media item to the Media database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} url - the email address\n *   @param {string} type - the type of media.\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst addMediumEndpoint = (req, res) => {\n  const { url, type } = req.body;\n  const userId = proxyUserId(req);\n  const newItem = Media.build({\n    url: url,\n    type: type,\n    user_id: userId,\n  });\n  newItem.save()\n    .then((createdMedia) => {\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created media item',\n        media: createdMedia.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Media item creation error: ');\n      console.dir(err);\n      let errorMessage = 'Media item could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a media item\n * Params needed in req.body:\n *   @param {string} url - the email address\n *   @param {string} type - the type of media.\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) mediaId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst updateMediumEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let mediaId = req.params.mediaId;\n  if (req.body.mediaId) {\n    mediaId = req.body.mediaId;\n  }\n  const { url, type } = req.body;\n  if (!mediaId) {\n    res.statusMessage = 'No mediaId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n\n  const updates = {};\n  if (url && url.length > 0) updates.url = url;\n  if (type && type.length > 0) updates.type = type;\n\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Media.updateMedia(mediaId, userId, updates)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(200).json({\n        success: true,\n        message: 'Successfully updated media',\n        media: updatedItem.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Media update error: ');\n      console.dir(err);\n      let errorMessage = 'Media could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a media\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst removeMediumEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.mediaId;\n  if (req.body.mediaId) {\n    itemId = req.body.mediaId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No mediaId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Media.deleteMedia(itemId, userId)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Media could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getMediaEndpoint,\n  addMediumEndpoint,\n  updateMediumEndpoint,\n  removeMediumEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Media/controller.js","import dotenv from 'dotenv';\nimport requireEnv from 'require-environment-variables';\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n *\n * However, we aren't going to load these in production as it could lead to sloppy deploys.\n */\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  console.log(`Environment: ${process.env.NODE_ENV} - loading DEV environment vars.`);\n  dotenv.load();\n} else if (process.env.NODE_ENV && process.env.NODE_ENV === 'test') {\n  console.log('Environment: loading TEST environment vars.');\n  dotenv.load({ path: './envTest' });\n} else {\n  console.log(`Environment: did NOT load environment variables from .env for ${process.env.NODE_ENV}. This is not a problem if you define your environment variables outside of the file system as you should.`);\n}\n\n/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n *   the process exits with code 400.\n * https://github.com/bjoshuanoah/require-environment-variables\n */\nrequireEnv([\n  'REDIS_URL',\n  'DATABASE_URL',\n  'MAIN_SERVER_PORT',\n  'ACCOUNT_PEPPER_1',\n  'ACCOUNT_ENCRYPT_CURRENT_PEPPER',\n  'IDIER_WORKER_ID',\n  'TOKEN_PEPPER_1',\n  'TOKEN_ENCRYPT_CURRENT_PEPPER',\n  'SESSION_SECRET',\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/environment.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 48\n// module chunks = 0","module.exports = require(\"require-environment-variables\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"require-environment-variables\"\n// module id = 49\n// module chunks = 0","import redis from 'redis';\n\nconst REDIS_URL = process.env.REDIS_URL;\n\n/* Connect to redis */\nconst redisClient = redis.createClient(REDIS_URL);\n\nredisClient.on('error', function redisErrorReport(err) {\n  console.log(`Redis connection error ${err}`);\n});\n\nexport default redisClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/redisConnect.js","module.exports = require(\"redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"redis\"\n// module id = 51\n// module chunks = 0","module.exports = require(\"connect-redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"connect-redis\"\n// module id = 52\n// module chunks = 0"],"sourceRoot":""}