{"version":3,"sources":["webpack:///server.js","webpack:///webpack/bootstrap ccf5968cb85eaa84855b","webpack:///./src/apiserver/apiserver.js","webpack:///external \"http\"","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"express-session\"","webpack:///external \"morgan\"","webpack:///external \"chalk\"","webpack:///./src/apiserver/modules/Authentication/warrant.js","webpack:///./src/apiserver/models/index.js","webpack:///external \"sequelize\"","webpack:///./src/apiserver/models/ApprisalModel.js","webpack:///./src/shared/helpers/idier.js","webpack:///external \"base58\"","webpack:///external \"generate-password\"","webpack:///./src/apiserver/models/MediaModel.js","webpack:///./src/apiserver/models/constants.js","webpack:///./src/apiserver/models/PostModel.js","webpack:///./src/apiserver/models/RecipientModel.js","webpack:///./src/shared/helpers/appraise.js","webpack:///external \"validator\"","webpack:///external \"owasp-password-strength-test\"","webpack:///./src/apiserver/models/passwordEncryption.js","webpack:///external \"bcrypt\"","webpack:///external \"crypto\"","webpack:///./src/apiserver/models/UserModel.js","webpack:///./src/apiserver/models/UserValidation.js","webpack:///./src/apiserver/modules/index.js","webpack:///./src/apiserver/modules/User/index.js","webpack:///./src/apiserver/modules/User/routes.js","webpack:///./src/apiserver/modules/User/controller.js","webpack:///./src/apiserver/modules/Recipient/index.js","webpack:///./src/apiserver/modules/Recipient/routes.js","webpack:///./src/apiserver/modules/Recipient/controller.js","webpack:///./src/apiserver/modules/Authentication/index.js","webpack:///./src/apiserver/modules/Authentication/routes.js","webpack:///./src/apiserver/modules/Authentication/proxyUser.js","webpack:///./src/apiserver/modules/Post/index.js","webpack:///./src/apiserver/modules/Post/routes.js","webpack:///./src/apiserver/modules/Post/controller.js","webpack:///./src/apiserver/modules/Media/index.js","webpack:///./src/apiserver/modules/Media/routes.js","webpack:///./src/apiserver/modules/Media/controller.js","webpack:///./src/config/environment.js","webpack:///external \"dotenv\"","webpack:///external \"require-environment-variables\"","webpack:///./src/config/redisConnect.js","webpack:///external \"redis\"","webpack:///external \"connect-redis\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_http","_bodyParser","_bodyParser2","_express","_express2","_expressSession","_expressSession2","_morgan","_morgan2","_chalk","_chalk2","_warrant","_modules","_redisConnect","_redisConnect2","RedisStore","port","process","env","API_SERVER_PORT","app","use","err","req","res","next","headersSent","status","render","json","urlencoded","extended","name","secret","SESSION_SECRET","resave","saveUninitialized","store","client","validateUserSession","userRoutes","recipientRoutes","sessionsRoutes","postRoutes","mediaRoutes","get","send","on","console","log","close","quit","server","Server","listen","error","red","bold","green","require","Object","defineProperty","value","requireLogin","authenticateUser","destroyUserSession","createUserSession","undefined","_models","User","models","user","cleanUser","displayName","email","userType","validated","session","locals","cookie","httpOnly","destroy","clearCookie","findById","then","UserType","BANNED","body","password","Error","foundUser","find","where","theUser","comparePassword","passwordsMatched","statusMessage","end","RecipientStatus","RecipientType","MAX_POST_SEARCH_RETURN_LIMIT","PostStatus","MediaType","_sequelize","_sequelize2","_ApprisalModel","_ApprisalModel2","_MediaModel","_MediaModel2","_PostModel","_PostModel2","_RecipientModel","_RecipientModel2","_UserModel","_UserModel2","_UserValidation","_UserValidation2","_constants","allConfigs","development","username","database","host","dialect","test","production","config","sequelize","DATABASE_URL","db","authenticate","apprisalModel","mediaModel","postModel","recipientModel","userModel","userValidationModel","keys","forEach","modelName","associate","sync","Sequelize","_idier","DataTypes","Apprisal","define","type","BIGINT","field","primaryKey","deliveredAt","DATE","firstOpenedAt","firstViewedAt","canRespond","BOOLEAN","defaultValue","underscored","paranoid","timestamps","hooks","beforeValidate","apprisal","idier","classMethods","belongsTo","Post","foreignKey","allowNull","onDelete","Recipient","passGen","toNumericId","toHumanId","_base","_base2","_generatePassword","_generatePassword2","mySequence","globalSeq","global","idierSequence","workerId","IDIER_WORKER_ID","Math","floor","random","timeStamp","Date","now","randomnumber","snowflake","snowflakeInt","parseInt","idNumber","encoded","encode","idString","decoded","decode","length","arguments","numbers","exclude","generate","strict","Media","url","STRING","validate","isUrl","ENUM","values","PHOTO","VIDEO","width","INTEGER","height","size","media","belongsToMany","through","totalForUser","userId","findAndCountAll","user_id","updateRecipient","updates","findOne","foundItem","foundMedia","fieldsToUpdateKeys","key","save","deleteMedia","thisMedia","NORMAL","ADMIN","CUSTSERVICE","DEMO","DRAFT","POSTED","REMOVED","EMAIL","TEXT","POST","FACEBOOK","VALIDATING","ACTIVE","BOUNCING","UNSUBSCRIBED","message","edited","post","hasMany","findAllForUser","options","limit","offset","beforeId","includeTables","whereClause","Number","$lt","limiter","order","include","this","findAll","updatePost","foundPost","deletePost","thisPost","_appraise","_passwordEncryption","isValidEmail","appraisalMessages","appraiseEmail","join","accessTokenEncrypted","accessTokenPepper","validatedAt","unsubscribedAt","unsubscribedReason","indexes","unique","fields","recipient","accessToken","token","setAccessToken","instanceMethods","self","encryptedValue","aesHash","TOKEN_ENCRYPT_CURRENT_PEPPER","encrypted","pepperId","getAccessToken","deAesHash","toJSON","assign","deletedAt","userWhere","beforeIdWhere","limitClause","offsetClause","orderClause","queryJSON","query","JSON","parse","foundRecipient","deleteRecipient","thisRecipient","appraisePostMessage","appraiseAccountId","appraisePasswordErrors","appraisePasswordExtra","appraisePassword","appraiseDisplayName","appraiseThese","_validator","_owaspPasswordStrengthTest","_owaspPasswordStrengthTest2","emailAddress","messages","isEmpty","push","isEmail","owaspResults","strong","concat","errors","minLength","maxLength","repeating","needLowercase","needUppercase","needNumber","needCharacter","accountId","what","appraised","success","tested","postMessage","passwordsMatch","bcryptHash","hashPassword","encryptPassword","_bcrypt","_crypto","_crypto2","hasher","createHash","update","hashed","digest","passwordhash","saltRounds","hash","toEncrypt","ACCOUNT_ENCRYPT_CURRENT_PEPPER","currentPepperId","pepper","algorithm","cipher","createCipher","crypted","final","rawPassword","Promise","resolve","toDecrypt","decipher","createDecipher","decrypted","candidatePassword","encryptedPasswordHash","candidateHashed","decryptedPass","compare","isValidDisplayName","notEmpty","encryptedPasswordPepperId","setPassword","passwordValue","catch","toProfile","candidate","canActOnBehalfOf","UserValidation","UserValidationDefinition","visitedAt","validation","_User","enumerable","_Recipient","_Authentication","_Post","_Media","_interopRequireWildcard","newObj","prototype","hasOwnProperty","UserController","_routes","_routes2","_controller","routes","Router","route","addUserEndpoint","getUserInfoEndpoint","put","updateUserEndpoint","updatePasswordEndpoint","activeUsertId","currentUser","onBehalfOfId","dir","_req$body","newUser","build","createdUser","code","errorMessage","replace","stringify","item","cleanedItem","_req$body2","cleanedUser","_req$body3","newPassword","RecipientController","getRecipientsEndpoint","addRecipientEndpoint","updateRecipientEndpoint","delete","removeRecipientEndpoint","proxyUserId","recipients","cleanRecipients","map","newRecipient","createdRecipient","recipientId","params","updatedRecipient","itemId","updatedItem","_proxyUser","_proxyUser2","signinUser","PostController","getPostsEndpoint","addPostEndpoint","updatePostEndpoint","removePostEndpoint","model","attributes","items","cleanedItems","mappedItem","posts","mediaIds","newPost","createdId","createdItem","setMedia","cleanedPost","postId","MediaController","getMediaEndpoint","addMediumEndpoint","updateMediumEndpoint","removeMediumEndpoint","cleanMedia","medium","newItem","createdMedia","mediaId","updateMedia","_dotenv","_requireEnvironmentVariables","_requireEnvironmentVariables2","_redis","_redis2","REDIS_URL","redisClient","createClient"],"mappings":"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","file":"server.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _http = __webpack_require__(1);\n\t\n\tvar _bodyParser = __webpack_require__(2);\n\t\n\tvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tvar _expressSession = __webpack_require__(4);\n\t\n\tvar _expressSession2 = _interopRequireDefault(_expressSession);\n\t\n\tvar _morgan = __webpack_require__(5);\n\t\n\tvar _morgan2 = _interopRequireDefault(_morgan);\n\t\n\tvar _chalk = __webpack_require__(6);\n\t\n\tvar _chalk2 = _interopRequireDefault(_chalk);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _modules = __webpack_require__(26);\n\t\n\t__webpack_require__(42);\n\t\n\tvar _redisConnect = __webpack_require__(45);\n\t\n\tvar _redisConnect2 = _interopRequireDefault(_redisConnect);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Configurations */\n\t/* Base imports */\n\tvar RedisStore = __webpack_require__(47)(_expressSession2.default);\n\t\n\t/* Routes */\n\t\n\t\n\tvar port = process.env.API_SERVER_PORT;\n\tif (!port) {\n\t  port = 3006;\n\t}\n\t\n\tvar app = (0, _express2.default)();\n\t\n\t/* Middleware setup */\n\tapp.use(function (err, req, res, next) {\n\t  if (res.headersSent) next(err);\n\t  res.status(err.status || port).render('500');\n\t});\n\tapp.use(_bodyParser2.default.json());\n\tapp.use(_bodyParser2.default.urlencoded({ extended: true }));\n\tapp.use((0, _expressSession2.default)({\n\t  name: 'snss',\n\t  secret: process.env.SESSION_SECRET,\n\t  resave: true,\n\t  saveUninitialized: false,\n\t  store: new RedisStore({ client: _redisConnect2.default })\n\t}));\n\tapp.use(_warrant.validateUserSession);\n\tapp.use((0, _morgan2.default)('combined'));\n\t\n\t/* Routes */\n\t// app.use('/api/v1', [userRoutes, recipientRoutes, authenticationRoutes, postRoutes]);\n\tapp.use('/api/v1', [_modules.userRoutes, _modules.recipientRoutes, _modules.sessionsRoutes, _modules.postRoutes, _modules.mediaRoutes]);\n\t\n\tapp.get('/', function baseReturn(req, res) {\n\t  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n\t});\n\t\n\tprocess.on('SIGTERM', function () {\n\t  console.log('Closing server.');\n\t  app.close();\n\t});\n\t\n\tapp.on('close', function () {\n\t  console.log('Closing redis.');\n\t  _redisConnect2.default.quit();\n\t});\n\t\n\t/* Start the API Server */\n\tvar server = (0, _http.Server)(app);\n\tserver.listen(port, function reportOnListen(error) {\n\t  if (error) {\n\t    console.log(_chalk2.default.red('API Server ERROR on startup: ' + error));\n\t  } else {\n\t    console.log(_chalk2.default.bold.green('API Server listening on http://localhost:' + port + '.'));\n\t  }\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"body-parser\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express-session\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"morgan\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"chalk\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.requireLogin = exports.authenticateUser = exports.destroyUserSession = exports.createUserSession = exports.validateUserSession = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar User = _models.models.User;\n\t\n\t// ideas from https://github.com/rdegges/svcc-auth\n\t\n\t/* eslint-disable no-param-reassign */\n\t\n\t/* Stores user data in the session and sets related cookies\n\t *  - Store the user object as a req.user\n\t *  - Set a session cookie with the user object\n\t *\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t *  @param {Object} user - A user object.\n\t */\n\tvar createUserSession = function createUserSession(req, res, user) {\n\t  var cleanUser = {\n\t    id: user.id,\n\t    displayName: user.displayName,\n\t    email: user.email,\n\t    userType: user.userType,\n\t    validated: user.validated\n\t  };\n\t\n\t  req.session.user = cleanUser;\n\t  req.user = cleanUser;\n\t  res.locals.user = cleanUser;\n\t  res.cookie('snssl', 'y', { httpOnly: false }); // Does the user have a session.\n\t};\n\t\n\t/* Destroy a user session\n\t * Removes the session and related cookies.\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t *  @param {Object} user - A user object.\n\t */\n\t/* eslint-disable no-unused-vars */\n\tvar destroyUserSession = function destroyUserSession(req, res, user) {\n\t  if (req.session) {\n\t    req.session.destroy();\n\t    res.clearCookie('snssl');\n\t  }\n\t};\n\t/* eslint-enable no-unused-vars */\n\t\n\t/**\n\t * A simple authentication middleware for Express.\n\t *\n\t * This middleware will load users from session data, and handle all user\n\t * proxying for convenience.\n\t * TODO: We're hitting the db every session. Store more data in session? Then, how to ban?\n\t */\n\tvar validateUserSession = function validateUserSession(req, res, next) {\n\t  if (req.session && req.session.user) {\n\t    User.findById(req.session.user.id).then(function (user) {\n\t      if (user) {\n\t        if (user.userType === _models.UserType.BANNED) {\n\t          destroyUserSession(req, res, user);\n\t          next();\n\t        }\n\t        createUserSession(req, res, user);\n\t      }\n\t      next();\n\t    });\n\t  } else {\n\t    next();\n\t  }\n\t};\n\t\n\t/* Authenticates a user with email and password.\n\t * Creates a session on valid authentication.\n\t */\n\tvar authenticateUser = function authenticateUser(req, res, body) {\n\t  var email = body.email;\n\t  var password = body.password;\n\t  if (!email || !password) {\n\t    var err = new Error('Email and password required.');\n\t    throw err;\n\t  }\n\t  var foundUser = null;\n\t  return User.find({ where: { email: email } }).then(function checkForUser(theUser) {\n\t    if (theUser) {\n\t      return theUser;\n\t    }\n\t    throw new Error('Could not verify account');\n\t  }).then(function comparePass(theUser) {\n\t    foundUser = theUser;\n\t    return theUser.comparePassword(password);\n\t  }).then(function returnAccount(passwordsMatched) {\n\t    if (!passwordsMatched) {\n\t      throw new Error('Could not verify account');\n\t    }\n\t    createUserSession(req, res, foundUser);\n\t    return foundUser;\n\t  });\n\t};\n\t\n\t/**\n\t * Ensure a user is logged in before allowing them to continue their request.\n\t *\n\t * If a user isn't logged in, they'll be sent a 403.\n\t */\n\tvar requireLogin = function requireLogin() {\n\t  return function areWeAuthenticated(req, res, next) {\n\t    if (req && !req.user) {\n\t      res.statusMessage = 'Requires login.'; // eslint-disable-line no-param-reassign\n\t      res.status(403).end();\n\t    } else {\n\t      next();\n\t    }\n\t  };\n\t};\n\t\n\t/* eslint-enable no-param-reassign */\n\texports.validateUserSession = validateUserSession;\n\texports.createUserSession = createUserSession;\n\texports.destroyUserSession = destroyUserSession;\n\texports.authenticateUser = authenticateUser;\n\texports.requireLogin = requireLogin;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.RecipientStatus = exports.RecipientType = exports.MAX_POST_SEARCH_RETURN_LIMIT = exports.PostStatus = exports.MediaType = exports.UserType = exports.models = undefined;\n\t\n\tvar _sequelize = __webpack_require__(9);\n\t\n\tvar _sequelize2 = _interopRequireDefault(_sequelize);\n\t\n\tvar _chalk = __webpack_require__(6);\n\t\n\tvar _chalk2 = _interopRequireDefault(_chalk);\n\t\n\tvar _ApprisalModel = __webpack_require__(10);\n\t\n\tvar _ApprisalModel2 = _interopRequireDefault(_ApprisalModel);\n\t\n\tvar _MediaModel = __webpack_require__(14);\n\t\n\tvar _MediaModel2 = _interopRequireDefault(_MediaModel);\n\t\n\tvar _PostModel = __webpack_require__(16);\n\t\n\tvar _PostModel2 = _interopRequireDefault(_PostModel);\n\t\n\tvar _RecipientModel = __webpack_require__(17);\n\t\n\tvar _RecipientModel2 = _interopRequireDefault(_RecipientModel);\n\t\n\tvar _UserModel = __webpack_require__(24);\n\t\n\tvar _UserModel2 = _interopRequireDefault(_UserModel);\n\t\n\tvar _UserValidation = __webpack_require__(25);\n\t\n\tvar _UserValidation2 = _interopRequireDefault(_UserValidation);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar allConfigs = {\n\t  development: {\n\t    username: 'mdw',\n\t    password: null,\n\t    database: 'socialnotsocial',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  },\n\t  test: {\n\t    username: 'root',\n\t    password: null,\n\t    database: 'database_test',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  },\n\t  production: {\n\t    username: 'root',\n\t    password: null,\n\t    database: 'database_production',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  }\n\t};\n\t\n\t/* Set up the general process */\n\tvar env = (\"production\") || 'development';\n\tvar config = allConfigs[env];\n\tvar sequelize = null;\n\tif (process.env.DATABASE_URL) {\n\t  sequelize = new _sequelize2.default(process.env.DATABASE_URL);\n\t} else {\n\t  sequelize = new _sequelize2.default(config.database, config.username, config.password, config);\n\t}\n\tvar db = {};\n\t\n\t/* Connect and log in to postgres */\n\tsequelize.authenticate().then(function () {\n\t  console.log('Success: Connection to Postgres established .');\n\t}, function trapError(err) {\n\t  console.log(_chalk2.default.red('FAILURE: Unable to connect to the Postgres database:'), err);\n\t});\n\t\n\t/* Create the models\n\t * TODO: This is a manual update nightmare.\n\t */\n\tvar apprisalModel = (0, _ApprisalModel2.default)(sequelize, _sequelize2.default);\n\tdb[apprisalModel.name] = apprisalModel;\n\t\n\tvar mediaModel = (0, _MediaModel2.default)(sequelize, _sequelize2.default);\n\tdb[mediaModel.name] = mediaModel;\n\t\n\tvar postModel = (0, _PostModel2.default)(sequelize, _sequelize2.default);\n\tdb[postModel.name] = postModel;\n\t\n\tvar recipientModel = (0, _RecipientModel2.default)(sequelize, _sequelize2.default);\n\tdb[recipientModel.name] = recipientModel;\n\t\n\tvar userModel = (0, _UserModel2.default)(sequelize, _sequelize2.default);\n\tdb[userModel.name] = userModel;\n\t\n\tvar userValidationModel = (0, _UserValidation2.default)(sequelize, _sequelize2.default);\n\tdb[userValidationModel.name] = userValidationModel;\n\t\n\t/* Do associations */\n\tObject.keys(db).forEach(function associateThem(modelName) {\n\t  if ('associate' in db[modelName]) {\n\t    db[modelName].associate(db);\n\t  }\n\t});\n\t\n\t/* Push the models to the database */\n\tsequelize.sync() //   .sync({ force: true }) <= removed as this drops the table\n\t.then(function () {\n\t  console.log('Success: Synced models to database.');\n\t}, function trapSyncError(err) {\n\t  console.log(_chalk2.default.red('FAILURE: An error occurred while creating the table:'), err);\n\t});\n\t\n\tdb.sequelize = sequelize;\n\tdb.Sequelize = _sequelize2.default;\n\t\n\tvar models = db;\n\texports.models = models;\n\texports.UserType = _constants.UserType;\n\texports.MediaType = _constants.MediaType;\n\texports.PostStatus = _constants.PostStatus;\n\texports.MAX_POST_SEARCH_RETURN_LIMIT = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\texports.RecipientType = _constants.RecipientType;\n\texports.RecipientStatus = _constants.RecipientStatus;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"sequelize\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\t// eslint-disable-line no-unused-vars\n\t\n\t/* An apprisal is an actual notification sent to a user or system of a new post.\n\t * Has an association with the Post object and the recipient that it will be sent to.\n\t * This would be called a notification in another system, but we are reserving that for future use.\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Apprisal = sequelize.define('Apprisal', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    deliveredAt: { // The date the item was either sent or pushed to service\n\t      type: DataTypes.DATE,\n\t      field: 'delivered_at'\n\t    },\n\t    firstOpenedAt: { // This only applies to emails with trackers. When the email was viewed.\n\t      type: DataTypes.DATE,\n\t      field: 'first_opened_at'\n\t    },\n\t    firstViewedAt: { // When this item was viewed on site.\n\t      type: DataTypes.DATE,\n\t      field: 'first_viewed_at'\n\t    },\n\t    canRespond: { // Can the recipient of this apprisal respond? Overrides canRespond on recipient\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: true,\n\t      field: 'can_respond'\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(apprisal) {\n\t        if (!apprisal.id) {\n\t          apprisal.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Apprisal.belongsTo(models.Post, {\n\t          foreignKey: {\n\t            field: 'post_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Apprisal.belongsTo(models.Recipient, {\n\t          foreignKey: {\n\t            field: 'recipient_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t      }\n\t    }\n\t  });\n\t  return Apprisal;\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.passGen = exports.toNumericId = exports.toHumanId = exports.idier = undefined;\n\t\n\tvar _base = __webpack_require__(12);\n\t\n\tvar _base2 = _interopRequireDefault(_base);\n\t\n\tvar _generatePassword = __webpack_require__(13);\n\t\n\tvar _generatePassword2 = _interopRequireDefault(_generatePassword);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* idier: identifier generator. Inspired by twitter's snowflake system\n\t * https://blog.twitter.com/2010/announcing-snowflake\n\t * We use the timestamp converted to seconds + a worker id from the environment +\n\t *   a sequence number (see below) + a single random number just in case...\n\t */\n\tvar idier = function idier() {\n\t  /* The sequence is stored on the global object. The sequence should be between 1-999 to keep\n\t   *   our total id number in the right space to be converted.\n\t   *   Note: There's probably an opportunity to use Redis or similar for the sequence.\n\t   */\n\t  var mySequence = 1;\n\t  var globalSeq = global.idierSequence;\n\t  if (globalSeq && globalSeq < 1000 && globalSeq > 0) {\n\t    mySequence = globalSeq;\n\t    global.idierSequence += 1;\n\t  } else {\n\t    global.idierSequence = mySequence + 1;\n\t  }\n\t\n\t  var workerId = process.env.IDIER_WORKER_ID;\n\t  if (!workerId) {\n\t    workerId = Math.floor(Math.random() * 10);\n\t  }\n\t  var timeStamp = Math.floor(Date.now() / 1000);\n\t  var randomnumber = Math.floor(Math.random() * 10);\n\t  var snowflake = '' + timeStamp + workerId + mySequence + randomnumber;\n\t  var snowflakeInt = parseInt(snowflake, 10);\n\t  return snowflakeInt;\n\t};\n\t\n\t/* toHumanId - transform a number into a base58 encoded string for use in human visible tokens.\n\t   Uses https://www.npmjs.com/package/base58\n\t  */\n\tvar toHumanId = function toHumanId(idNumber) {\n\t  var encoded = _base2.default.encode(idNumber);\n\t  return encoded;\n\t};\n\t\n\t/* toNumbericId - transform a humanId (base32 encoded) string to a number to use by the computer.\n\t  */\n\tvar toNumericId = function toNumericId(idString) {\n\t  var decoded = _base2.default.decode(idString);\n\t  return decoded;\n\t};\n\t\n\t/* Password generator\n\t * Creates a 12 digit password with letters and numbers.\n\t * @param {number} length - lenght of password\n\t * @param {bool} numbers - inlcude numbers\n\t * @param {string} exclude - characters to exclude\n\t*/\n\tvar passGen = function passGen() {\n\t  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n\t  var numbers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t  var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\t\n\t  var password = _generatePassword2.default.generate({\n\t    length: length,\n\t    numbers: numbers,\n\t    exclude: exclude,\n\t    strict: true\n\t  });\n\t  return password;\n\t};\n\t\n\texports.idier = idier;\n\texports.toHumanId = toHumanId;\n\texports.toNumericId = toNumericId;\n\texports.passGen = passGen;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"base58\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"generate-password\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\t/* A piece of media that is uploaded.\n\t * Currently supports MediaType.\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Media = sequelize.define('Media', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    url: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isUrl: true\n\t      }\n\t    },\n\t    type: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.MediaType.PHOTO, _constants.MediaType.VIDEO],\n\t      defaultValue: _constants.MediaType.PHOTO\n\t    },\n\t    width: {\n\t      type: DataTypes.INTEGER\n\t    },\n\t    height: {\n\t      type: DataTypes.INTEGER\n\t    },\n\t    size: {\n\t      type: DataTypes.INTEGER\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(media) {\n\t        if (!media.id) {\n\t          media.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Media.belongsTo(models.User);\n\t        Media.belongsToMany(models.Post, { through: 'PostMedia' });\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Determine total number of media for account\n\t  * @param {number} - userId\n\t  */\n\t  Media.totalForUser = function countAll(userId) {\n\t    return Media.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update a Media\n\t   * @param {number} - id: The id of the post\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated post or null if it couldn't be found\n\t   */\n\t  Media.updateRecipient = function updateMedia(id, userId, updates) {\n\t    return Media.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundMedia = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundMedia[key] = updates[key];\n\t      });\n\t      return foundMedia.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a Media\n\t   * @param {number} - id: The id\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted media or null if it couldn't be found\n\t   */\n\t  Media.deleteMedia = function deleteMedia(id, userId) {\n\t    return Media.findOne({ where: { id: id, user_id: userId } }).then(function (thisMedia) {\n\t      // eslint-disable-line arrow-body-style\n\t      if (thisMedia) {\n\t        return thisMedia.destroy();\n\t      }\n\t      return null;\n\t    });\n\t  };\n\t  return Media;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* A type of user */\n\tvar UserType = {\n\t  NORMAL: 'ut_normal',\n\t  ADMIN: 'ut_admin',\n\t  CUSTSERVICE: 'ut_custservice',\n\t  BANNED: 'ut_banned',\n\t  DEMO: 'ut_demo'\n\t};\n\t\n\t/* The type of media */\n\tvar MediaType = {\n\t  VIDEO: 'mt_video',\n\t  PHOTO: 'mt_photo'\n\t};\n\t\n\t/* Enum for the post.status field */\n\tvar PostStatus = {\n\t  DRAFT: 'ps_draft',\n\t  POSTED: 'ps_posted',\n\t  REMOVED: 'ps_removed'\n\t};\n\t\n\t/* The maximum we can return from a search */\n\tvar MAX_POST_SEARCH_RETURN_LIMIT = 100;\n\t\n\t/* Enum for the Recipient.type field */\n\tvar RecipientType = {\n\t  EMAIL: 'rt_email',\n\t  TEXT: 'rt_text',\n\t  POST: 'rt_post',\n\t  FACEBOOK: 'rt_facebook'\n\t};\n\t\n\t/* Enum for the Recipient.status field */\n\tvar RecipientStatus = {\n\t  VALIDATING: 'rs_validating',\n\t  ACTIVE: 'rs_active',\n\t  REMOVED: 'rs_removed',\n\t  BOUNCING: 'rs_bounding',\n\t  UNSUBSCRIBED: 'rs_unsubscribed'\n\t};\n\t\n\texports.UserType = UserType;\n\texports.MediaType = MediaType;\n\texports.PostStatus = PostStatus;\n\texports.MAX_POST_SEARCH_RETURN_LIMIT = MAX_POST_SEARCH_RETURN_LIMIT;\n\texports.RecipientType = RecipientType;\n\texports.RecipientStatus = RecipientStatus;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\t/* A post is the atomic messages of the user\n\t * https://developers.facebook.com/docs/graph-api/reference/v2.8/post\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Post = sequelize.define('Post', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    status: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.PostStatus.DRAFT, _constants.PostStatus.POSTED, _constants.PostStatus.REMOVED],\n\t      defaultValue: _constants.PostStatus.POSTED\n\t    },\n\t    message: {\n\t      type: DataTypes.STRING(5000),\n\t      allowNull: false\n\t    },\n\t    edited: {\n\t      type: DataTypes.BOOLEAN\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(post) {\n\t        if (!post.id) {\n\t          post.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Post.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Post.belongsToMany(models.Media, { through: 'PostMedia' });\n\t        Post.hasMany(models.Apprisal);\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Find all posts for a userId\n\t   * @param {string} userId - the userId to search for\n\t   * @param {number} limit - the number to find.\n\t   * @param {number} offset - The number to skip.\n\t   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n\t   */\n\t  Post.findAllForUser = function findAllForUser(userId, options) {\n\t    var limit = 20;\n\t    if (options.limit) {\n\t      limit = options.limit;\n\t    }\n\t    var offset = 0;\n\t    if (options.limit) {\n\t      offset = options.offset;\n\t    }\n\t    var beforeId = null;\n\t    if (options.beforeId) {\n\t      beforeId = options.beforeId;\n\t    }\n\t    var includeTables = [];\n\t    if (options.includeTables) {\n\t      includeTables = options.includeTables;\n\t    }\n\t\n\t    if (!userId) {\n\t      throw new Error('No userId provided');\n\t    }\n\t    var whereClause = {};\n\t\n\t    whereClause.where = { user_id: Number(userId) };\n\t\n\t    if (beforeId && beforeId > 0) {\n\t      whereClause.id = { $lt: beforeId };\n\t    }\n\t\n\t    var limiter = limit;\n\t    if (limiter > _constants.MAX_POST_SEARCH_RETURN_LIMIT) {\n\t      limiter = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\t    }\n\t    whereClause.limit = limiter;\n\t\n\t    if (offset > 0) {\n\t      whereClause.offset = offset;\n\t    }\n\t    whereClause.order = 'id DESC';\n\t    if (includeTables) {\n\t      whereClause.include = includeTables;\n\t    }\n\t    return this.findAll(whereClause);\n\t  };\n\t\n\t  /* Determine total number of posts for account\n\t   * @param {number} - userId\n\t   */\n\t  Post.totalForUser = function countPosts(userId) {\n\t    return Post.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update a post\n\t   * @param {number} - id: The id of the post\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated post or null if it couldn't be found\n\t   */\n\t  Post.updatePost = function updatePost(id, userId, updates) {\n\t    return Post.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundPost = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundPost[key] = updates[key];\n\t      });\n\t      return foundPost.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a post\n\t   * @param {number} - id: The id of the post\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted post or null if it couldn't be found\n\t   */\n\t  Post.deletePost = function deletePost(id, userId) {\n\t    return Post.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      // eslint-disable-line consistent-return\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundPost = foundItem;\n\t      foundPost.status = _constants.PostStatus.REMOVED;\n\t      return foundPost.save();\n\t    }).then(function (thisPost) {\n\t      // eslint-disable-line arrow-body-style\n\t      return thisPost.destroy();\n\t    });\n\t  };\n\t\n\t  return Post;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _appraise = __webpack_require__(18);\n\t\n\tvar _passwordEncryption = __webpack_require__(21);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\t/* A recipient is a person or system where posts will be sent.\n\t */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Recipient = sequelize.define('Recipient', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    type: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.RecipientType.EMAIL, _constants.RecipientType.TEXT, _constants.RecipientType.POST, _constants.RecipientType.FACEBOOK],\n\t      defaultValue: _constants.RecipientType.EMAIL\n\t    },\n\t    status: {\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.RecipientStatus.ACTIVE, _constants.RecipientStatus.VALIDATING, _constants.RecipientStatus.REMOVED, _constants.RecipientStatus.BOUNCING, _constants.RecipientStatus.UNSUBSCRIBED],\n\t      defaultValue: _constants.RecipientStatus.ACTIVE\n\t    },\n\t    displayName: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      field: 'display_name'\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidEmail: function validateEmail(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseEmail)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      }\n\t    },\n\t    // Each recipient gets an access token. Combined with Apprisal.id, makes for the link\n\t    // Advantage: if the token is stolen, can be recomputed and renders all apprisals with this\n\t    //   token invalid. Encrypted because if db hacked, could be used to see all data. (issue?)\n\t    accessTokenEncrypted: {\n\t      type: DataTypes.STRING,\n\t      field: 'access_token_hash',\n\t      allowNull: false\n\t    },\n\t    // Pepper for the AES string used in the accessToken Encryption.\n\t    accessTokenPepper: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      field: 'access_token_pepper'\n\t    },\n\t    // Can a user respond? This can be overridden by Apprisals\n\t    canRespond: {\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: true,\n\t      field: 'can_respond'\n\t    },\n\t    validatedAt: {\n\t      type: DataTypes.DATE,\n\t      field: 'validated_at'\n\t    },\n\t    validated: {\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: false\n\t    },\n\t    unsubscribedAt: {\n\t      type: DataTypes.DATE,\n\t      field: 'unsubscribed_at'\n\t    },\n\t    unsubscribedReason: {\n\t      type: DataTypes.STRING,\n\t      field: 'unsubscribed_reason'\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    indexes: [{\n\t      unique: true,\n\t      fields: ['user_id', 'email']\n\t    }],\n\t    hooks: {\n\t      beforeValidate: function addId(recipient) {\n\t        if (!recipient.id) {\n\t          recipient.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t        if (!recipient.accessToken) {\n\t          var token = (0, _idier.passGen)(15, true, '.');\n\t          console.log('Recipient token: ' + token);\n\t          recipient.setAccessToken(token); // eslint-disable-line no-param-reassign\n\t        }\n\t        if (recipient.type === _constants.RecipientType.FACEBOOK) {\n\t          recipient.canRespond = false; // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    instanceMethods: {\n\t      setAccessToken: function setAccessToken(token) {\n\t        var self = this;\n\t        if (!token || token.length < 15) {\n\t          throw new Error('Invalid token passed to recipient. This is an internal error.');\n\t        }\n\t        var encryptedValue = (0, _passwordEncryption.aesHash)(token, process.env.TOKEN_ENCRYPT_CURRENT_PEPPER);\n\t        self.accessTokenEncrypted = encryptedValue.encrypted;\n\t        self.accessTokenPepper = encryptedValue.pepperId;\n\t      },\n\t      getAccessToken: function getAccessToken() {\n\t        var self = this;\n\t        return (0, _passwordEncryption.deAesHash)(self.accessTokenEncrypted, self.accessTokenPepper);\n\t      },\n\t      toJSON: function stripValues() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.accessTokenEncrypted;\n\t        delete values.accessTokenPepper;\n\t        delete values.deletedAt;\n\t        return values;\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Recipient.belongsTo(models.User, {\n\t          foreignKey: {\n\t            field: 'user_id',\n\t            allowNull: false\n\t          },\n\t          onDelete: 'cascade'\n\t        });\n\t        Recipient.hasMany(models.Apprisal);\n\t      }\n\t    }\n\t  });\n\t\n\t  /* Find all recipients for a userId\n\t   * @param {string} userId - the userId to search for\n\t   * @param {number} limit - the number to find.\n\t   * @param {number} offset - The number to skip.\n\t   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n\t   */\n\t  Recipient.findAllForUser = function findAllForUser(userId) {\n\t    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n\t    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t    var beforeId = arguments[3];\n\t\n\t    if (!userId) {\n\t      throw new Error('No userId provided');\n\t    }\n\t\n\t    var userWhere = '\"user_id\": \"' + userId + '\"';\n\t\n\t    var beforeIdWhere = '';\n\t    if (beforeId && beforeId > 0) {\n\t      beforeIdWhere = ', id : {$lt: ' + beforeId + '}';\n\t    }\n\t\n\t    var limiter = limit;\n\t    if (limiter > _constants.MAX_POST_SEARCH_RETURN_LIMIT) {\n\t      limiter = _constants.MAX_POST_SEARCH_RETURN_LIMIT;\n\t    }\n\t    var limitClause = ', \"limit\": \"' + limiter + '\", ';\n\t    var offsetClause = '';\n\t    if (offset > 0) {\n\t      offsetClause = ', \"offset\": \"' + offset + '\", ';\n\t    }\n\t    var orderClause = '\"order\": \"id DESC\"';\n\t    var queryJSON = '{ \"where\": { ' + userWhere + beforeIdWhere + ' }' + limitClause + offsetClause + ' ' + orderClause + '}';\n\t    var query = JSON.parse(queryJSON);\n\t    return this.findAll(query);\n\t  };\n\t\n\t  /* Determine total number of recipients for user\n\t   * @param {number} - userId\n\t   */\n\t  Recipient.totalForUser = function countAll(userId) {\n\t    return Recipient.findAndCountAll({\n\t      where: { user_id: userId }\n\t    });\n\t  };\n\t\n\t  /* Update a Recipient\n\t   * @param {number} - id: The id of the item\n\t   * @param {number} - userId: The id of the user\n\t   * @param {object} - updates: The fields and values to update\n\t   * Returns: Either an updated recipient or null if it couldn't be found\n\t   */\n\t  Recipient.updateRecipient = function updateRecipient(id, userId, updates) {\n\t    return Recipient.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundRecipient = foundItem;\n\t      var fieldsToUpdateKeys = Object.keys(updates);\n\t      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n\t        foundRecipient[key] = updates[key];\n\t      });\n\t      return foundRecipient.save();\n\t    });\n\t  };\n\t\n\t  /* Delete a Recipient\n\t   * @param {number} - id: The id of the item\n\t   * @param {number} - userId: The id of the user\n\t   * Returns: Either an deleted recipient or null if it couldn't be found\n\t   */\n\t  Recipient.deleteRecipient = function deleteRecipient(id, userId) {\n\t    return Recipient.findOne({ where: { id: id, user_id: userId } }).then(function (foundItem) {\n\t      // eslint-disable-line consistent-return\n\t      if (!foundItem) {\n\t        return null;\n\t      }\n\t      var foundRecipient = foundItem;\n\t      foundRecipient.status = _constants.RecipientStatus.REMOVED;\n\t      return foundRecipient.save();\n\t    }).then(function (thisRecipient) {\n\t      // eslint-disable-line arrow-body-style\n\t      return thisRecipient.destroy();\n\t    });\n\t  };\n\t\n\t  return Recipient;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.appraisePostMessage = exports.appraiseAccountId = exports.appraisePasswordErrors = exports.appraisePasswordExtra = exports.appraisePassword = exports.appraiseDisplayName = exports.appraiseEmail = exports.appraiseThese = undefined;\n\t\n\tvar _validator = __webpack_require__(19);\n\t\n\tvar _owaspPasswordStrengthTest = __webpack_require__(20);\n\t\n\tvar _owaspPasswordStrengthTest2 = _interopRequireDefault(_owaspPasswordStrengthTest);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Is the email valid? Uses the validator library to test.\n\t */\n\tvar appraiseEmail = function appraiseEmail(emailAddress) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(emailAddress)) {\n\t    messages.push('Email address is required.');\n\t  }\n\t  if (!(0, _validator.isEmpty)(emailAddress) && !(0, _validator.isEmail)(emailAddress)) {\n\t    messages.push('Email address does not appear to be valid.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Test for the validity of the displayName.\n\t *  Currently only checks if it's empty.\n\t */\n\tvar appraiseDisplayName = function appraiseDisplayName(displayName) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(displayName)) {\n\t    messages.push('Display name is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Tests a password.\n\t * Must be valid and pass the owasp validation tests.\n\t */\n\tvar appraisePassword = function appraisePassword(password) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(password)) {\n\t    messages.push('Password is required.');\n\t  } else {\n\t    var owaspResults = _owaspPasswordStrengthTest2.default.test(password);\n\t    if (!owaspResults.strong) {\n\t      messages = messages.concat(owaspResults.errors);\n\t    }\n\t  }\n\t  return messages;\n\t};\n\t\n\tvar appraisePasswordErrors = {\n\t  minLength: 0,\n\t  maxLength: 1,\n\t  repeating: 2,\n\t  needLowercase: 3,\n\t  needUppercase: 4,\n\t  needNumber: 5,\n\t  needCharacter: 6\n\t};\n\t\n\t/* A wrapper for awasp tests that returns this\n\t * {\n\t *   errors              : [],\n\t *   failedTests         : [],\n\t *   requiredTestErrors  : [],\n\t *   optionalTestErrors  : [],\n\t *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n\t *   isPassphrase        : false,\n\t *   strong              : true,\n\t *   optionalTestsPassed : 4\n\t * }\n\t */\n\tvar appraisePasswordExtra = function appraisePasswordExtra(password) {\n\t  return _owaspPasswordStrengthTest2.default.test(password);\n\t};\n\t\n\t/* Tests for the presense of an accountID.\n\t *  Only checks if it's empty.\n\t *  TODO: Check if the account actually exists.\n\t */\n\tvar appraiseAccountId = function appraiseAccountId(accountId) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(accountId)) {\n\t    messages.push('AccountId is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Validates multiple options. Pass in an object with one of the following:\n\t * email: {string} validates an email (or empty}\n\t * displayName; {string} checks for empty\n\t * password: {string} validates a password\n\t * accountId: {string} validates the accountId\n\t * @returns: an object (see validator object below)\n\t */\n\tvar appraiseThese = function appraiseThese(what) {\n\t  var appraised = {\n\t    success: true, // Did all tests pass\n\t    tested: [], // Which tests where done? Check this to make sure things were passed in correctly.\n\t    errors: {} };\n\t  if ('email' in what) {\n\t    appraised.tested.push('email');\n\t    var messages = appraiseEmail(what.email);\n\t    if (messages && messages.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.email = messages;\n\t    }\n\t  }\n\t  if ('password' in what) {\n\t    appraised.tested.push('password');\n\t    var _messages = appraisePassword(what.password);\n\t    if (_messages && _messages.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.password = _messages;\n\t    }\n\t  }\n\t  if ('displayName' in what) {\n\t    appraised.tested.push('displayName');\n\t    var _messages2 = appraiseDisplayName(what.displayName);\n\t    if (_messages2 && _messages2.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.displayName = _messages2;\n\t    }\n\t  }\n\t  if ('accountId' in what) {\n\t    appraised.tested.push('accountId');\n\t    var _messages3 = appraiseAccountId(what.accountId);\n\t    if (_messages3 && _messages3.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.accountId = _messages3;\n\t    }\n\t  }\n\t  return appraised;\n\t};\n\t\n\t/* Tests for the presense of a post message.\n\t *  Only checks if it's empty.\n\t *  Here for future functionality.\n\t */\n\tvar appraisePostMessage = function appraisePostMessage(postMessage) {\n\t  var messages = [];\n\t  if (!postMessage || (0, _validator.isEmpty)(postMessage)) {\n\t    messages.push('A message is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\texports.appraiseThese = appraiseThese;\n\texports.appraiseEmail = appraiseEmail;\n\texports.appraiseDisplayName = appraiseDisplayName;\n\texports.appraisePassword = appraisePassword;\n\texports.appraisePasswordExtra = appraisePasswordExtra;\n\texports.appraisePasswordErrors = appraisePasswordErrors;\n\texports.appraiseAccountId = appraiseAccountId;\n\texports.appraisePostMessage = appraisePostMessage;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"validator\");\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"owasp-password-strength-test\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.passwordsMatch = exports.aesHash = exports.bcryptHash = exports.hashPassword = exports.deAesHash = exports.encryptPassword = undefined;\n\t\n\tvar _bcrypt = __webpack_require__(22);\n\t\n\tvar _crypto = __webpack_require__(23);\n\t\n\tvar _crypto2 = _interopRequireDefault(_crypto);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Hashes the password into a SHA512 hex hash */\n\tvar hashPassword = function hashPassword(password) {\n\t  var hasher = _crypto2.default.createHash('sha512');\n\t  hasher.update(password);\n\t  var hashed = hasher.digest('hex');\n\t  return hashed;\n\t};\n\t\n\t/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n\t * Salt is returned as part of the hash and thus saved.\n\t * Note that this version of bcrypt only takes the first 72 characters.\n\t  */\n\tvar bcryptHash = function bcryptHash(passwordhash) {\n\t  var saltRounds = 10;\n\t  return (0, _bcrypt.hash)(passwordhash, saltRounds);\n\t};\n\t\n\t/* Encrypts the input using aes256 using a pepper stored\n\t *   in the environment. This is what should be finally saved.\n\t */\n\tvar aesHash = function aesHash(toEncrypt) {\n\t  var pepperId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER;\n\t\n\t  var currentPepperId = pepperId;\n\t  if (!currentPepperId) {\n\t    throw new Error('Could not encrypt item - no pepper information available');\n\t  }\n\t  var pepper = process.env[currentPepperId];\n\t  if (!pepper) {\n\t    throw new Error('Could not encrypt item - no pepper available');\n\t  }\n\t  var algorithm = 'aes-256-ctr';\n\t  var cipher = _crypto2.default.createCipher(algorithm, pepper);\n\t  var crypted = cipher.update(toEncrypt, 'utf8', 'hex');\n\t  crypted += cipher.final('hex');\n\t  return { encrypted: crypted, pepperId: currentPepperId };\n\t};\n\t\n\t/* Encrypting a password.\n\t   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n\t   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n\t*/\n\tvar encryptPassword = function encryptPassword(rawPassword) {\n\t  return Promise.resolve(rawPassword).then(hashPassword).then(bcryptHash).then(aesHash);\n\t};\n\t\n\t/* Decrypts an encrypted value using aes256 using a pepper stored\n\t *   in the environment.\n\t */\n\tvar deAesHash = function deAesHash(toDecrypt, pepperId) {\n\t  var pepper = process.env[pepperId];\n\t  if (!pepper) {\n\t    return new Error('Pepper not found.');\n\t  }\n\t  var algorithm = 'aes-256-ctr';\n\t  var decipher = _crypto2.default.createDecipher(algorithm, pepper);\n\t  var decrypted = decipher.update(toDecrypt, 'hex', 'utf8');\n\t  decrypted += decipher.final('utf8');\n\t  return decrypted;\n\t};\n\t\n\t/* Compare passwords.\n\t * Because we are using hashing and encrypting, we have to do that before we compare.\n\t */\n\tvar passwordsMatch = function passwordsMatch(candidatePassword, encryptedPasswordHash, pepperId) {\n\t  // compare the submitted password to encrypted password in database.\n\t  var candidateHashed = hashPassword(candidatePassword);\n\t  var decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n\t  return (0, _bcrypt.compare)(candidateHashed, decryptedPass);\n\t};\n\t\n\texports.encryptPassword = encryptPassword;\n\texports.deAesHash = deAesHash;\n\texports.hashPassword = hashPassword;\n\texports.bcryptHash = bcryptHash;\n\texports.aesHash = aesHash;\n\texports.passwordsMatch = passwordsMatch;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"bcrypt\");\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"crypto\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _passwordEncryption = __webpack_require__(21);\n\t\n\tvar _appraise = __webpack_require__(18);\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\tvar _constants = __webpack_require__(15);\n\t\n\t/* A user is the core part of the system */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var User = sequelize.define('User', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    userType: {\n\t      field: 'user_type',\n\t      type: DataTypes.ENUM,\n\t      values: [_constants.UserType.NORMAL, _constants.UserType.ADMIN, _constants.UserType.CUSTSERVICE, _constants.UserType.BANNED],\n\t      defaultValue: _constants.UserType.NORMAL,\n\t      allowNull: false\n\t    },\n\t    displayName: {\n\t      field: 'display_name',\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidDisplayName: function validateDisplayName(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseDisplayName)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      }\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidEmail: function validateEmail(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseEmail)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      },\n\t      unique: true\n\t    },\n\t    encryptedPasswordHash: {\n\t      field: 'encrypted_password_hash',\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        notEmpty: true\n\t      }\n\t    },\n\t    encryptedPasswordPepperId: {\n\t      field: 'encrypted_password_pepperId',\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        notEmpty: true\n\t      }\n\t    },\n\t    validatedAt: {\n\t      type: DataTypes.DATE,\n\t      field: 'validated_at'\n\t    },\n\t    validated: {\n\t      type: DataTypes.BOOLEAN,\n\t      defaultValue: false\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    hooks: {\n\t      beforeValidate: function addId(user) {\n\t        if (!user.id) {\n\t          user.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    instanceMethods: {\n\t      setPassword: function setPassword(password) {\n\t        var self = this;\n\t        return Promise.resolve((0, _appraise.appraisePassword)(password)).then(function checkAppraisal(appraisalMessages) {\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(', '));\n\t          }\n\t          return password;\n\t        }).then(function runHashing(passwordValue) {\n\t          return (0, _passwordEncryption.encryptPassword)(passwordValue);\n\t        }).then(function (encryptedValue) {\n\t          self.encryptedPasswordHash = encryptedValue.encrypted;\n\t          self.encryptedPasswordPepperId = encryptedValue.pepperId;\n\t        }).catch(function (err) {\n\t          throw err;\n\t        });\n\t      },\n\t      toJSON: function stripValues() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.encryptedPasswordHash;\n\t        delete values.encryptedPasswordPepperId;\n\t        delete values.deletedAt;\n\t        return values;\n\t      },\n\t      // TODO: We really need a profile table but this works for now.\n\t      toProfile: function stripForProfile() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.encryptedPasswordHash;\n\t        delete values.encryptedPasswordPepperId;\n\t        delete values.email;\n\t        delete values.deletedAt;\n\t        return values;\n\t      },\n\t      comparePassword: function comparePass(candidate) {\n\t        return (0, _passwordEncryption.passwordsMatch)(candidate, this.encryptedPasswordHash, this.encryptedPasswordPepperId);\n\t      },\n\t      canActOnBehalfOf: function behalfOf(accountId) {\n\t        // eslint-disable-line no-unused-vars\n\t        if (this.userType === _constants.UserType.ADMIN || this.userType === _constants.UserType.CUSTSERVICE) {\n\t          return true;\n\t        }\n\t        return false;\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        User.hasMany(models.Post);\n\t        User.hasMany(models.Recipient);\n\t        User.hasMany(models.Media);\n\t        User.hasMany(models.UserValidation);\n\t      }\n\t    }\n\t  });\n\t  return User;\n\t}; // eslint-disable-line no-unused-vars\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _idier = __webpack_require__(11);\n\t\n\t// eslint-disable-line no-unused-vars\n\t\n\t/* A validation is a sent notification sent to a user or system of a new post.\n\t * Has an association with the Post object and the recipient that it will be sent to.\n\t * This would be called a notification in another system, but we are reserving that for future use.\n\t */\n\tvar UserValidationDefinition = function UserValidationDefinition(sequelize, DataTypes) {\n\t  var UserValidation = sequelize.define('UserValidation', {\n\t    id: {\n\t      type: DataTypes.BIGINT,\n\t      field: 'id',\n\t      primaryKey: true\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false\n\t    },\n\t    deliveredAt: { // The date the item was either sent or pushed to service\n\t      type: DataTypes.DATE,\n\t      field: 'delivered_at'\n\t    },\n\t    visitedAt: { // The date the item was visited for the first time\n\t      type: DataTypes.DATE,\n\t      field: 'visited_at'\n\t    }\n\t  }, {\n\t    underscored: true,\n\t    paranoid: true,\n\t    timestamps: true,\n\t    hooks: {\n\t      beforeValidate: function addId(validation) {\n\t        if (!validation.id) {\n\t          validation.id = (0, _idier.idier)(); // eslint-disable-line no-param-reassign\n\t        }\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        UserValidation.belongsTo(models.User);\n\t      }\n\t    }\n\t  });\n\t  return UserValidation;\n\t};\n\t\n\texports.default = UserValidationDefinition;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _User = __webpack_require__(27);\n\t\n\tObject.keys(_User).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _User[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Recipient = __webpack_require__(30);\n\t\n\tObject.keys(_Recipient).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Recipient[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Authentication = __webpack_require__(33);\n\t\n\tObject.keys(_Authentication).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Authentication[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Post = __webpack_require__(36);\n\t\n\tObject.keys(_Post).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Post[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Media = __webpack_require__(39);\n\t\n\tObject.keys(_Media).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Media[key];\n\t    }\n\t  });\n\t});\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.UserController = exports.userRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(28);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(29);\n\t\n\tvar UserController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.userRoutes = _routes2.default;\n\texports.UserController = UserController;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(29);\n\t\n\tvar routes = new _express.Router();\n\t\n\troutes.route('/users').post(_controller.addUserEndpoint);\n\t\n\troutes.get('/users', (0, _warrant.requireLogin)(), _controller.getUserInfoEndpoint);\n\troutes.put('/users', (0, _warrant.requireLogin)(), _controller.updateUserEndpoint);\n\troutes.put('/passwords', (0, _warrant.requireLogin)(), _controller.updatePasswordEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.updatePasswordEndpoint = exports.updateUserEndpoint = exports.getUserInfoEndpoint = exports.addUserEndpoint = undefined;\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar User = _models.models.User;\n\t\n\t/* Returns either the current user's id or, if onBehalfOfId is passed in\n\t *  to the body, it will verify if the current user can act on behalf of the passed\n\t *  in id and return that.\n\t *  @param {object} req - the request object that has a user attached\n\t *  @returns {string} id - a user id to use in searches.\n\t *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n\t */\n\tvar activeUsertId = function getUser(req) {\n\t  var currentUser = req.user;\n\t  var onBehalfOfId = req.body.onBehalfOfId;\n\t  if (onBehalfOfId && onBehalfOfId.length > 0) {\n\t    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n\t      return onBehalfOfId;\n\t    }\n\t  }\n\t  if (req.user && req.user.id) {\n\t    return req.user.id;\n\t  }\n\t  return null;\n\t};\n\t\n\t/* Adds an user to the Users database based on the fields passed in.\n\t * Params needed in body:\n\t *   @param {string} email - the email address\n\t *   @param {string} password - the user's password. Must pass owasp tests.\n\t *   @param {string} displayName - the name to display on the user's page.\n\t */\n\tvar addUserEndpoint = function addUserEndpoint(req, res) {\n\t  console.log('user');\n\t  console.dir(_models.models);\n\t\n\t  var _req$body = req.body,\n\t      email = _req$body.email,\n\t      password = _req$body.password,\n\t      displayName = _req$body.displayName;\n\t\n\t  var newUser = User.build({\n\t    email: email,\n\t    displayName: displayName\n\t  });\n\t  newUser.setPassword(password).then(function () {\n\t    // eslint-disable-line arrow-body-style\n\t    return newUser.save();\n\t  }).then(function (createdUser) {\n\t    console.log('Created User');\n\t    (0, _warrant.createUserSession)(req, res, createdUser);\n\t    console.log('Finished login');\n\t    var cleanUser = createdUser.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully Registered',\n\t      user: cleanUser\n\t    });\n\t  }).catch(function (err) {\n\t    (0, _warrant.destroyUserSession)(req, res);\n\t    console.log(err);\n\t    console.dir(err);\n\t    // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n\t    if (err.code === 11000) {\n\t      res.statusMessage = 'User with that email already exists'; // eslint-disable-line no-param-reassign\n\t      res.status(409).end();\n\t      return;\n\t    }\n\t    var errorMessage = 'User could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    // TODO: Return errors better. The err object has an errors array that could be parsed.\n\t    res.status(422).send(JSON.stringify({ errors: err.message }));\n\t  });\n\t};\n\t\n\t/* Get user info for id.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The user's id to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  @param {number} id of user - Will be pulled from req.user.\n\t *  Uses activeUsertId() to get the search parameters.\n\t */\n\tvar getUserInfoEndpoint = function getUserInfoEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = activeUsertId(req);\n\t  if (!userId) {\n\t    return res.status(422).json({ success: false, message: 'Not logged in.' });\n\t  }\n\t  User.findById(userId).then(function (item) {\n\t    var cleanedItem = item.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      user: cleanedItem\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Update user info\n\t * Requires values in the body of the req.\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t * Possible options (not all have to be passed):\n\t *     @param {String} email - the new email address\n\t *      TODO: validate the new email\n\t *     @param {String} displayName - the new displayName\n\t */\n\tvar updateUserEndpoint = function updateUserEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = activeUsertId(req);\n\t  if (!userId) {\n\t    return res.status(422).json({ success: false, message: 'Not logged in.' });\n\t  }\n\t  var _req$body2 = req.body,\n\t      email = _req$body2.email,\n\t      displayName = _req$body2.displayName;\n\t\n\t  User.findById(userId).then(function (item) {\n\t    var foundUser = item;\n\t    if (email && email.length > 0) {\n\t      foundUser.email = email;\n\t    }\n\t    if (displayName && displayName.length > 0) {\n\t      foundUser.displayName = displayName;\n\t    }\n\t    return foundUser.save();\n\t  }).then(function (user) {\n\t    var cleanedUser = user.toJSON();\n\t    res.status(200).json({\n\t      success: true,\n\t      user: cleanedUser\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Update password endpoint\n\t * Requires old and new password.\n\t * First validates current password then updates to the new password.\n\t *  @param {Object} req - The http request object.\n\t *  @param {Object} res - The http response object.\n\t *  Required in req object:\n\t *     @param {String} password - the current password\n\t *     @param {String} newPassword - the new password\n\t */\n\tvar updatePasswordEndpoint = function updatePasswordEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = activeUsertId(req);\n\t  if (!userId) {\n\t    return res.status(422).json({ success: false, message: 'Not logged in.' });\n\t  }\n\t  var _req$body3 = req.body,\n\t      password = _req$body3.password,\n\t      newPassword = _req$body3.newPassword;\n\t\n\t  var foundUser = null;\n\t  User.findById(userId).then(function comparePass(theUser) {\n\t    foundUser = theUser;\n\t    return theUser.comparePassword(password);\n\t  }).then(function wasPasswordValid(passwordsMatched) {\n\t    if (!passwordsMatched) {\n\t      throw new Error('Could not verify user');\n\t    }\n\t    return foundUser;\n\t  }).then(function updatePass() {\n\t    return foundUser.setPassword(newPassword);\n\t  }).then(function saveUser() {\n\t    return foundUser.save();\n\t  }).then(function returnCompleted() {\n\t    res.status(200).end();\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.addUserEndpoint = addUserEndpoint;\n\texports.getUserInfoEndpoint = getUserInfoEndpoint;\n\texports.updateUserEndpoint = updateUserEndpoint;\n\texports.updatePasswordEndpoint = updatePasswordEndpoint;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.RecipientController = exports.recipientRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(31);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(32);\n\t\n\tvar RecipientController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.recipientRoutes = _routes2.default;\n\texports.RecipientController = RecipientController;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(32);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/recipients', (0, _warrant.requireLogin)(), _controller.getRecipientsEndpoint);\n\troutes.post('/recipients', (0, _warrant.requireLogin)(), _controller.addRecipientEndpoint);\n\troutes.put('/recipients/:recipientId', (0, _warrant.requireLogin)(), _controller.updateRecipientEndpoint);\n\troutes.delete('/recipients/:recipientId', (0, _warrant.requireLogin)(), _controller.removeRecipientEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removeRecipientEndpoint = exports.updateRecipientEndpoint = exports.addRecipientEndpoint = exports.getRecipientsEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(33);\n\t\n\tvar Recipient = _models.models.Recipient;\n\t\n\t/* Get all of the recipients for the userId.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the search parameters.\n\t */\n\tvar getRecipientsEndpoint = function getRecipientsEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Recipient.findAllForUser(userId).then(function (recipients) {\n\t    var cleanRecipients = recipients.map(function jsonify(recipient) {\n\t      return recipient.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      recipients: cleanRecipients\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Adds an recipient to the Recipients database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} email - the email address\n\t *   @param {string} displayName - the displayName for the recipient.\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar addRecipientEndpoint = function addRecipientEndpoint(req, res) {\n\t  var _req$body = req.body,\n\t      email = _req$body.email,\n\t      displayName = _req$body.displayName;\n\t\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  var newRecipient = Recipient.build({\n\t    email: email,\n\t    displayName: displayName,\n\t    user_id: userId\n\t  });\n\t  newRecipient.save().then(function (createdRecipient) {\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created recipient',\n\t      recipient: createdRecipient.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Recipient creation error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Recipient could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a recipient\n\t * Params needed in req.body:\n\t *   @param {string=} email (optional) - the email address to update.\n\t *   @param {string=} displayName (optional) - the displayName to update.\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t *  Uses activeAccountId() to get the accountId to search for.\n\t */\n\tvar updateRecipientEndpoint = function updateRecipientEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var recipientId = req.params.recipientId;\n\t  if (req.body.recipientId) {\n\t    recipientId = req.body.recipientId;\n\t  }\n\t  var _req$body2 = req.body,\n\t      email = _req$body2.email,\n\t      displayName = _req$body2.displayName,\n\t      status = _req$body2.status;\n\t\n\t  if (!recipientId) {\n\t    res.statusMessage = 'No recipientId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t\n\t  var updates = {};\n\t  if (email && email.length > 0) updates.email = email;\n\t  if (displayName && displayName.length > 0) updates.displayName = displayName;\n\t  if (status && status.length > 0) updates.status = status;\n\t\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Recipient.updateRecipient(recipientId, userId, updates).then(function (updatedRecipient) {\n\t    if (!updatedRecipient) {\n\t      res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully updated recipient',\n\t      recipient: updatedRecipient.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Recipient update error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Recipient could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a post (marks the status to 'removed')\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar removeRecipientEndpoint = function removeRecipientEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.recipientId;\n\t  if (req.body.recipientId) {\n\t    itemId = req.body.recipientId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No recipientId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Recipient.deleteRecipient(itemId, userId).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Recipient could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getRecipientsEndpoint = getRecipientsEndpoint;\n\texports.addRecipientEndpoint = addRecipientEndpoint;\n\texports.updateRecipientEndpoint = updateRecipientEndpoint;\n\texports.removeRecipientEndpoint = removeRecipientEndpoint;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.proxyUserId = exports.requireLogin = exports.authenticateUser = exports.destroyUserSession = exports.createUserSession = exports.validateUserSession = exports.sessionsRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(34);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _proxyUser = __webpack_require__(35);\n\t\n\tvar _proxyUser2 = _interopRequireDefault(_proxyUser);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.sessionsRoutes = _routes2.default;\n\texports.validateUserSession = _warrant.validateUserSession;\n\texports.createUserSession = _warrant.createUserSession;\n\texports.destroyUserSession = _warrant.destroyUserSession;\n\texports.authenticateUser = _warrant.authenticateUser;\n\texports.requireLogin = _warrant.requireLogin;\n\texports.proxyUserId = _proxyUser2.default;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\t/* Sessions endpoint creates sessions\n\t *  These would be equivalent to login/logout\n\t */\n\tvar routes = new _express.Router();\n\t\n\t/* Calls authenticateUser to log in a user */\n\tfunction signinUser(req, res) {\n\t  var body = req.body;\n\t  (0, _warrant.authenticateUser)(req, res, body).then(function (user) {\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Logged in',\n\t      user: user\n\t    });\n\t  }).catch(function (err) {\n\t    console.log(err);\n\t    res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t}\n\t\n\troutes.route('/sessions').post(signinUser);\n\t\n\t/* Clears the session info, effectively logging out a user */\n\troutes.route('/sessions').delete(function logThemOut(req, res) {\n\t  (0, _warrant.destroyUserSession)(req, res);\n\t  res.status(204).end();\n\t});\n\t\n\t/* Checks if a user is currently authenticated.\n\t */\n\troutes.route('/sessions').get(function isAuthenticated(req, res) {\n\t  if (req.user) {\n\t    res.status(204).end();\n\t    return;\n\t  }\n\t  res.status(403).end();\n\t});\n\t\n\texports.default = routes;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* Returns either the current user's id or, if onBehalfOfId is passed in\n\t *  to the body, it will verify if the current user can act on behalf of the passed\n\t *  in id and return that.\n\t *  @param {object} req - the request object that has a user account attached\n\t *  @returns {string} userId - the id to use in actions.\n\t */\n\tvar proxyUserId = function getAccount(req) {\n\t  var currentUser = req.user;\n\t  var onBehalfOfId = req.body.onBehalfOfId;\n\t  if (onBehalfOfId && onBehalfOfId.length > 0) {\n\t    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n\t      return onBehalfOfId;\n\t    }\n\t  }\n\t  if (req.user && req.user.id) {\n\t    return req.user.id;\n\t  }\n\t  return null;\n\t};\n\t\n\texports.default = proxyUserId;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.PostController = exports.postRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(37);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(38);\n\t\n\tvar PostController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.postRoutes = _routes2.default;\n\texports.PostController = PostController;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _controller = __webpack_require__(38);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/posts', (0, _warrant.requireLogin)(), _controller.getPostsEndpoint);\n\troutes.post('/posts', (0, _warrant.requireLogin)(), _controller.addPostEndpoint);\n\troutes.put('/posts/:postId', (0, _warrant.requireLogin)(), _controller.updatePostEndpoint);\n\troutes.delete('/posts/:postId', (0, _warrant.requireLogin)(), _controller.removePostEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removePostEndpoint = exports.updatePostEndpoint = exports.addPostEndpoint = exports.getPostsEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(33);\n\t\n\tvar Post = _models.models.Post;\n\tvar Media = _models.models.Media;\n\tvar Apprisal = _models.models.Apprisal;\n\t\n\t/* Get all of the posts for the accountId.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search user.\n\t */\n\tvar getPostsEndpoint = function getPostsEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.findAllForUser(userId, {\n\t    includeTables: [{\n\t      model: Media,\n\t      attributes: ['url'],\n\t      through: {\n\t        attributes: []\n\t      }\n\t    }, {\n\t      model: Apprisal\n\t    }]\n\t  }).then(function (items) {\n\t    var cleanedItems = items.map(function jsonify(mappedItem) {\n\t      return mappedItem.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      posts: cleanedItems\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Adds a post to the Post database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} message - the main message body\n\t *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n\t *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to post under.\n\t */\n\tvar addPostEndpoint = function addPostEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var _req$body = req.body,\n\t      message = _req$body.message,\n\t      status = _req$body.status,\n\t      mediaIds = _req$body.mediaIds;\n\t\n\t  var newPost = Post.build({\n\t    message: message,\n\t    status: status,\n\t    user_id: userId\n\t  });\n\t  var createdId = null;\n\t  newPost.save().then(function (createdItem) {\n\t    createdId = createdItem.id;\n\t    console.log('created item');\n\t    console.dir(createdItem);\n\t    if (mediaIds && mediaIds.length > 0) {\n\t      return createdItem.setMedia(mediaIds);\n\t    }\n\t    console.log('Got here, but maybe should not have');\n\t    return createdItem;\n\t  }).then(function () {\n\t    console.log('We set media, now for find and associate');\n\t    return Post.find({\n\t      where: { id: createdId },\n\t      include: [Media]\n\t    });\n\t  }).then(function (createdItem) {\n\t    console.log('created item');\n\t    console.dir(JSON.stringify(createdItem));\n\t    var cleanedPost = createdItem.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created post',\n\t      post: cleanedPost\n\t    });\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be created.';\n\t    if (err.code === 11000) {\n\t      errorMessage = 'Post already exists';\n\t    } else if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a post\n\t *   @param {string} message - the main message body\n\t *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n\t *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to map.\n\t */\n\tvar updatePostEndpoint = function updatePostEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.postId;\n\t  if (req.body.postId) {\n\t    itemId = req.body.postId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No post id provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var _req$body2 = req.body,\n\t      message = _req$body2.message,\n\t      mediaIds = _req$body2.mediaIds,\n\t      status = _req$body2.status;\n\t\n\t  var updates = {};\n\t  if (message && message.length > 0) updates.message = message;\n\t  if (status && status.length > 0) updates.status = status;\n\t  if (mediaIds && mediaIds.length > 0) updates.mediaIds = mediaIds;\n\t\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.updatePost(itemId, userId, updates).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      message: 'Successfully updated post',\n\t      post: updatedItem.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.dir(err);\n\t    var errorMessage = 'Post could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a post (marks the status to 'removed')\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar removePostEndpoint = function removePostEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.postId;\n\t  if (req.body.postId) {\n\t    itemId = req.body.postId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.deletePost(itemId, userId).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getPostsEndpoint = getPostsEndpoint;\n\texports.addPostEndpoint = addPostEndpoint;\n\texports.updatePostEndpoint = updatePostEndpoint;\n\texports.removePostEndpoint = removePostEndpoint;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.MediaController = exports.mediaRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(40);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(41);\n\t\n\tvar MediaController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.mediaRoutes = _routes2.default;\n\texports.MediaController = MediaController;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(3);\n\t\n\tvar _warrant = __webpack_require__(7);\n\t\n\tvar _controller = __webpack_require__(41);\n\t\n\tvar routes = new _express.Router();\n\troutes.get('/media', (0, _warrant.requireLogin)(), _controller.getMediaEndpoint);\n\troutes.post('/media', (0, _warrant.requireLogin)(), _controller.addMediumEndpoint);\n\troutes.put('/media/:mediaId', (0, _warrant.requireLogin)(), _controller.updateMediumEndpoint);\n\troutes.delete('/media/:mediaId', (0, _warrant.requireLogin)(), _controller.removeMediumEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removeMediumEndpoint = exports.updateMediumEndpoint = exports.addMediumEndpoint = exports.getMediaEndpoint = undefined;\n\t\n\tvar _models = __webpack_require__(8);\n\t\n\tvar _Authentication = __webpack_require__(33);\n\t\n\tvar Media = _models.models.Media;\n\t\n\t/* Get all of the media for the user.id.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the search parameters.\n\t */\n\tvar getMediaEndpoint = function getMediaEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Media.findAllForUser(userId).then(function (media) {\n\t    var cleanMedia = media.map(function jsonify(medium) {\n\t      return medium.toJSON();\n\t    });\n\t    res.status(200).json({\n\t      success: true,\n\t      media: cleanMedia\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Adds an media item to the Media database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} url - the email address\n\t *   @param {string} type - the type of media.\n\t *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n\t *      can act on behalf of it.\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar addMediumEndpoint = function addMediumEndpoint(req, res) {\n\t  var _req$body = req.body,\n\t      url = _req$body.url,\n\t      type = _req$body.type;\n\t\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  var newItem = Media.build({\n\t    url: url,\n\t    type: type,\n\t    user_id: userId\n\t  });\n\t  newItem.save().then(function (createdMedia) {\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created media item',\n\t      media: createdMedia.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Media item creation error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Media item could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a media item\n\t * Params needed in req.body:\n\t *   @param {string} url - the email address\n\t *   @param {string} type - the type of media.\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) mediaId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t *  Uses activeAccountId() to get the accountId to search for.\n\t */\n\tvar updateMediumEndpoint = function updateMediumEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var mediaId = req.params.mediaId;\n\t  if (req.body.mediaId) {\n\t    mediaId = req.body.mediaId;\n\t  }\n\t  var _req$body2 = req.body,\n\t      url = _req$body2.url,\n\t      type = _req$body2.type;\n\t\n\t  if (!mediaId) {\n\t    res.statusMessage = 'No mediaId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t\n\t  var updates = {};\n\t  if (url && url.length > 0) updates.url = url;\n\t  if (type && type.length > 0) updates.type = type;\n\t\n\t  if (Object.keys(updates).length === 0) {\n\t    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Media.updateMedia(mediaId, userId, updates).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully updated media',\n\t      media: updatedItem.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    console.log('Media update error: ');\n\t    console.dir(err);\n\t    var errorMessage = 'Media could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a media\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  Uses proxyUserId() to get the userId to search for.\n\t */\n\tvar removeMediumEndpoint = function removeMediumEndpoint(req, res) {\n\t  var userId = (0, _Authentication.proxyUserId)(req);\n\t  if (!userId) {\n\t    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.mediaId;\n\t  if (req.body.mediaId) {\n\t    itemId = req.body.mediaId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No mediaId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Media.deleteMedia(itemId, userId).then(function (updatedItem) {\n\t    if (!updatedItem) {\n\t      res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n\t      res.status(404).end();\n\t      return;\n\t    }\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Media could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getMediaEndpoint = getMediaEndpoint;\n\texports.addMediumEndpoint = addMediumEndpoint;\n\texports.updateMediumEndpoint = updateMediumEndpoint;\n\texports.removeMediumEndpoint = removeMediumEndpoint;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _dotenv = __webpack_require__(43);\n\t\n\tvar _dotenv2 = _interopRequireDefault(_dotenv);\n\t\n\tvar _requireEnvironmentVariables = __webpack_require__(44);\n\t\n\tvar _requireEnvironmentVariables2 = _interopRequireDefault(_requireEnvironmentVariables);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* 'As early as possible in your application, require and configure dotenv.'\n\t *   - https://www.npmjs.com/package/dotenv\n\t *\n\t * However, we aren't going to load these in production as it could lead to sloppy deploys.\n\t */\n\tif (false) {\n\t  console.log('Environment: ' + process.env.NODE_ENV + ' - loading DEV environment vars.');\n\t  _dotenv2.default.load();\n\t} else if (false) {\n\t  console.log('Environment: loading TEST environment vars.');\n\t  _dotenv2.default.load({ path: './envTest' });\n\t} else {\n\t  console.log('Environment: did NOT load environment variables from .env for ' + (\"production\") + '. This is not a problem if you define your environment variables outside of the file system as you should.');\n\t}\n\t\n\t/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n\t *   the process exits with code 400.\n\t * https://github.com/bjoshuanoah/require-environment-variables\n\t */\n\t(0, _requireEnvironmentVariables2.default)(['REDIS_URL', 'DATABASE_URL', 'MAIN_SERVER_PORT', 'ACCOUNT_PEPPER_1', 'ACCOUNT_ENCRYPT_CURRENT_PEPPER', 'IDIER_WORKER_ID', 'TOKEN_PEPPER_1', 'TOKEN_ENCRYPT_CURRENT_PEPPER', 'SESSION_SECRET']);\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"dotenv\");\n\n/***/ },\n/* 44 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"require-environment-variables\");\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _redis = __webpack_require__(46);\n\t\n\tvar _redis2 = _interopRequireDefault(_redis);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar REDIS_URL = process.env.REDIS_URL;\n\t\n\t/* Connect to redis */\n\tvar redisClient = _redis2.default.createClient(REDIS_URL);\n\t\n\tredisClient.on('error', function redisErrorReport(err) {\n\t  console.log('Redis connection error ' + err);\n\t});\n\t\n\texports.default = redisClient;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"redis\");\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"connect-redis\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// server.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ccf5968cb85eaa84855b","/* Base imports */\nimport { Server } from 'http';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport chalk from 'chalk';\nimport { validateUserSession } from './modules/Authentication/warrant';\n\n/* Routes */\nimport { userRoutes, recipientRoutes, sessionsRoutes, postRoutes, mediaRoutes } from './modules';\n\n/* Configurations */\nimport '../config/environment';\nimport redisClient from '../config/redisConnect';\n\nconst RedisStore = require('connect-redis')(session);\n\nlet port = process.env.API_SERVER_PORT;\nif (!port) {\n  port = 3006;\n}\n\nconst app = express();\n\n\n/* Middleware setup */\napp.use((err, req, res, next) => {\n  if (res.headersSent) next(err);\n  res.status(err.status || port).render('500');\n});\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(session({\n  name: 'snss',\n  secret: process.env.SESSION_SECRET,\n  resave: true,\n  saveUninitialized: false,\n  store: new RedisStore({ client: redisClient }),\n}));\napp.use(validateUserSession);\napp.use(morgan('combined'));\n\n/* Routes */\n// app.use('/api/v1', [userRoutes, recipientRoutes, authenticationRoutes, postRoutes]);\napp.use('/api/v1', [userRoutes, recipientRoutes, sessionsRoutes, postRoutes, mediaRoutes]);\n\napp.get('/', function baseReturn(req, res) {\n  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('Closing server.');\n  app.close();\n});\n\napp.on('close', () => {\n  console.log('Closing redis.');\n  redisClient.quit();\n});\n\n/* Start the API Server */\nconst server = Server(app);\nserver.listen(port, function reportOnListen(error) {\n  if (error) {\n    console.log(chalk.red(`API Server ERROR on startup: ${error}`));\n  } else {\n    console.log(chalk.bold.green(`API Server listening on http://localhost:${port}.`));\n  }\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/apiserver.js","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"express-session\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"morgan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"chalk\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"chalk\"\n// module id = 6\n// module chunks = 0","import { models, UserType } from '../../models';\n\nconst User = models.User;\n\n// ideas from https://github.com/rdegges/svcc-auth\n\n/* eslint-disable no-param-reassign */\n\n/* Stores user data in the session and sets related cookies\n *  - Store the user object as a req.user\n *  - Set a session cookie with the user object\n *\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n *  @param {Object} user - A user object.\n */\nconst createUserSession = function createUserSession(req, res, user) {\n  const cleanUser = {\n    id: user.id,\n    displayName: user.displayName,\n    email: user.email,\n    userType: user.userType,\n    validated: user.validated,\n  };\n\n  req.session.user = cleanUser;\n  req.user = cleanUser;\n  res.locals.user = cleanUser;\n  res.cookie('snssl', 'y', { httpOnly: false }); // Does the user have a session.\n};\n\n\n/* Destroy a user session\n * Removes the session and related cookies.\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n *  @param {Object} user - A user object.\n */\n /* eslint-disable no-unused-vars */\nconst destroyUserSession = function destroyUserSession(req, res, user) {\n  if (req.session) {\n    req.session.destroy();\n    res.clearCookie('snssl');\n  }\n};\n/* eslint-enable no-unused-vars */\n\n/**\n * A simple authentication middleware for Express.\n *\n * This middleware will load users from session data, and handle all user\n * proxying for convenience.\n * TODO: We're hitting the db every session. Store more data in session? Then, how to ban?\n */\nconst validateUserSession = function validateUserSession(req, res, next) {\n  if (req.session && req.session.user) {\n    User.findById(req.session.user.id).then((user) => {\n      if (user) {\n        if (user.userType === UserType.BANNED) {\n          destroyUserSession(req, res, user);\n          next();\n        }\n        createUserSession(req, res, user);\n      }\n      next();\n    });\n  } else {\n    next();\n  }\n};\n\n/* Authenticates a user with email and password.\n * Creates a session on valid authentication.\n */\nconst authenticateUser = function authenticateUser(req, res, body) {\n  const email = body.email;\n  const password = body.password;\n  if (!email || !password) {\n    const err = new Error('Email and password required.');\n    throw err;\n  }\n  let foundUser = null;\n  return User.find({ where: { email: email } })\n    .then(function checkForUser(theUser) {\n      if (theUser) {\n        return theUser;\n      }\n      throw new Error('Could not verify account');\n    })\n    .then(function comparePass(theUser) {\n      foundUser = theUser;\n      return theUser.comparePassword(password);\n    })\n    .then(function returnAccount(passwordsMatched) {\n      if (!passwordsMatched) {\n        throw new Error('Could not verify account');\n      }\n      createUserSession(req, res, foundUser);\n      return foundUser;\n    });\n};\n\n/**\n * Ensure a user is logged in before allowing them to continue their request.\n *\n * If a user isn't logged in, they'll be sent a 403.\n */\nconst requireLogin = function requireLogin() {\n  return function areWeAuthenticated(req, res, next) {\n    if (req && !req.user) {\n      res.statusMessage = 'Requires login.'; // eslint-disable-line no-param-reassign\n      res.status(403).end();\n    } else {\n      next();\n    }\n  };\n};\n\n/* eslint-enable no-param-reassign */\nexport {\n  validateUserSession,\n  createUserSession,\n  destroyUserSession,\n  authenticateUser,\n  requireLogin,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/warrant.js","import Sequelize from 'sequelize';\nimport chalk from 'chalk';\nimport Apprisal from './ApprisalModel';\nimport Media from './MediaModel';\nimport Post from './PostModel';\nimport Recipient from './RecipientModel';\nimport User from './UserModel';\nimport UserValidation from './UserValidation';\nimport {\n  UserType,\n  MediaType,\n  PostStatus,\n  MAX_POST_SEARCH_RETURN_LIMIT,\n  RecipientType,\n  RecipientStatus,\n} from './constants';\n\nconst allConfigs = {\n  development: {\n    username: 'mdw',\n    password: null,\n    database: 'socialnotsocial',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n  test: {\n    username: 'root',\n    password: null,\n    database: 'database_test',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n  production: {\n    username: 'root',\n    password: null,\n    database: 'database_production',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n};\n\n/* Set up the general process */\nconst env = process.env.NODE_ENV || 'development';\nconst config = allConfigs[env];\nlet sequelize = null;\nif (process.env.DATABASE_URL) {\n  sequelize = new Sequelize(process.env.DATABASE_URL);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\nconst db = {};\n\n/* Connect and log in to postgres */\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log('Success: Connection to Postgres established .');\n  }, function trapError(err) {\n    console.log(chalk.red('FAILURE: Unable to connect to the Postgres database:'), err);\n  });\n\n\n/* Create the models\n * TODO: This is a manual update nightmare.\n */\nconst apprisalModel = Apprisal(sequelize, Sequelize);\ndb[apprisalModel.name] = apprisalModel;\n\nconst mediaModel = Media(sequelize, Sequelize);\ndb[mediaModel.name] = mediaModel;\n\nconst postModel = Post(sequelize, Sequelize);\ndb[postModel.name] = postModel;\n\nconst recipientModel = Recipient(sequelize, Sequelize);\ndb[recipientModel.name] = recipientModel;\n\nconst userModel = User(sequelize, Sequelize);\ndb[userModel.name] = userModel;\n\nconst userValidationModel = UserValidation(sequelize, Sequelize);\ndb[userValidationModel.name] = userValidationModel;\n\n/* Do associations */\nObject.keys(db).forEach(function associateThem(modelName) {\n  if ('associate' in db[modelName]) {\n    db[modelName].associate(db);\n  }\n});\n\n/* Push the models to the database */\nsequelize\n  .sync() //   .sync({ force: true }) <= removed as this drops the table\n  .then(() => {\n    console.log('Success: Synced models to database.');\n  }, function trapSyncError(err) {\n    console.log(chalk.red('FAILURE: An error occurred while creating the table:'), err);\n  });\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nconst models = db;\nexport {\n  models,\n  UserType,\n  MediaType,\n  PostStatus,\n  MAX_POST_SEARCH_RETURN_LIMIT,\n  RecipientType,\n  RecipientStatus,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/index.js","module.exports = require(\"sequelize\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sequelize\"\n// module id = 9\n// module chunks = 0","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\n\n/* An apprisal is an actual notification sent to a user or system of a new post.\n * Has an association with the Post object and the recipient that it will be sent to.\n * This would be called a notification in another system, but we are reserving that for future use.\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Apprisal = sequelize.define(\n    'Apprisal', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      deliveredAt: {  // The date the item was either sent or pushed to service\n        type: DataTypes.DATE,\n        field: 'delivered_at',\n      },\n      firstOpenedAt: {  // This only applies to emails with trackers. When the email was viewed.\n        type: DataTypes.DATE,\n        field: 'first_opened_at',\n      },\n      firstViewedAt: {  // When this item was viewed on site.\n        type: DataTypes.DATE,\n        field: 'first_viewed_at',\n      },\n      canRespond: { // Can the recipient of this apprisal respond? Overrides canRespond on recipient\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n        field: 'can_respond',\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(apprisal) {\n          if (!apprisal.id) {\n            apprisal.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Apprisal.belongsTo(models.Post, {\n            foreignKey: {\n              field: 'post_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Apprisal.belongsTo(models.Recipient, {\n            foreignKey: {\n              field: 'recipient_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n        },\n      },\n    },\n  );\n  return Apprisal;\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/ApprisalModel.js","import Base58 from 'base58';\nimport generator from 'generate-password';\n\n/* idier: identifier generator. Inspired by twitter's snowflake system\n * https://blog.twitter.com/2010/announcing-snowflake\n * We use the timestamp converted to seconds + a worker id from the environment +\n *   a sequence number (see below) + a single random number just in case...\n */\nconst idier = function idier() {\n  /* The sequence is stored on the global object. The sequence should be between 1-999 to keep\n   *   our total id number in the right space to be converted.\n   *   Note: There's probably an opportunity to use Redis or similar for the sequence.\n   */\n  let mySequence = 1;\n  const globalSeq = global.idierSequence;\n  if (globalSeq && globalSeq < 1000 && globalSeq > 0) {\n    mySequence = globalSeq;\n    global.idierSequence += 1;\n  } else {\n    global.idierSequence = mySequence + 1;\n  }\n\n  let workerId = process.env.IDIER_WORKER_ID;\n  if (!workerId) {\n    workerId = Math.floor(Math.random() * 10);\n  }\n  const timeStamp = Math.floor(Date.now() / 1000);\n  const randomnumber = Math.floor(Math.random() * 10);\n  const snowflake = `${timeStamp}${workerId}${mySequence}${randomnumber}`;\n  const snowflakeInt = parseInt(snowflake, 10);\n  return snowflakeInt;\n};\n\n/* toHumanId - transform a number into a base58 encoded string for use in human visible tokens.\n   Uses https://www.npmjs.com/package/base58\n  */\nconst toHumanId = function toHumanId(idNumber) {\n  const encoded = Base58.encode(idNumber);\n  return encoded;\n};\n\n/* toNumbericId - transform a humanId (base32 encoded) string to a number to use by the computer.\n  */\nconst toNumericId = function toNumericId(idString) {\n  const decoded = Base58.decode(idString);\n  return decoded;\n};\n\n\n/* Password generator\n * Creates a 12 digit password with letters and numbers.\n * @param {number} length - lenght of password\n * @param {bool} numbers - inlcude numbers\n * @param {string} exclude - characters to exclude\n*/\nconst passGen = function passGen(length = 12, numbers = true, exclude = '') {\n  const password = generator.generate({\n    length: length,\n    numbers: numbers,\n    exclude: exclude,\n    strict: true,\n  });\n  return password;\n};\n\nexport { idier, toHumanId, toNumericId, passGen };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/idier.js","module.exports = require(\"base58\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base58\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"generate-password\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"generate-password\"\n// module id = 13\n// module chunks = 0","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { MediaType } from './constants';\n\n\n/* A piece of media that is uploaded.\n * Currently supports MediaType.\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Media = sequelize.define(\n    'Media', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      url: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isUrl: true,\n        },\n      },\n      type: {\n        type: DataTypes.ENUM,\n        values: [MediaType.PHOTO, MediaType.VIDEO],\n        defaultValue: MediaType.PHOTO,\n      },\n      width: {\n        type: DataTypes.INTEGER,\n      },\n      height: {\n        type: DataTypes.INTEGER,\n      },\n      size: {\n        type: DataTypes.INTEGER,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(media) {\n          if (!media.id) {\n            media.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Media.belongsTo(models.User);\n          Media.belongsToMany(models.Post, { through: 'PostMedia' });\n        },\n      },\n    },\n  );\n\n   /* Determine total number of media for account\n   * @param {number} - userId\n   */\n  Media.totalForUser = function countAll(userId) {\n    return Media.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update a Media\n   * @param {number} - id: The id of the post\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated post or null if it couldn't be found\n   */\n  Media.updateRecipient = function updateMedia(id, userId, updates) {\n    return Media.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundMedia = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundMedia[key] = updates[key];\n      });\n      return foundMedia.save();\n    });\n  };\n\n  /* Delete a Media\n   * @param {number} - id: The id\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted media or null if it couldn't be found\n   */\n  Media.deleteMedia = function deleteMedia(id, userId) {\n    return Media.findOne({ where: { id: id, user_id: userId } })\n    .then((thisMedia) => { // eslint-disable-line arrow-body-style\n      if (thisMedia) {\n        return thisMedia.destroy();\n      }\n      return null;\n    });\n  };\n  return Media;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/MediaModel.js","/* A type of user */\nconst UserType = {\n  NORMAL: 'ut_normal',\n  ADMIN: 'ut_admin',\n  CUSTSERVICE: 'ut_custservice',\n  BANNED: 'ut_banned',\n  DEMO: 'ut_demo',\n};\n\n/* The type of media */\nconst MediaType = {\n  VIDEO: 'mt_video',\n  PHOTO: 'mt_photo',\n};\n\n/* Enum for the post.status field */\nconst PostStatus = {\n  DRAFT: 'ps_draft',\n  POSTED: 'ps_posted',\n  REMOVED: 'ps_removed',\n};\n\n/* The maximum we can return from a search */\nconst MAX_POST_SEARCH_RETURN_LIMIT = 100;\n\n/* Enum for the Recipient.type field */\nconst RecipientType = {\n  EMAIL: 'rt_email',\n  TEXT: 'rt_text',\n  POST: 'rt_post',\n  FACEBOOK: 'rt_facebook',\n};\n\n/* Enum for the Recipient.status field */\nconst RecipientStatus = {\n  VALIDATING: 'rs_validating',\n  ACTIVE: 'rs_active',\n  REMOVED: 'rs_removed',\n  BOUNCING: 'rs_bounding',\n  UNSUBSCRIBED: 'rs_unsubscribed',\n};\n\nexport {\n  UserType,\n  MediaType,\n  PostStatus,\n  MAX_POST_SEARCH_RETURN_LIMIT,\n  RecipientType,\n  RecipientStatus,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/constants.js","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { PostStatus, MAX_POST_SEARCH_RETURN_LIMIT } from './constants';\n\n/* A post is the atomic messages of the user\n * https://developers.facebook.com/docs/graph-api/reference/v2.8/post\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Post = sequelize.define(\n    'Post', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      status: {\n        type: DataTypes.ENUM,\n        values: [PostStatus.DRAFT, PostStatus.POSTED, PostStatus.REMOVED],\n        defaultValue: PostStatus.POSTED,\n      },\n      message: {\n        type: DataTypes.STRING(5000),\n        allowNull: false,\n      },\n      edited: {\n        type: DataTypes.BOOLEAN,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(post) {\n          if (!post.id) {\n            post.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Post.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Post.belongsToMany(models.Media, { through: 'PostMedia' });\n          Post.hasMany(models.Apprisal);\n        },\n      },\n    },\n  );\n\n  /* Find all posts for a userId\n   * @param {string} userId - the userId to search for\n   * @param {number} limit - the number to find.\n   * @param {number} offset - The number to skip.\n   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n   */\n  Post.findAllForUser = function findAllForUser(userId, options) {\n    let limit = 20;\n    if (options.limit) {\n      limit = options.limit;\n    }\n    let offset = 0;\n    if (options.limit) {\n      offset = options.offset;\n    }\n    let beforeId = null;\n    if (options.beforeId) {\n      beforeId = options.beforeId;\n    }\n    let includeTables = [];\n    if (options.includeTables) {\n      includeTables = options.includeTables;\n    }\n\n    if (!userId) {\n      throw new Error('No userId provided');\n    }\n    const whereClause = {};\n\n    whereClause.where = { user_id: Number(userId) };\n\n    if (beforeId && beforeId > 0) {\n      whereClause.id = { $lt: beforeId };\n    }\n\n    let limiter = limit;\n    if (limiter > MAX_POST_SEARCH_RETURN_LIMIT) {\n      limiter = MAX_POST_SEARCH_RETURN_LIMIT;\n    }\n    whereClause.limit = limiter;\n\n    if (offset > 0) {\n      whereClause.offset = offset;\n    }\n    whereClause.order = 'id DESC';\n    if (includeTables) {\n      whereClause.include = includeTables;\n    }\n    return this.findAll(whereClause);\n  };\n\n  /* Determine total number of posts for account\n   * @param {number} - userId\n   */\n  Post.totalForUser = function countPosts(userId) {\n    return Post.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update a post\n   * @param {number} - id: The id of the post\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated post or null if it couldn't be found\n   */\n  Post.updatePost = function updatePost(id, userId, updates) {\n    return Post.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundPost = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundPost[key] = updates[key];\n      });\n      return foundPost.save();\n    });\n  };\n\n  /* Delete a post\n   * @param {number} - id: The id of the post\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted post or null if it couldn't be found\n   */\n  Post.deletePost = function deletePost(id, userId) {\n    return Post.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => { // eslint-disable-line consistent-return\n      if (!foundItem) {\n        return null;\n      }\n      const foundPost = foundItem;\n      foundPost.status = PostStatus.REMOVED;\n      return foundPost.save();\n    })\n    .then((thisPost) => { // eslint-disable-line arrow-body-style\n      return thisPost.destroy();\n    });\n  };\n\n  return Post;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/PostModel.js","import { idier, passGen } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { appraiseEmail } from '../../shared/helpers/appraise';\nimport { deAesHash, aesHash } from './passwordEncryption';\nimport { RecipientType, RecipientStatus, MAX_POST_SEARCH_RETURN_LIMIT } from './constants';\n\n/* A recipient is a person or system where posts will be sent.\n */\nmodule.exports = (sequelize, DataTypes) => {\n  const Recipient = sequelize.define(\n    'Recipient', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      type: {\n        type: DataTypes.ENUM,\n        values: [RecipientType.EMAIL,\n          RecipientType.TEXT,\n          RecipientType.POST,\n          RecipientType.FACEBOOK,\n        ],\n        defaultValue: RecipientType.EMAIL,\n      },\n      status: {\n        type: DataTypes.ENUM,\n        values: [RecipientStatus.ACTIVE,\n          RecipientStatus.VALIDATING,\n          RecipientStatus.REMOVED,\n          RecipientStatus.BOUNCING,\n          RecipientStatus.UNSUBSCRIBED,\n        ],\n        defaultValue: RecipientStatus.ACTIVE,\n      },\n      displayName: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        field: 'display_name',\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidEmail: function validateEmail(value) {\n            const appraisalMessages = appraiseEmail(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n      },\n      // Each recipient gets an access token. Combined with Apprisal.id, makes for the link\n      // Advantage: if the token is stolen, can be recomputed and renders all apprisals with this\n      //   token invalid. Encrypted because if db hacked, could be used to see all data. (issue?)\n      accessTokenEncrypted: {\n        type: DataTypes.STRING,\n        field: 'access_token_hash',\n        allowNull: false,\n      },\n      // Pepper for the AES string used in the accessToken Encryption.\n      accessTokenPepper: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        field: 'access_token_pepper',\n      },\n      // Can a user respond? This can be overridden by Apprisals\n      canRespond: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n        field: 'can_respond',\n      },\n      validatedAt: {\n        type: DataTypes.DATE,\n        field: 'validated_at',\n      },\n      validated: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      unsubscribedAt: {\n        type: DataTypes.DATE,\n        field: 'unsubscribed_at',\n      },\n      unsubscribedReason: {\n        type: DataTypes.STRING,\n        field: 'unsubscribed_reason',\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      indexes: [\n        {\n          unique: true,\n          fields: ['user_id', 'email'],\n        },\n      ],\n      hooks: {\n        beforeValidate: function addId(recipient) {\n          if (!recipient.id) {\n            recipient.id = idier(); // eslint-disable-line no-param-reassign\n          }\n          if (!recipient.accessToken) {\n            const token = passGen(15, true, '.');\n            console.log(`Recipient token: ${token}`);\n            recipient.setAccessToken(token); // eslint-disable-line no-param-reassign\n          }\n          if (recipient.type === RecipientType.FACEBOOK) {\n            recipient.canRespond = false; // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      instanceMethods: {\n        setAccessToken: function setAccessToken(token) {\n          const self = this;\n          if (!token || token.length < 15) {\n            throw new Error('Invalid token passed to recipient. This is an internal error.');\n          }\n          const encryptedValue = aesHash(token, process.env.TOKEN_ENCRYPT_CURRENT_PEPPER);\n          self.accessTokenEncrypted = encryptedValue.encrypted;\n          self.accessTokenPepper = encryptedValue.pepperId;\n        },\n        getAccessToken: function getAccessToken() {\n          const self = this;\n          return deAesHash(\n            self.accessTokenEncrypted,\n            self.accessTokenPepper,\n          );\n        },\n        toJSON: function stripValues() {\n          const values = Object.assign({}, this.get());\n          delete values.accessTokenEncrypted;\n          delete values.accessTokenPepper;\n          delete values.deletedAt;\n          return values;\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          Recipient.belongsTo(models.User, {\n            foreignKey: {\n              field: 'user_id',\n              allowNull: false,\n            },\n            onDelete: 'cascade',\n          });\n          Recipient.hasMany(models.Apprisal);\n        },\n      },\n    },\n  );\n\n  /* Find all recipients for a userId\n   * @param {string} userId - the userId to search for\n   * @param {number} limit - the number to find.\n   * @param {number} offset - The number to skip.\n   * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n   */\n  Recipient.findAllForUser = function findAllForUser(userId, limit = 20, offset = 0, beforeId) {\n    if (!userId) {\n      throw new Error('No userId provided');\n    }\n\n    const userWhere = `\"user_id\": \"${userId}\"`;\n\n    let beforeIdWhere = '';\n    if (beforeId && beforeId > 0) {\n      beforeIdWhere = `, id : {$lt: ${beforeId}}`;\n    }\n\n    let limiter = limit;\n    if (limiter > MAX_POST_SEARCH_RETURN_LIMIT) {\n      limiter = MAX_POST_SEARCH_RETURN_LIMIT;\n    }\n    const limitClause = `, \"limit\": \"${limiter}\", `;\n    let offsetClause = '';\n    if (offset > 0) {\n      offsetClause = `, \"offset\": \"${offset}\", `;\n    }\n    const orderClause = '\"order\": \"id DESC\"';\n    const queryJSON = `{ \"where\": { ${userWhere}${beforeIdWhere} }${limitClause}${offsetClause} ${orderClause}}`;\n    const query = JSON.parse(queryJSON);\n    return this.findAll(query);\n  };\n\n  /* Determine total number of recipients for user\n   * @param {number} - userId\n   */\n  Recipient.totalForUser = function countAll(userId) {\n    return Recipient.findAndCountAll({\n      where: { user_id: userId },\n    });\n  };\n\n  /* Update a Recipient\n   * @param {number} - id: The id of the item\n   * @param {number} - userId: The id of the user\n   * @param {object} - updates: The fields and values to update\n   * Returns: Either an updated recipient or null if it couldn't be found\n   */\n  Recipient.updateRecipient = function updateRecipient(id, userId, updates) {\n    return Recipient.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => {\n      if (!foundItem) {\n        return null;\n      }\n      const foundRecipient = foundItem;\n      const fieldsToUpdateKeys = Object.keys(updates);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundRecipient[key] = updates[key];\n      });\n      return foundRecipient.save();\n    });\n  };\n\n  /* Delete a Recipient\n   * @param {number} - id: The id of the item\n   * @param {number} - userId: The id of the user\n   * Returns: Either an deleted recipient or null if it couldn't be found\n   */\n  Recipient.deleteRecipient = function deleteRecipient(id, userId) {\n    return Recipient.findOne({ where: { id: id, user_id: userId } })\n    .then((foundItem) => { // eslint-disable-line consistent-return\n      if (!foundItem) {\n        return null;\n      }\n      const foundRecipient = foundItem;\n      foundRecipient.status = RecipientStatus.REMOVED;\n      return foundRecipient.save();\n    })\n    .then((thisRecipient) => { // eslint-disable-line arrow-body-style\n      return thisRecipient.destroy();\n    });\n  };\n\n  return Recipient;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/RecipientModel.js","import { isEmail, isEmpty } from 'validator';\nimport owasp from 'owasp-password-strength-test';\n\n/* Is the email valid? Uses the validator library to test.\n */\nconst appraiseEmail = function appraiseEmail(emailAddress) {\n  const messages = [];\n  if (isEmpty(emailAddress)) {\n    messages.push('Email address is required.');\n  }\n  if (!isEmpty(emailAddress) && !isEmail(emailAddress)) {\n    messages.push('Email address does not appear to be valid.');\n  }\n  return messages;\n};\n\n/* Test for the validity of the displayName.\n *  Currently only checks if it's empty.\n */\nconst appraiseDisplayName = function appraiseDisplayName(displayName) {\n  const messages = [];\n  if (isEmpty(displayName)) {\n    messages.push('Display name is required.');\n  }\n  return messages;\n};\n\n/* Tests a password.\n * Must be valid and pass the owasp validation tests.\n */\nconst appraisePassword = function appraisePassword(password) {\n  let messages = [];\n  if (isEmpty(password)) {\n    messages.push('Password is required.');\n  } else {\n    const owaspResults = owasp.test(password);\n    if (!owaspResults.strong) {\n      messages = messages.concat(owaspResults.errors);\n    }\n  }\n  return messages;\n};\n\nconst appraisePasswordErrors = {\n  minLength: 0,\n  maxLength: 1,\n  repeating: 2,\n  needLowercase: 3,\n  needUppercase: 4,\n  needNumber: 5,\n  needCharacter: 6,\n};\n\n/* A wrapper for awasp tests that returns this\n * {\n *   errors              : [],\n *   failedTests         : [],\n *   requiredTestErrors  : [],\n *   optionalTestErrors  : [],\n *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n *   isPassphrase        : false,\n *   strong              : true,\n *   optionalTestsPassed : 4\n * }\n */\nconst appraisePasswordExtra = function appraisePasswordExtra(password) {\n  return owasp.test(password);\n};\n\n/* Tests for the presense of an accountID.\n *  Only checks if it's empty.\n *  TODO: Check if the account actually exists.\n */\nconst appraiseAccountId = function appraiseAccountId(accountId) {\n  const messages = [];\n  if (isEmpty(accountId)) {\n    messages.push('AccountId is required.');\n  }\n  return messages;\n};\n\n/* Validates multiple options. Pass in an object with one of the following:\n * email: {string} validates an email (or empty}\n * displayName; {string} checks for empty\n * password: {string} validates a password\n * accountId: {string} validates the accountId\n * @returns: an object (see validator object below)\n */\nconst appraiseThese = function appraiseThese(what) {\n  const appraised = {\n    success: true,  // Did all tests pass\n    tested: [],  // Which tests where done? Check this to make sure things were passed in correctly.\n    errors: {},  // Error output from the sub-testers as objects.\n  };\n  if ('email' in what) {\n    appraised.tested.push('email');\n    const messages = appraiseEmail(what.email);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.email = messages;\n    }\n  }\n  if ('password' in what) {\n    appraised.tested.push('password');\n    const messages = appraisePassword(what.password);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.password = messages;\n    }\n  }\n  if ('displayName' in what) {\n    appraised.tested.push('displayName');\n    const messages = appraiseDisplayName(what.displayName);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.displayName = messages;\n    }\n  }\n  if ('accountId' in what) {\n    appraised.tested.push('accountId');\n    const messages = appraiseAccountId(what.accountId);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.accountId = messages;\n    }\n  }\n  return appraised;\n};\n\n/* Tests for the presense of a post message.\n *  Only checks if it's empty.\n *  Here for future functionality.\n */\nconst appraisePostMessage = function appraisePostMessage(postMessage) {\n  const messages = [];\n  if (!postMessage || isEmpty(postMessage)) {\n    messages.push('A message is required.');\n  }\n  return messages;\n};\n\n\nexport {\n  appraiseThese,\n  appraiseEmail,\n  appraiseDisplayName,\n  appraisePassword,\n  appraisePasswordExtra,\n  appraisePasswordErrors,\n  appraiseAccountId,\n  appraisePostMessage,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/appraise.js","module.exports = require(\"validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 19\n// module chunks = 0","module.exports = require(\"owasp-password-strength-test\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"owasp-password-strength-test\"\n// module id = 20\n// module chunks = 0","import { compare, hash } from 'bcrypt';\nimport crypto from 'crypto';\n\n/* Hashes the password into a SHA512 hex hash */\nconst hashPassword = function hashPassword(password) {\n  const hasher = crypto.createHash('sha512');\n  hasher.update(password);\n  const hashed = hasher.digest('hex');\n  return hashed;\n};\n\n/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n * Salt is returned as part of the hash and thus saved.\n * Note that this version of bcrypt only takes the first 72 characters.\n  */\nconst bcryptHash = function bcryptHash(passwordhash) {\n  const saltRounds = 10;\n  return hash(passwordhash, saltRounds);\n};\n\n/* Encrypts the input using aes256 using a pepper stored\n *   in the environment. This is what should be finally saved.\n */\nconst aesHash = function aesHash(toEncrypt, pepperId = process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER) {\n  const currentPepperId = pepperId;\n  if (!currentPepperId) {\n    throw new Error('Could not encrypt item - no pepper information available');\n  }\n  const pepper = process.env[currentPepperId];\n  if (!pepper) {\n    throw new Error('Could not encrypt item - no pepper available');\n  }\n  const algorithm = 'aes-256-ctr';\n  const cipher = crypto.createCipher(algorithm, pepper);\n  let crypted = cipher.update(toEncrypt, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return { encrypted: crypted, pepperId: currentPepperId };\n};\n\n/* Encrypting a password.\n   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n*/\nconst encryptPassword = function encryptPassword(rawPassword) {\n  return Promise.resolve(rawPassword)\n  .then(hashPassword)\n  .then(bcryptHash)\n  .then(aesHash);\n};\n\n/* Decrypts an encrypted value using aes256 using a pepper stored\n *   in the environment.\n */\nconst deAesHash = function deAesHash(toDecrypt, pepperId) {\n  const pepper = process.env[pepperId];\n  if (!pepper) {\n    return new Error('Pepper not found.');\n  }\n  const algorithm = 'aes-256-ctr';\n  const decipher = crypto.createDecipher(algorithm, pepper);\n  let decrypted = decipher.update(toDecrypt, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n};\n\n\n/* Compare passwords.\n * Because we are using hashing and encrypting, we have to do that before we compare.\n */\nconst passwordsMatch = function passwordsMatch(\n  candidatePassword,\n  encryptedPasswordHash,\n  pepperId,\n  ) {\n  // compare the submitted password to encrypted password in database.\n  const candidateHashed = hashPassword(candidatePassword);\n  const decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n  return compare(candidateHashed, decryptedPass);\n};\n\nexport { encryptPassword, deAesHash, hashPassword, bcryptHash, aesHash, passwordsMatch };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/passwordEncryption.js","module.exports = require(\"bcrypt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bcrypt\"\n// module id = 22\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 23\n// module chunks = 0","import { encryptPassword, passwordsMatch } from './passwordEncryption';\nimport { appraisePassword, appraiseEmail, appraiseDisplayName } from '../../shared/helpers/appraise';\nimport { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\nimport { UserType } from './constants';\n\n/* A user is the core part of the system */\nmodule.exports = (sequelize, DataTypes) => {\n  const User = sequelize.define(\n    'User', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      userType: {\n        field: 'user_type',\n        type: DataTypes.ENUM,\n        values: [UserType.NORMAL, UserType.ADMIN, UserType.CUSTSERVICE, UserType.BANNED],\n        defaultValue: UserType.NORMAL,\n        allowNull: false,\n      },\n      displayName: {\n        field: 'display_name',\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidDisplayName: function validateDisplayName(value) {\n            const appraisalMessages = appraiseDisplayName(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidEmail: function validateEmail(value) {\n            const appraisalMessages = appraiseEmail(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n        unique: true,\n      },\n      encryptedPasswordHash: {\n        field: 'encrypted_password_hash',\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n      encryptedPasswordPepperId: {\n        field: 'encrypted_password_pepperId',\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n      validatedAt: {\n        type: DataTypes.DATE,\n        field: 'validated_at',\n      },\n      validated: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      hooks: {\n        beforeValidate: function addId(user) {\n          if (!user.id) {\n            user.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      instanceMethods: {\n        setPassword: function setPassword(password) {\n          const self = this;\n          return Promise.resolve(appraisePassword(password))\n            .then(function checkAppraisal(appraisalMessages) {\n              if (appraisalMessages.length > 0) {\n                throw new Error(appraisalMessages.join(', '));\n              }\n              return password;\n            })\n            .then(function runHashing(passwordValue) {\n              return encryptPassword(passwordValue);\n            })\n            .then((encryptedValue) => {\n              self.encryptedPasswordHash = encryptedValue.encrypted;\n              self.encryptedPasswordPepperId = encryptedValue.pepperId;\n            })\n            .catch((err) => {\n              throw err;\n            });\n        },\n        toJSON: function stripValues() {\n          const values = Object.assign({}, this.get());\n          delete values.encryptedPasswordHash;\n          delete values.encryptedPasswordPepperId;\n          delete values.deletedAt;\n          return values;\n        },\n        // TODO: We really need a profile table but this works for now.\n        toProfile: function stripForProfile() {\n          const values = Object.assign({}, this.get());\n          delete values.encryptedPasswordHash;\n          delete values.encryptedPasswordPepperId;\n          delete values.email;\n          delete values.deletedAt;\n          return values;\n        },\n        comparePassword: function comparePass(candidate) {\n          return passwordsMatch(\n            candidate,\n            this.encryptedPasswordHash,\n            this.encryptedPasswordPepperId,\n          );\n        },\n        canActOnBehalfOf: function behalfOf(accountId) { // eslint-disable-line no-unused-vars\n          if (this.userType === UserType.ADMIN\n            || this.userType === UserType.CUSTSERVICE) {\n            return true;\n          }\n          return false;\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          User.hasMany(models.Post);\n          User.hasMany(models.Recipient);\n          User.hasMany(models.Media);\n          User.hasMany(models.UserValidation);\n        },\n      },\n    },\n  );\n  return User;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/UserModel.js","import { idier } from '../../shared/helpers/idier'; // eslint-disable-line no-unused-vars\n\n/* A validation is a sent notification sent to a user or system of a new post.\n * Has an association with the Post object and the recipient that it will be sent to.\n * This would be called a notification in another system, but we are reserving that for future use.\n */\nconst UserValidationDefinition = (sequelize, DataTypes) => {\n  const UserValidation = sequelize.define(\n    'UserValidation', {\n      id: {\n        type: DataTypes.BIGINT,\n        field: 'id',\n        primaryKey: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      deliveredAt: {  // The date the item was either sent or pushed to service\n        type: DataTypes.DATE,\n        field: 'delivered_at',\n      },\n      visitedAt: { // The date the item was visited for the first time\n        type: DataTypes.DATE,\n        field: 'visited_at',\n      },\n    },\n    {\n      underscored: true,\n      paranoid: true,\n      timestamps: true,\n      hooks: {\n        beforeValidate: function addId(validation) {\n          if (!validation.id) {\n            validation.id = idier(); // eslint-disable-line no-param-reassign\n          }\n        },\n      },\n      classMethods: {\n        associate: function associateModels(models) {\n          UserValidation.belongsTo(models.User);\n        },\n      },\n    },\n  );\n  return UserValidation;\n};\n\nexport default UserValidationDefinition;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/models/UserValidation.js","export * from './User';\nexport * from './Recipient';\nexport * from './Authentication';\nexport * from './Post';\nexport * from './Media';\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/index.js","import userRoutes from './routes';\nimport * as UserController from './controller';\n\nexport { userRoutes, UserController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/User/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  addUserEndpoint,\n  getUserInfoEndpoint,\n  updateUserEndpoint,\n  updatePasswordEndpoint,\n} from './controller';\n\nconst routes = new Router();\n\nroutes.route('/users')\n  .post(addUserEndpoint);\n\nroutes.get('/users', requireLogin(), getUserInfoEndpoint);\nroutes.put('/users', requireLogin(), updateUserEndpoint);\nroutes.put('/passwords', requireLogin(), updatePasswordEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/User/routes.js","import { createUserSession, destroyUserSession } from '../Authentication/warrant';\n\nimport { models } from '../../models';\n\nconst User = models.User;\n\n/* Returns either the current user's id or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current user can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user attached\n *  @returns {string} id - a user id to use in searches.\n *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n */\nconst activeUsertId = function getUser(req) {\n  const currentUser = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.id) {\n    return req.user.id;\n  }\n  return null;\n};\n\n/* Adds an user to the Users database based on the fields passed in.\n * Params needed in body:\n *   @param {string} email - the email address\n *   @param {string} password - the user's password. Must pass owasp tests.\n *   @param {string} displayName - the name to display on the user's page.\n */\nconst addUserEndpoint = (req, res) => {\n  console.log('user');\n  console.dir(models);\n\n  const { email, password, displayName } = req.body;\n  const newUser = User.build({\n    email: email,\n    displayName: displayName,\n  });\n  newUser.setPassword(password)\n    .then(() => { // eslint-disable-line arrow-body-style\n      return newUser.save();\n    })\n    .then((createdUser) => {\n      console.log('Created User');\n      createUserSession(req, res, createdUser);\n      console.log('Finished login');\n      const cleanUser = createdUser.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully Registered',\n        user: cleanUser,\n      });\n    })\n    .catch((err) => {\n      destroyUserSession(req, res);\n      console.log(err);\n      console.dir(err);\n      // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n      if (err.code === 11000) {\n        res.statusMessage = 'User with that email already exists'; // eslint-disable-line no-param-reassign\n        res.status(409).end();\n        return;\n      }\n      let errorMessage = 'User could not be created.';\n      if (err.message) {\n        errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      // TODO: Return errors better. The err object has an errors array that could be parsed.\n      res.status(422).send(JSON.stringify({ errors: err.message }));\n    });\n};\n\n/* Get user info for id.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The user's id to act on behalf of if current user\n *      can act on behalf of it.\n *  @param {number} id of user - Will be pulled from req.user.\n *  Uses activeUsertId() to get the search parameters.\n */\nconst getUserInfoEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = activeUsertId(req);\n  if (!userId) {\n    return res.status(422).json({ success: false, message: 'Not logged in.' });\n  }\n  User.findById(userId)\n    .then((item) => {\n      const cleanedItem = item.toJSON();\n      res.status(201).json({\n        success: true,\n        user: cleanedItem,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Update user info\n * Requires values in the body of the req.\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n * Possible options (not all have to be passed):\n *     @param {String} email - the new email address\n *      TODO: validate the new email\n *     @param {String} displayName - the new displayName\n */\nconst updateUserEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = activeUsertId(req);\n  if (!userId) {\n    return res.status(422).json({ success: false, message: 'Not logged in.' });\n  }\n  const { email, displayName } = req.body;\n  User.findById(userId)\n    .then((item) => {\n      const foundUser = item;\n      if (email && email.length > 0) {\n        foundUser.email = email;\n      }\n      if (displayName && displayName.length > 0) {\n        foundUser.displayName = displayName;\n      }\n      return foundUser.save();\n    })\n    .then((user) => {\n      const cleanedUser = user.toJSON();\n      res.status(200).json({\n        success: true,\n        user: cleanedUser,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Update password endpoint\n * Requires old and new password.\n * First validates current password then updates to the new password.\n *  @param {Object} req - The http request object.\n *  @param {Object} res - The http response object.\n *  Required in req object:\n *     @param {String} password - the current password\n *     @param {String} newPassword - the new password\n */\nconst updatePasswordEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = activeUsertId(req);\n  if (!userId) {\n    return res.status(422).json({ success: false, message: 'Not logged in.' });\n  }\n  const { password, newPassword } = req.body;\n  let foundUser = null;\n  User.findById(userId)\n    .then(function comparePass(theUser) {\n      foundUser = theUser;\n      return theUser.comparePassword(password);\n    })\n    .then(function wasPasswordValid(passwordsMatched) {\n      if (!passwordsMatched) {\n        throw new Error('Could not verify user');\n      }\n      return foundUser;\n    })\n    .then(function updatePass() {\n      return foundUser.setPassword(newPassword);\n    })\n    .then(function saveUser() {\n      return foundUser.save();\n    })\n    .then(function returnCompleted() {\n      res.status(200).end();\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\nexport {\n  addUserEndpoint,\n  getUserInfoEndpoint,\n  updateUserEndpoint,\n  updatePasswordEndpoint,\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/User/controller.js","import recipientRoutes from './routes';\nimport * as RecipientController from './controller';\n\nexport { recipientRoutes, RecipientController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  getRecipientsEndpoint,\n  addRecipientEndpoint,\n  updateRecipientEndpoint,\n  removeRecipientEndpoint,\n} from './controller';\n\nconst routes = new Router();\nroutes.get('/recipients', requireLogin(), getRecipientsEndpoint);\nroutes.post('/recipients', requireLogin(), addRecipientEndpoint);\nroutes.put('/recipients/:recipientId', requireLogin(), updateRecipientEndpoint);\nroutes.delete('/recipients/:recipientId', requireLogin(), removeRecipientEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Recipient = models.Recipient;\n\n/* Get all of the recipients for the userId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the search parameters.\n */\nconst getRecipientsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Recipient.findAllForUser(userId)\n    .then((recipients) => {\n      const cleanRecipients = recipients.map(function jsonify(recipient) {\n        return recipient.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        recipients: cleanRecipients,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds an recipient to the Recipients database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} email - the email address\n *   @param {string} displayName - the displayName for the recipient.\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst addRecipientEndpoint = (req, res) => {\n  const { email, displayName } = req.body;\n  const userId = proxyUserId(req);\n  const newRecipient = Recipient.build({\n    email: email,\n    displayName: displayName,\n    user_id: userId,\n  });\n  newRecipient.save()\n    .then((createdRecipient) => {\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created recipient',\n        recipient: createdRecipient.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient creation error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a recipient\n * Params needed in req.body:\n *   @param {string=} email (optional) - the email address to update.\n *   @param {string=} displayName (optional) - the displayName to update.\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst updateRecipientEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let recipientId = req.params.recipientId;\n  if (req.body.recipientId) {\n    recipientId = req.body.recipientId;\n  }\n  const { email, displayName, status } = req.body;\n  if (!recipientId) {\n    res.statusMessage = 'No recipientId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n\n  const updates = {};\n  if (email && email.length > 0) updates.email = email;\n  if (displayName && displayName.length > 0) updates.displayName = displayName;\n  if (status && status.length > 0) updates.status = status;\n\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Recipient.updateRecipient(recipientId, userId, updates)\n    .then((updatedRecipient) => {\n      if (!updatedRecipient) {\n        res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(201).json({\n        success: true,\n        message: 'Successfully updated recipient',\n        recipient: updatedRecipient.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient update error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a post (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst removeRecipientEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.recipientId;\n  if (req.body.recipientId) {\n    itemId = req.body.recipientId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No recipientId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Recipient.deleteRecipient(itemId, userId)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Recipient was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Recipient could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getRecipientsEndpoint,\n  addRecipientEndpoint,\n  updateRecipientEndpoint,\n  removeRecipientEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/controller.js","import sessionsRoutes from './routes';\nimport proxyUserId from './proxyUser';\nimport {\n  validateUserSession,\n  createUserSession,\n  destroyUserSession,\n  authenticateUser,\n  requireLogin,\n} from './warrant';\n\nexport {\n  sessionsRoutes,\n  validateUserSession,\n  createUserSession,\n  destroyUserSession,\n  authenticateUser,\n  requireLogin,\n  proxyUserId,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/index.js","/* Sessions endpoint creates sessions\n *  These would be equivalent to login/logout\n */\nimport { Router } from 'express';\nimport { authenticateUser, destroyUserSession } from './warrant';\n\nconst routes = new Router();\n\n/* Calls authenticateUser to log in a user */\nfunction signinUser(req, res) {\n  const body = req.body;\n  authenticateUser(req, res, body)\n  .then((user) => {\n    res.status(201).json({\n      success: true,\n      message: 'Logged in',\n      user: user,\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n    res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n}\n\nroutes.route('/sessions')\n  .post(signinUser);\n\n\n/* Clears the session info, effectively logging out a user */\nroutes.route('/sessions')\n  .delete(function logThemOut(req, res) {\n    destroyUserSession(req, res);\n    res.status(204).end();\n  });\n\n/* Checks if a user is currently authenticated.\n */\nroutes.route('/sessions')\n  .get(function isAuthenticated(req, res) {\n    if (req.user) {\n      res.status(204).end();\n      return;\n    }\n    res.status(403).end();\n  });\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/routes.js","/* Returns either the current user's id or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current user can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} userId - the id to use in actions.\n */\nconst proxyUserId = function getAccount(req) {\n  const currentUser = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentUser && currentUser.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.id) {\n    return req.user.id;\n  }\n  return null;\n};\n\nexport default proxyUserId;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/proxyUser.js","import postRoutes from './routes';\nimport * as PostController from './controller';\n\nexport { postRoutes, PostController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/index.js","import { Router } from 'express';\nimport {\n  getPostsEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n} from './controller';\nimport { requireLogin } from '../Authentication/warrant';\n\nconst routes = new Router();\nroutes.get('/posts', requireLogin(), getPostsEndpoint);\nroutes.post('/posts', requireLogin(), addPostEndpoint);\nroutes.put('/posts/:postId', requireLogin(), updatePostEndpoint);\nroutes.delete('/posts/:postId', requireLogin(), removePostEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Post = models.Post;\nconst Media = models.Media;\nconst Apprisal = models.Apprisal;\n\n\n/* Get all of the posts for the accountId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search user.\n */\nconst getPostsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.findAllForUser(\n    userId,\n    {\n      includeTables:\n      [{\n        model: Media,\n        attributes: ['url'],\n        through: {\n          attributes: [],\n        },\n      },\n      {\n        model: Apprisal,\n      }],\n    })\n    .then((items) => {\n      const cleanedItems = items.map(function jsonify(mappedItem) {\n        return mappedItem.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        posts: cleanedItems,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds a post to the Post database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} message - the main message body\n *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to post under.\n */\nconst addPostEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { message, status, mediaIds } = req.body;\n  const newPost = Post.build({\n    message: message,\n    status: status,\n    user_id: userId,\n  });\n  let createdId = null;\n  newPost.save()\n    .then((createdItem) => {\n      createdId = createdItem.id;\n      console.log('created item');\n      console.dir(createdItem);\n      if (mediaIds && mediaIds.length > 0) {\n        return createdItem.setMedia(mediaIds);\n      }\n      console.log('Got here, but maybe should not have');\n      return createdItem;\n    })\n    .then(() => {\n      console.log('We set media, now for find and associate');\n      return Post.find({\n        where: { id: createdId },\n        include: [Media],\n      });\n    })\n    .then((createdItem) => {\n      console.log('created item');\n      console.dir(JSON.stringify(createdItem));\n      const cleanedPost = createdItem.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created post',\n        post: cleanedPost,\n      });\n    })\n    .catch((err) => {\n      let errorMessage = 'Post could not be created.';\n      if (err.code === 11000) {\n        errorMessage = 'Post already exists';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a post\n *   @param {string} message - the main message body\n *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to map.\n */\nconst updatePostEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No post id provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { message, mediaIds, status } = req.body;\n  const updates = {};\n  if (message && message.length > 0) updates.message = message;\n  if (status && status.length > 0) updates.status = status;\n  if (mediaIds && mediaIds.length > 0) updates.mediaIds = mediaIds;\n\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.updatePost(itemId, userId, updates)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(200).json({\n        success: true,\n        message: 'Successfully updated post',\n        post: updatedItem.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.dir(err);\n      let errorMessage = 'Post could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a post (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst removePostEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.deletePost(itemId, userId)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Post was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Post could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getPostsEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/controller.js","import mediaRoutes from './routes';\nimport * as MediaController from './controller';\n\nexport { mediaRoutes, MediaController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Media/index.js","import { Router } from 'express';\nimport { requireLogin } from '../Authentication/warrant';\nimport {\n  getMediaEndpoint,\n  addMediumEndpoint,\n  updateMediumEndpoint,\n  removeMediumEndpoint,\n} from './controller';\n\nconst routes = new Router();\nroutes.get('/media', requireLogin(), getMediaEndpoint);\nroutes.post('/media', requireLogin(), addMediumEndpoint);\nroutes.put('/media/:mediaId', requireLogin(), updateMediumEndpoint);\nroutes.delete('/media/:mediaId', requireLogin(), removeMediumEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Media/routes.js","import { models } from '../../models';\nimport { proxyUserId } from '../Authentication';\n\nconst Media = models.Media;\n\n/* Get all of the media for the user.id.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the search parameters.\n */\nconst getMediaEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Media.findAllForUser(userId)\n    .then((media) => {\n      const cleanMedia = media.map(function jsonify(medium) {\n        return medium.toJSON();\n      });\n      res.status(200).json({\n        success: true,\n        media: cleanMedia,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds an media item to the Media database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} url - the email address\n *   @param {string} type - the type of media.\n *   @param (number=} onBehalfOfId - (optional) The userId to act on behalf of if current user\n *      can act on behalf of it.\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst addMediumEndpoint = (req, res) => {\n  const { url, type } = req.body;\n  const userId = proxyUserId(req);\n  const newItem = Media.build({\n    url: url,\n    type: type,\n    user_id: userId,\n  });\n  newItem.save()\n    .then((createdMedia) => {\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created media item',\n        media: createdMedia.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Media item creation error: ');\n      console.dir(err);\n      let errorMessage = 'Media item could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a media item\n * Params needed in req.body:\n *   @param {string} url - the email address\n *   @param {string} type - the type of media.\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) mediaId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst updateMediumEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let mediaId = req.params.mediaId;\n  if (req.body.mediaId) {\n    mediaId = req.body.mediaId;\n  }\n  const { url, type } = req.body;\n  if (!mediaId) {\n    res.statusMessage = 'No mediaId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n\n  const updates = {};\n  if (url && url.length > 0) updates.url = url;\n  if (type && type.length > 0) updates.type = type;\n\n  if (Object.keys(updates).length === 0) {\n    res.statusMessage = 'Nothing to update'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Media.updateMedia(mediaId, userId, updates)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(201).json({\n        success: true,\n        message: 'Successfully updated media',\n        media: updatedItem.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Media update error: ');\n      console.dir(err);\n      let errorMessage = 'Media could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a media\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  Uses proxyUserId() to get the userId to search for.\n */\nconst removeMediumEndpoint = (req, res) => {\n  const userId = proxyUserId(req);\n  if (!userId) {\n    res.statusMessage = 'No user provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.mediaId;\n  if (req.body.mediaId) {\n    itemId = req.body.mediaId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No mediaId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Media.deleteMedia(itemId, userId)\n    .then((updatedItem) => {\n      if (!updatedItem) {\n        res.statusMessage = 'Media was not found.'; // eslint-disable-line no-param-reassign\n        res.status(404).end();\n        return;\n      }\n      res.status(204).end();\n    })\n    .catch((err) => {\n      let errorMessage = 'Media could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getMediaEndpoint,\n  addMediumEndpoint,\n  updateMediumEndpoint,\n  removeMediumEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Media/controller.js","import dotenv from 'dotenv';\nimport requireEnv from 'require-environment-variables';\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n *\n * However, we aren't going to load these in production as it could lead to sloppy deploys.\n */\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  console.log(`Environment: ${process.env.NODE_ENV} - loading DEV environment vars.`);\n  dotenv.load();\n} else if (process.env.NODE_ENV && process.env.NODE_ENV === 'test') {\n  console.log('Environment: loading TEST environment vars.');\n  dotenv.load({ path: './envTest' });\n} else {\n  console.log(`Environment: did NOT load environment variables from .env for ${process.env.NODE_ENV}. This is not a problem if you define your environment variables outside of the file system as you should.`);\n}\n\n/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n *   the process exits with code 400.\n * https://github.com/bjoshuanoah/require-environment-variables\n */\nrequireEnv([\n  'REDIS_URL',\n  'DATABASE_URL',\n  'MAIN_SERVER_PORT',\n  'ACCOUNT_PEPPER_1',\n  'ACCOUNT_ENCRYPT_CURRENT_PEPPER',\n  'IDIER_WORKER_ID',\n  'TOKEN_PEPPER_1',\n  'TOKEN_ENCRYPT_CURRENT_PEPPER',\n  'SESSION_SECRET',\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/environment.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 43\n// module chunks = 0","module.exports = require(\"require-environment-variables\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"require-environment-variables\"\n// module id = 44\n// module chunks = 0","import redis from 'redis';\n\nconst REDIS_URL = process.env.REDIS_URL;\n\n/* Connect to redis */\nconst redisClient = redis.createClient(REDIS_URL);\n\nredisClient.on('error', function redisErrorReport(err) {\n  console.log(`Redis connection error ${err}`);\n});\n\nexport default redisClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/redisConnect.js","module.exports = require(\"redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"redis\"\n// module id = 46\n// module chunks = 0","module.exports = require(\"connect-redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"connect-redis\"\n// module id = 47\n// module chunks = 0"],"sourceRoot":""}