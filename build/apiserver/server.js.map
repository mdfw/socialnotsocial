{"version":3,"sources":["webpack:///webpack/bootstrap 1fd8f4e7ec0df81aacde","webpack:///./src/apiserver/apiserver.js","webpack:///external \"http\"","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"express-session\"","webpack:///external \"morgan\"","webpack:///external \"passport\"","webpack:///./src/apiserver/modules/index.js","webpack:///./src/apiserver/modules/Account/index.js","webpack:///./src/apiserver/modules/Account/routes.js","webpack:///./src/apiserver/modules/Account/controller.js","webpack:///./src/apiserver/modules/Account/model.js","webpack:///external \"mongoose\"","webpack:///./src/apiserver/modules/Account/passwordEncryption.js","webpack:///external \"bcrypt\"","webpack:///external \"crypto\"","webpack:///./src/shared/helpers/idier.js","webpack:///external \"base58\"","webpack:///external \"generate-password\"","webpack:///./src/shared/helpers/appraise.js","webpack:///external \"validator\"","webpack:///external \"owasp-password-strength-test\"","webpack:///./src/apiserver/modules/Authentication/index.js","webpack:///./src/apiserver/modules/Authentication/passportConfigure.js","webpack:///external \"passport-local\"","webpack:///./src/apiserver/modules/Authentication/ensureLoggedIn.js","webpack:///./src/apiserver/modules/Authentication/routes.js","webpack:///./src/apiserver/modules/Recipient/index.js","webpack:///./src/apiserver/modules/Recipient/routes.js","webpack:///./src/apiserver/modules/Recipient/controller.js","webpack:///./src/apiserver/modules/Recipient/model.js","webpack:///./src/apiserver/modules/Post/index.js","webpack:///./src/apiserver/modules/Post/routes.js","webpack:///./src/apiserver/modules/Post/controller.js","webpack:///./src/apiserver/modules/Post/model.js","webpack:///./src/config/environment.js","webpack:///external \"dotenv\"","webpack:///./src/config/mongoConnect.js","webpack:///./src/config/redisConnect.js","webpack:///external \"redis\"","webpack:///external \"connect-redis\""],"names":["RedisStore","require","port","process","env","API_SERVER_PORT","app","use","err","req","res","next","headersSent","status","render","json","urlencoded","extended","name","secret","resave","saveUninitialized","store","client","initialize","session","get","baseReturn","send","on","console","log","close","quit","server","listen","reportOnListen","error","AccountController","accountRoutes","Account","routes","route","post","activeAccountId","getAccount","currentAccount","user","onBehalfOfId","body","length","canActOnBehalfOf","accountId","addAccountEndpoint","email","password","displayName","newAccount","setPassword","then","save","createdAccount","cleanedAccount","toJSON","success","message","account","catch","code","statusMessage","end","errorMessage","getAccountInfoEndpoint","findOneAccount","item","cleanedItem","updateAccountEndpoint","AccountType","NORMAL","ADMIN","CUSTSERVICE","BANNED","AccountSchema","type","Types","Number","unique","required","accountType","String","enum","default","trim","lowercase","encryptedPasswordHash","encryptedPasswordPepperId","dateCreated","Date","now","dateAccountValidated","dateUpdated","set","transform","transformJSON","doc","objRepresentation","passwordEncryptionPepperId","transformObject","methods","self","Promise","resolve","checkAppraisal","appraisalMessages","Error","join","runHashing","passwordValue","encryptedValue","dir","encrypted","pepperId","pre","preValidateAddAccountId","updateDate","done","preSaveValidations","errorMessages","emailAppraisal","invalidate","push","displayNameAppraisal","comparePassword","candidate","statics","findAccountById","findOne","exec","findOneByEmail","findAccountByEmail","model","hashPassword","hasher","createHash","update","hashed","digest","bcryptHash","passwordhash","saltRounds","aesHash","currentPepperId","ACCOUNT_ENCRYPT_CURRENT_PEPPER","pepper","algorithm","cipher","createCipher","crypted","final","encryptPassword","rawPassword","deAesHash","decipher","createDecipher","decrypted","passwordsMatch","candidatePassword","candidateHashed","decryptedPass","idier","mySequence","globalSeq","global","idierSequence","workerId","IDIER_WORKER_ID","Math","floor","random","timeStamp","randomnumber","snowflake","snowflakeInt","parseInt","toHumanId","idNumber","encoded","encode","toNumericId","idString","decoded","decode","passGen","generate","numbers","appraiseEmail","emailAddress","messages","appraiseDisplayName","appraisePassword","owaspResults","test","strong","concat","errors","appraisePasswordErrors","minLength","maxLength","repeating","needLowercase","needUppercase","needNumber","needCharacter","appraisePasswordExtra","appraiseAccountId","appraiseThese","what","appraised","tested","appraisePostMessage","postMessage","appraisePostSubject","postSubject","ensureLoggedIn","authenticationRoutes","usernameField","passwordField","snsLocalStrategy","callback","foundAccount","comparePass","theAccount","returnAccount","passwordsMatched","accountToReturn","catchAuthFailure","serializeUser","serializeAccount","deserializeUser","deserializeAccount","determineAction","noFind","options","unauthenticatedRedirectURL","redirectTo","allOptions","setReturnTo","undefined","areWeAuthenticated","isAuthenticated","returnTo","originalUrl","url","redirect","signinUser","authenticate","logIn","cookie","httpOnly","delete","logThemOut","destroy","logout","clearCookie","RecipientController","recipientRoutes","Recipient","put","getRecipientsEndpoint","findAllForId","recipients","cleanRecipients","map","jsonify","recipient","addRecipientEndpoint","newRecipient","ownerAccountId","createdRecipient","toObject","updateRecipientEndpoint","recipientId","params","updates","Object","keys","updatedRecipient","removeRecipientEndpoint","REMOVED","RecipientStatus","VALIDATING","ACTIVE","BOUNCING","UNSUBSCRIBED","RecipientSchema","index","phoneNumber","phoneType","dateRecipientValidated","dateUnsubscribed","unsubscriptionReason","dateRemoved","preValidateRecipient","updateRecipientDate","preRecipientSaveValidations","findOneRecipient","findRecipientById","findARecipientById","ownerId","fieldsToUpdate","foundItem","foundRecipient","fieldsToUpdateKeys","forEach","modifyItem","key","findRecipientByEmail","findRecipients","lean","find","totalForAccountId","countRecipients","count","PostController","postRoutes","Post","getPostsEndpoint","items","cleanedItems","mappedItem","posts","addPostEndpoint","subject","mediaIds","newItem","createdItem","cleanedPost","updatePostEndpoint","itemId","postId","updatedItem","removePostEndpoint","updateItem","MAX_RETURN_LIMIT","PostStatus","DRAFT","POSTED","PostSchema","Array","preValidatePost","updatePostDate","findOnePost","findPostById","updatePostById","foundPost","allPosts","limit","beforeId","limiter","$lte","sort","countPosts","config","envVars","MONGODB_URI","socketOptions","keepAlive","connectTimeoutMS","replset","connect","connection","once","warn","REDIS_URL","redisClient","createClient","redisErrorReport"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1fd8f4e7ec0df81aacde","/* Base imports */\nimport { Server } from 'http';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport passport from 'passport';\n/* Routes */\nimport { accountRoutes, recipientRoutes, authenticationRoutes, postRoutes } from './modules';\n/* Configurations */\nimport '../config/environment';\nimport mongooseConnection from '../config/mongoConnect';\nimport redisClient from '../config/redisConnect';\n\nconst RedisStore = require('connect-redis')(session);\n\nlet port = process.env.API_SERVER_PORT;\nif (!port) {\n  port = 3006;\n}\n\nconst app = express();\n\n/* Middleware setup */\napp.use((err, req, res, next) => {\n  if (res.headersSent) next(err);\n  res.status(err.status || port).render('500');\n});\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(session({\n  name: 'snss',\n  secret: 'MmyWTLNNsTi15LYHz8FP',\n  resave: true,\n  saveUninitialized: false,\n  store: new RedisStore({ client: redisClient }),\n}));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(morgan('combined'));\n\n/* Routes */\napp.use('/api/v1', [accountRoutes, recipientRoutes, authenticationRoutes, postRoutes]);\n\napp.get('/', function baseReturn(req, res) {\n  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('Closing server.');\n  app.close();\n});\n\napp.on('close', () => {\n  console.log('Closing redis.');\n  redisClient.quit();\n  mongooseConnection.close();\n});\n\n/* Start the API Server */\nconst server = Server(app);\nserver.listen(port, function reportOnListen(error) {\n  if (error) {\n    console.log(`API Server ERROR on startup: ${error}`);\n  } else {\n    console.log(`API Server listening on http://localhost:${port}.`);\n  }\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/apiserver.js","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"express-session\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"morgan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"passport\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"passport\"\n// module id = 6\n// module chunks = 0","export * from './Account';\nexport * from './Recipient';\nexport * from './Authentication';\nexport * from './Post';\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/index.js","import accountRoutes from './routes';\nimport Account from './model';\nimport * as AccountController from './controller';\n\nexport { accountRoutes, Account, AccountController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Account/index.js","import { Router } from 'express';\nimport { addAccountEndpoint, getAccountInfoEndpoint } from './controller';\nimport { ensureLoggedIn } from '../Authentication';\n\nconst routes = new Router();\n\nroutes.route('/account')\n  .post(addAccountEndpoint);\n\nroutes.get('/account', ensureLoggedIn(), getAccountInfoEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Account/routes.js","import Account from './model';\n\n/* Returns either the current account's accountId or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current account can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} accountId - the accountId to use in searches.\n *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n */\nconst activeAccountId = function getAccount(req) {\n  const currentAccount = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentAccount && currentAccount.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.accountId) {\n    return req.user.accountId;\n  }\n  return null;\n};\n\n/* Adds an account to the Accounts database based on the fields passed in.\n * Params needed in body:\n *   @param {string} email - the email address\n *   @param {string} password - the user's password. Must pass owasp tests.\n *   @param {string} displayName - the name to display on the users page.\n */\nconst addAccountEndpoint = (req, res) => {\n  const { email, password, displayName } = req.body;\n  const newAccount = new Account({ email, password, displayName });\n  newAccount.setPassword(password)\n    .then(() => { // eslint-disable-line arrow-body-style\n      return newAccount.save();\n    })\n    .then((createdAccount) => {\n      const cleanedAccount = createdAccount.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully Registered',\n        account: cleanedAccount,\n      });\n    })\n    .catch((err) => {\n      if (err.code === 11000) {\n        res.statusMessage = 'Account with that email already exists'; // eslint-disable-line no-param-reassign\n        res.status(409).end();\n        return;\n      }\n      let errorMessage = 'Account could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Get account info for accountId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the search parameters.\n */\nconst getAccountInfoEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    return res.status(422).json({ success: false, message: 'No accountId provided' });\n  }\n  Account.findOneAccount(accountId, false)\n    .then((item) => {\n      const cleanedItem = item.toJSON();\n      res.status(201).json({\n        success: true,\n        account: cleanedItem,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\nconst updateAccountEndpoint = (req, res) => {\n  res.status(418).json({\n    message: 'Brewing',\n  });\n};\n\nexport { addAccountEndpoint, updateAccountEndpoint, getAccountInfoEndpoint };\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Account/controller.js","import mongoose, { Schema } from 'mongoose';\nimport { encryptPassword, passwordsMatch } from './passwordEncryption';\nimport { idier } from '../../../shared/helpers/idier';\nimport { appraiseEmail, appraiseDisplayName, appraisePassword } from '../../../shared/helpers/appraise';\n\n/* The various states an account can be in. Used in the schema for account.accountType.\n */\nconst AccountType = {\n  NORMAL: 'normal',\n  ADMIN: 'admin',\n  CUSTSERVICE: 'custservice',\n  BANNED: 'banned',\n};\n\n/* Account schema represents all accounts.\n * Note: We are not using the pepperId yet, there's only one pepper\n */\nconst AccountSchema = new Schema({\n  accountId: {\n    type: Schema.Types.Number,\n    unique: true,\n    required: true,\n  },\n  accountType: {\n    type: String,\n    enum: [AccountType.NORMAL, AccountType.ADMIN, AccountType.CUSTSERVICE, AccountType.BANNED],\n    default: AccountType.NORMAL,\n  },\n  email: {\n    type: String,\n    trim: true,\n    unique: true,\n    lowercase: true,\n  },\n  displayName: {\n    type: String,\n    trim: true,\n  },\n  encryptedPasswordHash: {\n    type: String,\n    trim: true,\n    required: true,\n  },\n  encryptedPasswordPepperId: {\n    type: String,\n  },\n  dateCreated: {\n    type: Date,\n    default: Date.now,\n  },\n  dateAccountValidated: {\n    type: Date,\n  },\n  dateUpdated: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\n/* Remove password and pepper from exported json && object\n * Based on: http://ksloan.net/tips-for-using-mongoose-schemas-with-express-mongo-express-node-stack/\n */\nAccountSchema.set('toJSON', {\n  transform: function transformJSON(doc, objRepresentation) {\n    delete objRepresentation.encryptedPasswordHash;  // eslint-disable-line no-param-reassign\n    delete objRepresentation.passwordEncryptionPepperId;  // eslint-disable-line no-param-reassign\n    return objRepresentation;\n  },\n});\n\nAccountSchema.set('toJSON', {\n  transform: function transformJSON(doc, objRepresentation) {\n    return {\n      displayName: objRepresentation.displayName,\n      email: objRepresentation.email,\n      dateCreated: objRepresentation.dateCreated,\n      dateAccountValidated: objRepresentation.dateAccountValidated,\n      dateUpdated: objRepresentation.dateUpdated,\n      accountId: objRepresentation.accountId,\n      accountType: objRepresentation.accountType,\n    };\n  },\n});\n\nAccountSchema.set('toObject', {\n  transform: function transformObject(doc, objRepresentation) {\n    delete objRepresentation.encryptedPasswordHash;  // eslint-disable-line no-param-reassign\n    delete objRepresentation.passwordEncryptionPepperId;  // eslint-disable-line no-param-reassign\n    return objRepresentation;\n  },\n});\n\n/* Sets the account password (technically, encryptedPasswordHash)\n * Sends the password through hashing and encryption and saves it the the database.\n * returns {Promise}\n */\nAccountSchema.methods.setPassword = function setPassword(password) {\n  const self = this;\n\n  return Promise.resolve(appraisePassword(password))\n    .then(function checkAppraisal(appraisalMessages) {\n      if (appraisalMessages.length > 0) {\n        throw new Error(appraisalMessages.join(', '));\n      }\n      return password;\n    })\n    .then(function runHashing(passwordValue) {\n      return encryptPassword(passwordValue);\n    })\n    .then((encryptedValue) => {\n      console.log('Got encrypted value: ');\n      console.dir(encryptedValue);\n      self.encryptedPasswordHash = encryptedValue.encrypted;\n      self.encryptedPasswordPepperId = encryptedValue.pepperId;\n    })\n    .catch((err) => {\n      throw err;\n    });\n};\n\n/* If we don't have an accountID (say, on a new account), set one. */\nAccountSchema.pre('validate', function preValidateAddAccountId(next) {\n  if (!this.accountId) {\n    this.accountId = idier();\n  }\n  next();\n});\n\n/* Update the dateUpdated field on save. */\nAccountSchema.pre('save', true, function updateDate(next, done) {\n  this.dateUpdated = new Date();\n  next();\n  done();\n});\n\n/* Does the pre-save validations.\n * Why here instead of on each individual field? Allows us to return multiple errors at once.\n */\nAccountSchema.pre('save', true, function preSaveValidations(next, done) {\n  const errorMessages = [];\n  const emailAppraisal = appraiseEmail(this.email);\n  if (emailAppraisal.length > 0) {\n    this.invalidate('email', emailAppraisal.join(', '));\n    errorMessages.push(emailAppraisal.join(', '));\n  }\n\n  const displayNameAppraisal = appraiseDisplayName(this.displayName);\n  if (displayNameAppraisal.length > 0) {\n    this.invalidate('displayName', displayNameAppraisal.join(', '));\n    errorMessages.push(displayNameAppraisal.join(' '));\n  }\n  if (errorMessages.length > 0) {\n    done(new Error(errorMessages.join(' ')));\n  }\n  next();\n  done();\n});\n\nAccountSchema.methods.comparePassword = function comparePassword(candidate) {\n  return passwordsMatch(candidate, this.encryptedPasswordHash, this.encryptedPasswordPepperId);\n};\n\n/* Can this account act on behalf of another account?\n * @param {number} *ignored* the Account id to check against.\n * @returns {bool} true if account can act on behalf of accountId\n * @note Currently, only checks if this account has an account type of admin or customer service\n*/\nAccountSchema.methods.canActOnBehalfOf = function canActOnBehalfOf(accountId) {  // eslint-disable-line\n  if (this.accountType === AccountType.ADMIN\n    || this.accountType === AccountType.CUSTSERVICE) {\n    return true;\n  }\n  return false;\n};\n\n/* Find an account by an accountId\n * @param {number} accountId - the account id\n * @returns {promise} - a promise to find something\n */\nAccountSchema.statics.findOneAccount = function findAccountById(accountId) {\n  return this.findOne({ accountId: accountId }).exec();\n};\n\n/* Find an account by an email address\n * @param {string} email - the associated email address\n * @returns {promise} - a promise to find something\n */\nAccountSchema.statics.findOneByEmail = function findAccountByEmail(email) {\n  return this.findOne({ email: email }).exec();\n};\n\n/* Compile the schema into a model\n * http://mongoosejs.com/docs/models.html\n */\nconst Account = mongoose.model('Account', AccountSchema);\n\nexport default Account;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Account/model.js","module.exports = require(\"mongoose\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mongoose\"\n// module id = 12\n// module chunks = 0","import { compare, hash } from 'bcrypt';\nimport crypto from 'crypto';\n\n/* Hashes the password into a SHA512 hex hash */\nconst hashPassword = function hashPassword(password) {\n  const hasher = crypto.createHash('sha512');\n  hasher.update(password);\n  const hashed = hasher.digest('hex');\n  return hashed;\n};\n\n/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n * Salt is returned as part of the hash and thus saved.\n * Note that this version of bcrypt only takes the first 72 characters.\n  */\nconst bcryptHash = function bcryptHash(passwordhash) {\n  const saltRounds = 10;\n  return hash(passwordhash, saltRounds);\n};\n\n/* Encrypts the bcrypted string using aes256 using a pepper stored\n *   in the environment. This is what should be finally saved.\n */\nconst aesHash = function aesHash(passwordhash) {\n  const currentPepperId = process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER;\n  const pepper = process.env[currentPepperId];\n  const algorithm = 'aes-256-ctr';\n  const cipher = crypto.createCipher(algorithm, pepper);\n  let crypted = cipher.update(passwordhash, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return { encrypted: crypted, pepperId: currentPepperId };\n};\n\n/* Encrypting a password.\n   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n*/\nconst encryptPassword = function encryptPassword(rawPassword) {\n  return Promise.resolve(rawPassword)\n  .then(hashPassword)\n  .then(bcryptHash)\n  .then(aesHash);\n};\n\n/* Decrypts the encrypted bcrypt hash using aes256 using a pepper stored\n *   in the environment. Should use this only with the bcrypted, hashed password.\n */\nconst deAesHash = function deAesHash(passwordhash, pepperId) {\n  const pepper = process.env[pepperId];\n  if (!pepper) {\n    return new Error('Pepper not found.');\n  }\n  const algorithm = 'aes-256-ctr';\n  const decipher = crypto.createDecipher(algorithm, pepper);\n  let decrypted = decipher.update(passwordhash, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n};\n\n\n/* Compare passwords.\n * Because we are using hashing and encrypting, we have to do that before we compare.\n */\nconst passwordsMatch = function passwordsMatch(\n  candidatePassword,\n  encryptedPasswordHash,\n  pepperId,\n  ) {\n  // compare the submitted password to encrypted password in database.\n  const candidateHashed = hashPassword(candidatePassword);\n  const decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n  return compare(candidateHashed, decryptedPass);\n};\n\nexport { encryptPassword, deAesHash, hashPassword, bcryptHash, aesHash, passwordsMatch };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Account/passwordEncryption.js","module.exports = require(\"bcrypt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bcrypt\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 15\n// module chunks = 0","import Base58 from 'base58';\nimport generator from 'generate-password';\n\n/* idier: identifier generator. Inspired by twitter's snowflake system\n * https://blog.twitter.com/2010/announcing-snowflake\n * We use the timestamp converted to seconds + a worker id from the environment +\n *   a sequence number (see below) + a single random number just in case...\n */\nconst idier = function idier() {\n  /* The sequence is stored on the global object. The sequence should be between 1-999 to keep\n   *   our total id number in the right space to be converted.\n   *   Note: There's probably an opportunity to use Redis or similar for the sequence.\n   */\n  let mySequence = 1;\n  const globalSeq = global.idierSequence;\n  if (globalSeq && globalSeq < 1000 && globalSeq > 0) {\n    mySequence = globalSeq;\n    global.idierSequence += 1;\n  } else {\n    global.idierSequence = mySequence + 1;\n  }\n\n  let workerId = process.env.IDIER_WORKER_ID;\n  if (!workerId) {\n    workerId = Math.floor(Math.random() * 10);\n  }\n  const timeStamp = Math.floor(Date.now() / 1000);\n  const randomnumber = Math.floor(Math.random() * 10);\n  const snowflake = `${timeStamp}${workerId}${mySequence}${randomnumber}`;\n  const snowflakeInt = parseInt(snowflake, 10);\n  return snowflakeInt;\n};\n\n/* toHumanId - transform a number into a base58 encoded string for use in human visible tokens.\n   Uses https://www.npmjs.com/package/base58\n  */\nconst toHumanId = function toHumanId(idNumber) {\n  const encoded = Base58.encode(idNumber);\n  return encoded;\n};\n\n/* toNumbericId - transform a humanId (base32 encoded) string to a number to use by the computer.\n  */\nconst toNumericId = function toNumericId(idString) {\n  const decoded = Base58.decode(idString);\n  return decoded;\n};\n\n\n/* Password generator\n * Creates a 12 digit password with letters and numbers.\n*/\nconst passGen = function passGen() {\n  const password = generator.generate({\n    length: 12,\n    numbers: true,\n  });\n  return password;\n};\n\nexport { idier, toHumanId, toNumericId, passGen };\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/idier.js","module.exports = require(\"base58\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base58\"\n// module id = 17\n// module chunks = 0","module.exports = require(\"generate-password\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"generate-password\"\n// module id = 18\n// module chunks = 0","import { isEmail, isEmpty } from 'validator';\nimport owasp from 'owasp-password-strength-test';\n\n/* Is the email valid? Uses the validator library to test.\n */\nconst appraiseEmail = function appraiseEmail(emailAddress) {\n  const messages = [];\n  if (isEmpty(emailAddress)) {\n    messages.push('Email address is required.');\n  }\n  if (!isEmpty(emailAddress) && !isEmail(emailAddress)) {\n    messages.push('Email address does not appear to be valid.');\n  }\n  return messages;\n};\n\n/* Test for the validity of the displayName.\n *  Currently only checks if it's empty.\n */\nconst appraiseDisplayName = function appraiseDisplayName(displayName) {\n  const messages = [];\n  if (isEmpty(displayName)) {\n    messages.push('Display name is required.');\n  }\n  return messages;\n};\n\n/* Tests a password.\n * Must be valid and pass the owasp validation tests.\n */\nconst appraisePassword = function appraisePassword(password) {\n  let messages = [];\n  if (isEmpty(password)) {\n    messages.push('Password is required.');\n  } else {\n    const owaspResults = owasp.test(password);\n    if (!owaspResults.strong) {\n      messages = messages.concat(owaspResults.errors);\n    }\n  }\n  return messages;\n};\n\nconst appraisePasswordErrors = {\n  minLength: 0,\n  maxLength: 1,\n  repeating: 2,\n  needLowercase: 3,\n  needUppercase: 4,\n  needNumber: 5,\n  needCharacter: 6,\n};\n\n/* A wrapper for awasp tests that returns this\n * {\n *   errors              : [],\n *   failedTests         : [],\n *   requiredTestErrors  : [],\n *   optionalTestErrors  : [],\n *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n *   isPassphrase        : false,\n *   strong              : true,\n *   optionalTestsPassed : 4\n * }\n */\nconst appraisePasswordExtra = function appraisePasswordExtra(password) {\n  return owasp.test(password);\n};\n\n/* Tests for the presense of an accountID.\n *  Only checks if it's empty.\n *  TODO: Check if the account actually exists.\n */\nconst appraiseAccountId = function appraiseAccountId(accountId) {\n  const messages = [];\n  if (isEmpty(accountId)) {\n    messages.push('AccountId is required.');\n  }\n  return messages;\n};\n\n/* Validates multiple options. Pass in an object with one of the following:\n * email: {string} validates an email (or empty}\n * displayName; {string} checks for empty\n * password: {string} validates a password\n * accountId: {string} validates the accountId\n * @returns: an object (see validator object below)\n */\nconst appraiseThese = function appraiseThese(what) {\n  const appraised = {\n    success: true,  // Did all tests pass\n    tested: [],  // Which tests where done? Check this to make sure things were passed in correctly.\n    errors: {},  // Error output from the sub-testers as objects.\n  };\n  if ('email' in what) {\n    appraised.tested.push('email');\n    const messages = appraiseEmail(what.email);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.email = messages;\n    }\n  }\n  if ('password' in what) {\n    appraised.tested.push('password');\n    const messages = appraisePassword(what.password);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.password = messages;\n    }\n  }\n  if ('displayName' in what) {\n    appraised.tested.push('displayName');\n    const messages = appraiseDisplayName(what.displayName);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.displayName = messages;\n    }\n  }\n  if ('accountId' in what) {\n    appraised.tested.push('accountId');\n    const messages = appraiseAccountId(what.accountId);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.accountId = messages;\n    }\n  }\n  return appraised;\n};\n\n/* Tests for the presense of a post message.\n *  Only checks if it's empty.\n *  Here for future functionality.\n */\nconst appraisePostMessage = function appraisePostMessage(postMessage) {\n  const messages = [];\n  if (!postMessage || isEmpty(postMessage)) {\n    messages.push('A message is required.');\n  }\n  return messages;\n};\n\n/* Tests for the presense of a post subject.\n *  Runs no checks.\n *  Here for future functionality.\n */\n/* eslint-disable no-unused-vars */\nconst appraisePostSubject = function appraisePostSubject(postSubject) {\n  return [];\n};\n/* eslint-enable no-unused-vars */\n\nexport {\n  appraiseThese,\n  appraiseEmail,\n  appraiseDisplayName,\n  appraisePassword,\n  appraisePasswordExtra,\n  appraisePasswordErrors,\n  appraiseAccountId,\n  appraisePostSubject,\n  appraisePostMessage,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/appraise.js","module.exports = require(\"validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 20\n// module chunks = 0","module.exports = require(\"owasp-password-strength-test\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"owasp-password-strength-test\"\n// module id = 21\n// module chunks = 0","import './passportConfigure';\nimport ensureLoggedIn from './ensureLoggedIn';\nimport authenticationRoutes from './routes';\n\nexport { ensureLoggedIn, authenticationRoutes };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/index.js","import { Strategy } from 'passport-local';\nimport passport from 'passport';\nimport Account from '../Account/model';\n\n/* Configure the local strategy for use by Passport.\n *\n * The local strategy require a `verify` function which receives the credentials\n * (`username` and `password`) submitted by the user.  The function must verify\n * that the password is correct and then invoke `callback` with a user object, which\n * will be set at `req.user` in route handlers after authentication.\n */\npassport.use(new Strategy(\n  {\n    usernameField: 'email',\n    passwordField: 'password',\n  },\n  function snsLocalStrategy(email, password, callback) {\n    let foundAccount = null;\n    Account.findOneByEmail(email)\n      .then(function comparePass(theAccount) {\n        foundAccount = theAccount;\n        return theAccount.comparePassword(password);\n      })\n      .then(function returnAccount(passwordsMatched) {\n        if (!passwordsMatched) {\n          throw new Error('Could not verify account');\n        }\n        return foundAccount;\n      })\n      .then(function returnAccount(accountToReturn) {\n        callback(null, accountToReturn);\n      })\n      .catch(function catchAuthFailure(err) {\n        console.log(`Passport authentication failed: Unknown error: ${err}`);\n        return callback(null, false, { message: 'Could not authenticate account' });\n      });\n  }));\n\n\n/* Configure Passport authenticated session persistence.\n *\n * In order to restore authentication state across HTTP requests, Passport needs\n * to serialize users into and deserialize users out of the session.  The\n * typical implementation of this is as simple as supplying the user ID when\n * serializing, and querying the user record by ID from the database when\n * deserializing.\n */\npassport.serializeUser(function serializeAccount(account, callback) {\n  console.log('Serializing user. This id: ', account.accountId);\n  callback(null, account.accountId);\n});\n\npassport.deserializeUser(function deserializeAccount(accountId, callback) {\n  console.log(`Deserializing user based on ${accountId}`);\n  Account.findOneAccount(accountId)\n  .then(function determineAction(theAccount) {\n    return callback(null, theAccount);\n  })\n  .catch(function noFind(err) {\n    return callback(err);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/passportConfigure.js","module.exports = require(\"passport-local\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"passport-local\"\n// module id = 24\n// module chunks = 0","/* Based on here: https://github.com/jaredhanson/connect-ensure-login/blob/master/lib/ensureLoggedIn.js\n * Used under MIT license\n * I edited it to make it go along with my linter and easier for me to understand.\n * Original release notes:\n * Ensure that a user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that a user is logged in.  If a request is received\n * that is unauthenticated, the request will be redirected to a login page (by\n * default to `/login`).\n *\n * Additionally, `returnTo` will be be set in the session to the URL of the\n * current request.  After authentication, this value can be used to redirect\n * the user to the page that was originally requested.\n *\n * Options:\n *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n *\n * Examples:\n *\n *     app.get('/profile',\n *       ensureLoggedIn(),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn('/signin'),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nexport default function ensureLoggedIn(options) {\n  let unauthenticatedRedirectURL = '/login';\n  if (typeof options === 'string') {\n    unauthenticatedRedirectURL = options;\n  } else if (options && options.redirectTo && options.redirectTo.length > 0) {\n    unauthenticatedRedirectURL = options.redirectTo;\n  }\n  const allOptions = options || {};\n\n  const setReturnTo = (allOptions.setReturnTo === undefined) ? true : options.setReturnTo;\n\n  return function areWeAuthenticated(req, res, next) { // eslint-disable-line consistent-return\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      if (setReturnTo && req.session) {\n        req.session.returnTo = req.originalUrl || req.url; // eslint-disable-line no-param-reassign\n      }\n      return res.redirect(unauthenticatedRedirectURL);\n    }\n    next();\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/ensureLoggedIn.js","import { Router } from 'express';\nimport passport from 'passport';\n\nconst routes = new Router();\n\nfunction signinUser(req, res, next) {\n  passport.authenticate('local', (err, user) => { // eslint-disable-line consistent-return\n    if (err || !user) {\n      res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    }\n    req.logIn(user, (error) => { // eslint-disable-line consistent-return\n      if (error) {\n        return next(error);\n      }\n      res.cookie('snssl', 'y', { httpOnly: false });\n\n      // you can send a json response instead of redirecting the user\n      res.status(201).json({\n        success: true,\n        message: 'Logged in',\n        account: user,\n      });\n    });\n  })(req, res, next);\n}\n\nroutes.route('/sessions')\n  .post(signinUser);\n\nroutes.route('/sessions')\n  .delete(function logThemOut(req, res) {\n    req.session.destroy();\n    req.logout();\n    res.clearCookie('snssl');\n    res.status(204).end();\n  });\n\n/* Checks if a user is currently authenticated.\n * Technically, checks the cookie.\n */\nroutes.route('/sessions')\n  .get(function isAuthenticated(req, res) {\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      res.status(204).end();\n    }\n    res.status(403).end();\n  });\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Authentication/routes.js","import recipientRoutes from './routes';\nimport Recipient from './model';\nimport * as RecipientController from './controller';\n\nexport { recipientRoutes, Recipient, RecipientController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/index.js","import { Router } from 'express';\nimport { getRecipientsEndpoint, addRecipientEndpoint, updateRecipientEndpoint, removeRecipientEndpoint } from './controller';\nimport { ensureLoggedIn } from '../Authentication';\n\nconst routes = new Router();\nroutes.get('/recipients', ensureLoggedIn(), getRecipientsEndpoint);\nroutes.post('/recipients', ensureLoggedIn(), addRecipientEndpoint);\nroutes.put('/recipients/:recipientId', ensureLoggedIn(), updateRecipientEndpoint);\nroutes.delete('/recipients/:recipientId', ensureLoggedIn(), removeRecipientEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/routes.js","import { Recipient, RecipientStatus } from './model';\n\n/* Returns either the current account's accountId or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current account can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} accountId - the accountId to use in searches.\n */\nconst activeAccountId = function getAccount(req) {\n  const currentAccount = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentAccount && currentAccount.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  return req.user.accountId;\n};\n\n/* Get all of the recipients for the accountId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the search parameters.\n */\nconst getRecipientsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    return res.status(422).json({ success: false, message: 'No accountId provided' });\n  }\n  Recipient.findAllForId(accountId, false)\n    .then((recipients) => {\n      const cleanRecipients = recipients.map(function jsonify(recipient) {\n        return recipient.toJSON();\n      });\n      console.log('Found these recipients');\n      console.dir(recipients);\n      res.status(201).json({\n        success: true,\n        recipients: cleanRecipients,\n      });\n    })\n    .catch((err) => {\n      res.status(422).json({ success: false, message: err.message });\n    });\n};\n\n/* Adds an recipient to the Recipients database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} email - the email address\n *   @param {string} displayName - the displayName for the recipient.\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst addRecipientEndpoint = (req, res) => {\n  const { email, displayName } = req.body;\n  const accountId = activeAccountId(req);\n  const newRecipient = new Recipient({\n    email: email,\n    displayName: displayName,\n    ownerAccountId: accountId,\n  });\n  console.log('Heres the new recipient');\n  console.dir(newRecipient);\n  newRecipient.save()\n    .then((createdRecipient) => {\n      console.log('Created new recipient: ');\n      console.dir(createdRecipient);\n      console.dir(createdRecipient.toObject());\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created recipient',\n        recipient: createdRecipient.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient creation error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be created.';\n      if (err.code === 11000) {\n        errorMessage = 'Recipient already exists';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      res.status(422).json({ success: false, messages: errorMessage });\n    });\n};\n\n/* Updates a recipient\n * Params needed in req.body:\n *   @param {string=} email (optional) - the email address to update.\n *   @param {string=} displayName (optional) - the displayName to update.\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst updateRecipientEndpoint = (req, res) => {\n  let recipientId = req.params.recipientId;\n  if (req.body.recipientId) {\n    recipientId = req.body.recipientId;\n  }\n  const { email, displayName, status } = req.body;\n  if (!recipientId) {\n    res.status(422).json({ success: false, messages: 'No recipientId provided.' });\n  }\n\n  const accountId = activeAccountId(req);\n  const updates = {};\n  if (email && email.length > 0) updates.email = email;\n  if (displayName && displayName.length > 0) updates.displayName = displayName;\n  if (status && status.length > 0) updates.status = status;\n\n  if (Object.keys(updates).length === 0) {\n    res.status(422).json({ success: false, messages: 'Nothing to update.' });\n  }\n  Recipient.update(recipientId, accountId, updates)\n    .then((updatedRecipient) => {\n      console.log('Updated recipient: ');\n      console.dir(updatedRecipient);\n      console.dir(updatedRecipient.toObject());\n      res.status(201).json({\n        success: true,\n        message: 'Successfully updated recipient',\n        recipient: updatedRecipient.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient update error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.status(422).json({ success: false, messages: errorMessage });\n    });\n};\n\n\n/* Removes a recipient (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) recipientId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst removeRecipientEndpoint = (req, res) => {\n  let recipientId = req.params.recipientId;\n  if (req.body.recipientId) {\n    recipientId = req.body.recipientId;\n  }\n  if (!recipientId) {\n    res.status(422).json({ success: false, messages: 'No recipientId provided.' });\n  }\n\n  const accountId = activeAccountId(req);\n  Recipient.update(recipientId, accountId, { status: RecipientStatus.REMOVED })\n    .then((updatedRecipient) => {\n      console.log('Updated recipient: ');\n      console.dir(updatedRecipient);\n      console.dir(updatedRecipient.toObject());\n      res.status(201).json({\n        success: true,\n        message: 'Successfully removed recipient',\n      });\n    })\n    .catch((err) => {\n      console.log('Recipient removal error: ');\n      console.dir(err);\n      let errorMessage = 'Recipient could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.status(422).json({ success: false, messages: errorMessage });\n    });\n};\n\n\nexport {\n  getRecipientsEndpoint,\n  addRecipientEndpoint,\n  updateRecipientEndpoint,\n  removeRecipientEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/controller.js","import mongoose, { Schema } from 'mongoose';\nimport { appraiseEmail, appraiseDisplayName } from '../../../shared/helpers/appraise';\nimport { idier } from '../../../shared/helpers/idier';\n\nconst RecipientStatus = {\n  VALIDATING: 'validating',\n  ACTIVE: 'active',\n  REMOVED: 'removed',\n  BOUNCING: 'bouncing',\n  UNSUBSCRIBED: 'unsubscribed',\n};\n\n/* Recipient schema represents all recipients for an account.\n */\nconst RecipientSchema = new Schema({\n  status: {\n    type: Schema.Types.String,\n    default: RecipientStatus.ACTIVE,\n    enum: [\n      RecipientStatus.VALIDATING,\n      RecipientStatus.ACTIVE,\n      RecipientStatus.REMOVED,\n      RecipientStatus.BOUNCING,\n      RecipientStatus.UNSUBSCRIBED,\n    ],\n  },\n  recipientId: {\n    type: Schema.Types.Number,\n    unique: true,\n    required: true,\n  },\n  ownerAccountId: {\n    type: Schema.Types.Number,\n    required: true,\n    index: true,\n  },\n  email: {\n    type: String,\n    trim: true,\n  },\n  phoneNumber: {\n    type: String,\n  },\n  phoneType: {\n    type: String,\n  },\n  displayName: {\n    type: String,\n    trim: true,\n  },\n  dateCreated: {\n    type: Date,\n    default: Date.now,\n  },\n  dateUpdated: {\n    type: Date,\n    default: Date.now,\n  },\n  dateRecipientValidated: {\n    type: Date,\n  },\n  dateUnsubscribed: {\n    type: Date,\n  },\n  unsubscriptionReason: {\n    type: String,\n  },\n  dateRemoved: {\n    type: Date,\n  },\n});\n\n/* If it's a new recipient, create an recipientId for it. */\nRecipientSchema.pre('validate', function preValidateRecipient(next) {\n  console.log('Called pre save recipient');\n  if (!this.recipientId) {\n    this.recipientId = idier();\n  }\n  next();\n});\n\n/* Update the dateUpdated field on save. */\nRecipientSchema.pre('save', true, function updateRecipientDate(next, done) {\n  this.dateUpdated = new Date();\n  next();\n  done();\n});\n\n/* Does the pre-save validations.\n * Why here instead of on each individual field? Allows us to return multiple errors at once.\n */\nRecipientSchema.pre('save', true, function preRecipientSaveValidations(next, done) {\n  const errorMessages = [];\n  const emailAppraisal = appraiseEmail(this.email);\n  if (emailAppraisal.length > 0) {\n    this.invalidate('email', emailAppraisal.join(', '));\n    errorMessages.push(emailAppraisal.join(', '));\n  }\n\n  const displayNameAppraisal = appraiseDisplayName(this.displayName);\n  if (displayNameAppraisal.length > 0) {\n    this.invalidate('displayName', displayNameAppraisal.join(', '));\n    errorMessages.push(displayNameAppraisal.join(' '));\n  }\n  if (errorMessages.length > 0) {\n    done(new Error(errorMessages.join(' ')));\n  }\n  next();\n  done();\n});\n\n/* Remove password and pepper from exported json && object\n * Based on: http://ksloan.net/tips-for-using-mongoose-schemas-with-express-mongo-express-node-stack/\n */\nRecipientSchema.set('toJSON', {\n  transform: function transformJSON(doc, objRepresentation) {\n    return {\n      recipientId: objRepresentation.recipientId,\n      email: objRepresentation.email,\n      displayName: objRepresentation.displayName,\n      dateCreated: objRepresentation.dateCreated,\n      dateUnsubscribed: objRepresentation.dateUnsubscribed,\n      status: objRepresentation.status,\n    };\n  },\n});\n\n/* Find a recipient by an recipientId\n * @param {number} recipientId - the recipient id\n * @returns {promise} - a promise to find something\n */\nRecipientSchema.statics.findOneRecipient = function findRecipientById(recipientId) {\n  return this.findOne({ recipientId: recipientId }).exec();\n};\n\n/* Find a recipient by an recipientId and update the appropriate fields.\n * @param {number} recipientId - the recipient id\n * @param {object} fieldsToUpdate - the fields and their values to update to.\n * @returns {promise} - a promise to find something\n * @note: We do it this way instead of findOneAndUpdate because update and valdiation hooks are\n *   not called on findOneAndUpdate.\n */\nRecipientSchema.statics.update = function findARecipientById(recipientId, ownerId, fieldsToUpdate) {\n  return this.findOne({ recipientId: recipientId, ownerAccountId: ownerId }).exec()\n    .then((foundItem) => {\n      const foundRecipient = foundItem;\n      const fieldsToUpdateKeys = Object.keys(fieldsToUpdate);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundRecipient[key] = fieldsToUpdate[key];\n      });\n      return foundRecipient.save();\n    });\n};\n\n/* Find a recipient by an email address\n * @param {string} email - the associated email address\n * @returns {promise} - a promise to find something\n */\nRecipientSchema.statics.findOneByEmail = function findRecipientByEmail(email) {\n  return this.findOne({ email: email }).exec();\n};\n\n/* Find all recipients for an accountId\n * @param {string} accountId - the accountId to search for\n * @returns {promise} - a promise to find something\n */\nRecipientSchema.statics.findAllForId = function findRecipients(accountId, lean = true) {\n  if (lean) {\n    return this.find({ ownerAccountId: accountId }).lean().exec();\n  }\n  return this.find({ ownerAccountId: accountId }).exec();\n};\n\n/* Determine total number of recipients for account\n * @param {number} - accountId\n */\nRecipientSchema.statics.totalForAccountId = function countRecipients(accountId) {\n  return this.count({ ownerAccountId: accountId }).exec();\n};\n\n/* Compile the schema into a model\n * http://mongoosejs.com/docs/models.html\n */\nconst Recipient = mongoose.model('Recipient', RecipientSchema);\n\nexport { Recipient, RecipientStatus };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Recipient/model.js","import postRoutes from './routes';\nimport Post from './model';\nimport * as PostController from './controller';\n\nexport { postRoutes, Post, PostController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/index.js","import { Router } from 'express';\nimport {\n  getPostsEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n} from './controller';\nimport { ensureLoggedIn } from '../Authentication';\n\nconst routes = new Router();\nroutes.get('/posts', ensureLoggedIn(), getPostsEndpoint);\nroutes.post('/posts', ensureLoggedIn(), addPostEndpoint);\nroutes.put('/posts/:postId', ensureLoggedIn(), updatePostEndpoint);\nroutes.delete('/posts/:postId', ensureLoggedIn(), removePostEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/routes.js","import { Post, PostStatus } from './model';\n\n/* Returns either the current account's accountId or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current account can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} accountId - the accountId to use in searches.\n *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n */\nconst activeAccountId = function getAccount(req) {\n  const currentAccount = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentAccount && currentAccount.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.accountId) {\n    return req.user.accountId;\n  }\n  return null;\n};\n\n/* Get all of the posts for the accountId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the search parameters.\n */\nconst getPostsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.findAllForId(accountId, false)\n    .then((items) => {\n      const cleanedItems = items.map(function jsonify(mappedItem) {\n        return mappedItem.toJSON();\n      });\n      console.log('Found these:');\n      console.dir(cleanedItems);\n      res.status(200).json({\n        success: true,\n        posts: cleanedItems,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Adds a post to the Post database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} message - the main message body\n *   @param {string=} subject (optional) - subject of the post.\n *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst addPostEndpoint = (req, res) => {\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const { message, subject, mediaIds, status } = req.body;\n  const newItem = new Post({\n    message: message,\n    subject: subject,\n    mediaIds: mediaIds,\n    status: status,\n    ownerAccountId: accountId,\n  });\n  newItem.save()\n    .then((createdItem) => {\n      console.log('Created new: ');\n      console.dir(createdItem);\n      console.dir(createdItem.toObject());\n      const cleanedPost = createdItem.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created post',\n        recipient: cleanedPost,\n      });\n    })\n    .catch((err) => {\n      console.log('Post creation error: ');\n      console.dir(err);\n      let errorMessage = 'Post could not be created.';\n      if (err.code === 11000) {\n        errorMessage = 'Post already exists';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a post\n *   @param {string} message - the main message body\n *   @param {string=} subject (optional) - subject of the post.\n *   @param {array[number]} mediaIds - the mediaIds associated with this post.\n *   @param {string=} status (optional) - Must be one of PostStatus (see Post model).\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst updatePostEndpoint = (req, res) => {\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n  }\n  const { message, subject, mediaIds, status } = req.body;\n  const updates = {};\n  if (message && message.length > 0) updates.message = message;\n  if (subject && subject.length > 0) updates.subject = subject;\n  if (mediaIds && mediaIds.length > 0) updates.mediaIds = mediaIds;\n  if (status && status.length > 0) updates.status = status;\n\n  if (Object.keys(updates).length === 0) {\n    res.status(422).json({ success: false, messages: 'Nothing to update.' });\n  }\n  Post.update(itemId, accountId, updates)\n    .then((updatedItem) => {\n      console.log('Updated: ');\n      console.dir(updatedItem.toObject());\n      res.status(200).json({\n        success: true,\n        message: 'Successfully updated post',\n        post: updatedItem.toJSON(),\n      });\n    })\n    .catch((err) => {\n      console.log('Post update error: ');\n      console.dir(err);\n      let errorMessage = 'Post could not be updated.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\n/* Removes a post (marks the status to 'removed')\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for.\n */\nconst removePostEndpoint = (req, res) => {\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.update(itemId, accountId, { status: PostStatus.REMOVED })\n    .then((updateItem) => {\n      console.log('Updated : ');\n      console.dir(updateItem);\n      console.dir(updateItem.toObject());\n      res.status(200).json({\n        success: true,\n        message: 'Successfully removed post',\n      });\n    })\n    .catch((err) => {\n      console.log('Post removal error: ');\n      console.dir(err);\n      let errorMessage = 'Post could not be removed.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n\nexport {\n  getPostsEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/controller.js","import mongoose, { Schema } from 'mongoose';\nimport { idier } from '../../../shared/helpers/idier';\n\n/* The maximum we can return from a search */\nconst MAX_RETURN_LIMIT = 100;\n\n/* Enum for the post.status field */\nconst PostStatus = {\n  DRAFT: 'draft',\n  POSTED: 'posted',\n  REMOVED: 'removed',\n};\n\n/* Post schema represents all posts.\n * https://developers.facebook.com/docs/graph-api/reference/v2.8/post\n */\nconst PostSchema = new Schema({\n  status: {\n    type: Schema.Types.String,\n    default: PostStatus.POSTED,\n    enum: [\n      PostStatus.DRAFT,\n      PostStatus.POSTED,\n      PostStatus.REMOVED,\n    ],\n  },\n  postId: {\n    type: Schema.Types.Number,\n    unique: true,\n    required: true,\n  },\n  message: {\n    type: Schema.Types.String,\n    required: true,\n  },\n  subject: {\n    type: Schema.Types.String,\n  },\n  mediaIds: {\n    type: Schema.Types.Array,\n  },\n  ownerAccountId: {\n    type: Schema.Types.Number,\n    required: true,\n    index: true,\n  },\n  dateCreated: {\n    type: Date,\n    default: Date.now,\n  },\n  dateUpdated: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\n/* If it's a new post, create an postId for it. */\nPostSchema.pre('validate', function preValidatePost(next) {\n  if (!this.postId) {\n    this.postId = idier();\n  }\n  next();\n});\n\n/* Update the dateUpdated field on save. */\nPostSchema.pre('save', true, function updatePostDate(next, done) {\n  this.dateUpdated = new Date();\n  next();\n  done();\n});\n\n/*\n * Based on: http://ksloan.net/tips-for-using-mongoose-schemas-with-express-mongo-express-node-stack/\n */\nPostSchema.set('toJSON', {\n  transform: function transformJSON(doc, objRepresentation) {\n    return {\n      postId: objRepresentation.postId,\n      message: objRepresentation.message,\n      subject: objRepresentation.subject,\n      mediaIds: objRepresentation.mediaIds,\n      ownerAccountId: objRepresentation.ownerAccountId,\n      dateCreated: objRepresentation.dateCreated,\n      dateUpdated: objRepresentation.dateUpdated,\n      status: objRepresentation.status,\n    };\n  },\n});\n\n/* Find a post by an postId\n * @param {number} postId - the post identifier\n * @returns {promise} - a promise to find something\n */\nPostSchema.statics.findOnePost = function findPostById(postId) {\n  return this.findOne({ postId: postId }).exec();\n};\n\n/* Find a post by an postId and update the appropriate fields.\n * @param {number} recipientId - the recipient id\n * @param {number} ownerId - the owner id\n * @param {object} fieldsToUpdate - the fields and their values to update to.\n * @returns {promise} - a promise to find and update something\n * @note: We do it this way instead of findOneAndUpdate because update and valdiation hooks are\n *   not called on findOneAndUpdate.\n */\nPostSchema.statics.update = function updatePostById(postId, ownerId, fieldsToUpdate) {\n  return this.findOne({ postId: postId, ownerAccountId: ownerId }).exec()\n    .then((foundItem) => {\n      const foundPost = foundItem;\n      const fieldsToUpdateKeys = Object.keys(fieldsToUpdate);\n      fieldsToUpdateKeys.forEach(function modifyItem(key) {\n        foundPost[key] = fieldsToUpdate[key];\n      });\n      return foundPost.save();\n    });\n};\n\n/* Find all posts for an accountId\n * @param {string} accountId - the accountId to search for\n * @param {number} limit - the number to find.\n * @param {number} beforeId - the identifier to sort before. If this is passed, limit is used.\n * @returns {promise} - a promise to find something\n */\nPostSchema.statics.findAllForId = function allPosts(accountId, limit = 20, beforeId) {\n  let limiter = limit;\n  if (limiter > MAX_RETURN_LIMIT) limiter = MAX_RETURN_LIMIT;\n\n  if (beforeId) {\n    return this.find({ ownerAccountId: accountId, postId: { $lte: beforeId } })\n      .limit(limiter)\n      .sort({ postId: -1 })\n      .exec();\n  }\n  return this.find({ ownerAccountId: accountId }).limit(limiter).sort({ postId: -1 }).exec();\n};\n\n/* Determine total number of posts for account\n * @param {number} - accountId\n */\nPostSchema.statics.totalForAccountId = function countPosts(accountId) {\n  return this.count({ ownerAccountId: accountId }).exec();\n};\n\n/* Compile the schema into a model\n * http://mongoosejs.com/docs/models.html\n */\nconst Post = mongoose.model('Post', PostSchema);\n\nexport { Post, PostStatus };\n\n\n\n// WEBPACK FOOTER //\n// ./src/apiserver/modules/Post/model.js","import dotenv from 'dotenv';\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n */\ndotenv.config();\n\n// Bring in Envvars from .env.\nconst envVars = [\n  'REDIS_URL',\n  'MONGODB_URI',\n  'NODE_ENV',\n  'API_SERVER_PORT',\n  'MAIN_SERVER_PORT',\n  'ACCOUNT_PEPPER_1',\n  'ACCOUNT_ENCRYPT_CURRENT_PEPPER',\n  'IDIER_WORKER_ID',\n];\n\n// Check that Envvars are set.\nenvVars.forEach((env) => {\n  if (!process.env[env]) {\n    throw new Error(`Environment variable ${env} not set.`);\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/environment.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 36\n// module chunks = 0","import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nconst options = {\n  server: { socketOptions: { keepAlive: 300000, connectTimeoutMS: 30000 } },\n  replset: { socketOptions: { keepAlive: 300000, connectTimeoutMS: 30000 } },\n};\n\nmongoose.Promise = global.Promise;\n\n/* Connect to mongo */\nmongoose.connect(MONGODB_URI, options);\nmongoose.connection\n  .once('open', () => console.log(`Connected to MongoDb: running on ${MONGODB_URI}`))\n  .on('error', err => console.warn('Warning', err));\n\nexport default mongoose;\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/mongoConnect.js","import redis from 'redis';\n\nconst REDIS_URL = process.env.REDIS_URL;\n\n/* Connect to redis */\nconst redisClient = redis.createClient(REDIS_URL);\n\nredisClient.on('error', function redisErrorReport(err) {\n  console.log(`Redis connection error ${err}`);\n});\n\nexport default redisClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/redisConnect.js","module.exports = require(\"redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"redis\"\n// module id = 39\n// module chunks = 0","module.exports = require(\"connect-redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"connect-redis\"\n// module id = 40\n// module chunks = 0"],"sourceRoot":""}